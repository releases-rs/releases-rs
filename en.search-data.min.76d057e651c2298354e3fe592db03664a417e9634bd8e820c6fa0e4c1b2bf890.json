[{"id":0,"href":"/docs/1.74.0/","title":"1.74.0","section":"Docs","content":" 1.74.0 nightly # Unreleased, branched from master\nWill be stable on: 16 November, 2023 Branched from master on: 29 September, 2023 Promote loongarch64-unknown-none* to Tier 2 (merged 1 day ago) Raise minimum supported Apple OS versions (merged 7 days ago) Command: also print removed env vars (merged 9 days ago) adjust how closure/generator types are printed (merged 9 days ago) [breaking change] Validate crate name in --extern [MCP 650] (merged 9 days ago) closure field capturing: don\u0026rsquo;t depend on alignment of packed fields (merged 15 days ago) Stabilize const_transmute_copy (merged 15 days ago) Stabilize io_error_other feature (merged 25 days ago) Add warning block support in rustdoc (merged 41 days ago) "},{"id":1,"href":"/docs/1.73.0/","title":"1.73.0","section":"Docs","content":" 1.73.0 beta # Unreleased, branched from master\nWill be stable on: 5 October, 2023 Branched from master on: 18 August, 2023 Cleaner assert_eq! \u0026amp; assert_ne! panic messages (merged 46 days ago) Stabilize thread local cell methods. (merged 46 days ago) check for non-defining uses of RPIT (merged 48 days ago) Partially stabilize int_roundings (merged 50 days ago) Update to LLVM 17 (merged 54 days ago) stabilize abi_thiscall (merged 55 days ago) Add internal_features lint (merged 58 days ago) Infer type in irrefutable slice patterns with fixed length as array (merged 59 days ago) Change default panic handler message format. (merged 61 days ago) Update Android system definitions and add riscv-linux-android as tier 3 target (merged 62 days ago) const-stablilize NonNull::as_ref (merged 63 days ago) make noop_method_call warn by default (merged 64 days ago) Update the minimum external LLVM to 15 (merged 64 days ago) Stabilize chown functions (unix_chown) (merged 71 days ago) [RFC] Support .comment section like GCC/Clang (!llvm.ident) (merged 72 days ago) "},{"id":2,"href":"/docs/1.72.1/","title":"1.72.1","section":"Docs","content":" 1.72.1 # Released on: 19 September, 2023 This is a patch release Changes # Adjust codegen change to improve LLVM codegen rustdoc: Fix self ty params in objects with lifetimes Fix regression in compile times Resolve some ICE regressions in the compiler: #115215 #115559 "},{"id":3,"href":"/docs/1.72.0/","title":"1.72.0","section":"Docs","content":" 1.72.0 # Released on: 24 August, 2023 Branched from master on: 7 July, 2023 Language # Replace const eval limit by a lint and add an exponential backoff warning expand: Change how #![cfg(FALSE)] behaves on crate root Stabilize inline asm for LoongArch64 Uplift clippy::undropped_manually_drops lint Uplift clippy::invalid_utf8_in_unchecked lint as invalid_from_utf8_unchecked and invalid_from_utf8 Uplift clippy::cast_ref_to_mut lint as invalid_reference_casting Uplift clippy::cmp_nan lint as invalid_nan_comparisons resolve: Remove artificial import ambiguity errors Don\u0026rsquo;t require associated types with Self: Sized bounds in dyn Trait objects Compiler # Remember names of cfg-ed out items to mention them in diagnostics Support for native WASM exceptions Add support for NetBSD/aarch64-be (big-endian arm64). Write to stdout if - is given as output file Force all native libraries to be statically linked when linking a static binary Add Tier 3 support for loongarch64-unknown-none* Prevent .eh_frame from being emitted for -C panic=abort Support 128-bit enum variant in debuginfo codegen compiler: update solaris/illumos to enable tsan support. Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Document memory orderings of thread::{park, unpark} io: soften ‘at most one write attempt’ requirement in io::Write::write Specify behavior of HashSet::insert Relax implicit T: Sized bounds on BufReader\u0026lt;T\u0026gt;, BufWriter\u0026lt;T\u0026gt; and LineWriter\u0026lt;T\u0026gt; Update runtime guarantee for select_nth_unstable Return Ok on kill if process has already exited Implement PartialOrd for Vecs over different allocators Use 128 bits for TypeId hash Don\u0026rsquo;t drain-on-drop in DrainFilter impls of various collections. Make {Arc,Rc,Weak}::ptr_eq ignore pointer metadata Rustdoc # Allow whitespace as path separator like double colon Add search result item types after their name Search for slices and arrays by type with [] Clean up type unification and \u0026ldquo;unboxing\u0026rdquo; Stabilized APIs # impl\u0026lt;T: Send\u0026gt; Sync for mpsc::Sender\u0026lt;T\u0026gt; impl TryFrom\u0026lt;\u0026amp;OsStr\u0026gt; for \u0026amp;str String::leak These APIs are now stable in const contexts:\nCStr::from_bytes_with_nul CStr::to_bytes CStr::to_bytes_with_nul CStr::to_str Cargo # Enable -Zdoctest-in-workspace by default. When running each documentation test, the working directory is set to the root directory of the package the test belongs to. docs #12221 #12288 Add support of the \u0026ldquo;default\u0026rdquo; keyword to reset previously set build.jobs parallelism back to the default. #12222 Compatibility Notes # Alter Display for Ipv6Addr for IPv4-compatible addresses Cargo changed feature name validation check to a hard error. The warning was added in Rust 1.49. These extended characters aren\u0026rsquo;t allowed on crates.io, so this should only impact users of other registries, or people who don\u0026rsquo;t publish to a registry. #12291 "},{"id":4,"href":"/docs/1.71.1/","title":"1.71.1","section":"Docs","content":" 1.71.1 # Released on: 3 August, 2023 This is a patch release Changes # Fix CVE-2023-38497: Cargo did not respect the umask when extracting dependencies Fix bash completion for users of Rustup Do not show suspicious_double_ref_op lint when calling borrow() Fix ICE: substitute types before checking inlining compatibility Fix ICE: don\u0026rsquo;t use can_eq in derive(..) suggestion for missing method Fix building Rust 1.71.0 from the source tarball "},{"id":5,"href":"/docs/1.71.0/","title":"1.71.0","section":"Docs","content":" 1.71.0 # Released on: 13 July, 2023 Branched from master on: 26 May, 2023 Language # Stabilize raw-dylib, link_ordinal, import_name_type and -Cdlltool. Uplift clippy::{drop,forget}_{ref,copy} lints. Type inference is more conservative around constrained vars. Use fulfillment to check Drop impl compatibility Compiler # Evaluate place expression in PlaceMention, making let _ = patterns more consistent with respect to the borrow checker. Add --print deployment-target flag for Apple targets. Stabilize extern \u0026quot;C-unwind\u0026quot; and friends. The existing extern \u0026quot;C\u0026quot; etc. may change behavior for cross-language unwinding in a future release. Update the version of musl used on *-linux-musl targets to 1.2.3, enabling time64 on 32-bit systems. Stabilize debugger_visualizer for embedding metadata like Microsoft\u0026rsquo;s Natvis. Enable flatten-format-args by default. Make Self respect tuple constructor privacy. Improve niche placement by trying two strategies and picking the better result. Use apple-m1 as the target CPU for aarch64-apple-darwin. Add Tier 3 support for the x86_64h-apple-darwin target. Promote loongarch64-unknown-linux-gnu to Tier 2 with host tools. Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Rework handling of recursive panics. Additional panics are allowed while unwinding, as long as they are caught before escaping a Drop implementation, but panicking within a panic hook is now an immediate abort. Loosen From\u0026lt;\u0026amp;[T]\u0026gt; for Box\u0026lt;[T]\u0026gt; bound to T: Clone. Remove unnecessary T: Send bound in Error for mpsc::SendError\u0026lt;T\u0026gt; and TrySendError\u0026lt;T\u0026gt;. Fix docs for alloc::realloc to match Layout requirements that the size must not exceed isize::MAX. Document const {} syntax for std::thread_local. This syntax was stabilized in Rust 1.59, but not previously mentioned in release notes. Stabilized APIs # CStr::is_empty BuildHasher::hash_one NonZeroI*::is_positive NonZeroI*::is_negative NonZeroI*::checked_neg NonZeroI*::overflowing_neg NonZeroI*::saturating_neg NonZeroI*::wrapping_neg Neg for NonZeroI* Neg for \u0026amp;NonZeroI* From\u0026lt;[T; N]\u0026gt; for (T...) (array to N-tuple for N in 1..=12) From\u0026lt;(T...)\u0026gt; for [T; N] (N-tuple to array for N in 1..=12) windows::io::AsHandle for Box\u0026lt;T\u0026gt; windows::io::AsHandle for Rc\u0026lt;T\u0026gt; windows::io::AsHandle for Arc\u0026lt;T\u0026gt; windows::io::AsSocket for Box\u0026lt;T\u0026gt; windows::io::AsSocket for Rc\u0026lt;T\u0026gt; windows::io::AsSocket for Arc\u0026lt;T\u0026gt; These APIs are now stable in const contexts:\n\u0026lt;*const T\u0026gt;::read \u0026lt;*const T\u0026gt;::read_unaligned \u0026lt;*mut T\u0026gt;::read \u0026lt;*mut T\u0026gt;::read_unaligned ptr::read ptr::read_unaligned \u0026lt;[T]\u0026gt;::split_at Cargo # Allow named debuginfo options in Cargo.toml. Add workspace_default_members to the output of cargo metadata. Automatically inherit workspace fields when running cargo new/cargo init. Rustdoc # Add a new rustdoc::unescaped_backticks lint for broken inline code. Support strikethrough with single tildes. (~~old~~ vs. ~new~) Misc # Compatibility Notes # Remove structural match from TypeId. Code that uses a constant TypeId in a pattern will potentially be broken. Known cases have already been fixed \u0026ndash; in particular, users of the log crate\u0026rsquo;s kv_unstable feature should update to log v0.4.18 or later. Add a sysroot crate to represent the standard library crates. This does not affect stable users, but may require adjustment in tools that build their own standard library. Cargo optimizes its usage under rustup. When Cargo detects it will run rustc pointing to a rustup proxy, it\u0026rsquo;ll try bypassing the proxy and use the underlying binary directly. There are assumptions around the interaction with rustup and RUSTUP_TOOLCHAIN. However, it\u0026rsquo;s not expected to affect normal users. When querying a package, Cargo tries only the original name, all hyphens, and all underscores to handle misspellings. Previously, Cargo tried each combination of hyphens and underscores, causing excessive requests to crates.io. Cargo now disallows RUSTUP_HOME and RUSTUP_TOOLCHAIN in the [env] configuration table. This is considered to be not a use case Cargo would like to support, since it will likely cause problems or lead to confusion. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\n"},{"id":6,"href":"/docs/1.70.0/","title":"1.70.0","section":"Docs","content":" 1.70.0 # Released on: 1 June, 2023 Branched from master on: 14 April, 2023 Language # Relax ordering rules for asm! operands Properly allow macro expanded format_args invocations to uses captures Lint ambiguous glob re-exports Perform const and unsafe checking for expressions in let _ = expr position. Compiler # Extend -Cdebuginfo with new options and named aliases This provides a smaller version of debuginfo for cases that only need line number information (-Cdebuginfo=line-tables-only), which may eventually become the default for -Cdebuginfo=1. Make unused_allocation lint against Box::new too Detect uninhabited types early in const eval Switch to LLD as default linker for {arm,thumb}v4t-none-eabi Add tier 3 target loongarch64-unknown-linux-gnu Add tier 3 target for i586-pc-nto-qnx700 (QNX Neutrino RTOS, version 7.0), Insert alignment checks for pointer dereferences as debug assertions This catches undefined behavior at runtime, and may cause existing code to fail. Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Document NonZeroXxx layout guarantees Windows: make Command prefer non-verbatim paths Implement Default for some alloc/core iterators Fix handling of trailing bare CR in str::lines allow negative numeric literals in concat! Add documentation about the memory layout of Cell Use partial_cmp to implement tuple lt/le/ge/gt Stabilize atomic_as_ptr Stabilize nonnull_slice_from_raw_parts Partial stabilization of once_cell Stabilize nonzero_min_max Flatten/inline format_args!() and (string and int) literal arguments into format_args!() Stabilize movbe target feature don\u0026rsquo;t splice from files into pipes in io::copy Add a builtin unstable FnPtr trait that is implemented for all function pointers This extends Debug, Pointer, Hash, PartialEq, Eq, PartialOrd, and Ord implementations for function pointers with all ABIs. Stabilized APIs # NonZero*::MIN/MAX BinaryHeap::retain Default for std::collections::binary_heap::IntoIter Default for std::collections::btree_map::{IntoIter, Iter, IterMut} Default for std::collections::btree_map::{IntoKeys, Keys} Default for std::collections::btree_map::{IntoValues, Values} Default for std::collections::btree_map::Range Default for std::collections::btree_set::{IntoIter, Iter} Default for std::collections::btree_set::Range Default for std::collections::linked_list::{IntoIter, Iter, IterMut} Default for std::vec::IntoIter Default for std::iter::Chain Default for std::iter::Cloned Default for std::iter::Copied Default for std::iter::Enumerate Default for std::iter::Flatten Default for std::iter::Fuse Default for std::iter::Rev Default for std::slice::Iter Default for std::slice::IterMut Rc::into_inner Arc::into_inner std::cell::OnceCell Option::is_some_and NonNull::slice_from_raw_parts Result::is_ok_and Result::is_err_and std::sync::atomic::Atomic*::as_ptr std::io::IsTerminal std::os::linux::net::SocketAddrExt std::os::unix::net::UnixDatagram::bind_addr std::os::unix::net::UnixDatagram::connect_addr std::os::unix::net::UnixDatagram::send_to_addr std::os::unix::net::UnixListener::bind_addr std::path::Path::as_mut_os_str std::sync::OnceLock Cargo # Add CARGO_PKG_README Make sparse the default protocol for crates.io Accurately show status when downgrading dependencies Use registry.default for login/logout Stabilize cargo logout Misc # Stabilize rustdoc --test-run-directory Compatibility Notes # Prevent stable libtest from supporting -Zunstable-options Perform const and unsafe checking for expressions in let _ = expr position. WebAssembly targets enable sign-ext and mutable-globals features in codegen This may cause incompatibility with older execution environments. Insert alignment checks for pointer dereferences as debug assertions This catches undefined behavior at runtime, and may cause existing code to fail. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nUpgrade to LLVM 16 Use SipHash-1-3 instead of SipHash-2-4 for StableHasher "},{"id":7,"href":"/docs/1.69.0/","title":"1.69.0","section":"Docs","content":" 1.69.0 # Released on: 20 April, 2023 Branched from master on: 3 March, 2023 Language # Deriving built-in traits on packed structs works with Copy fields. Stabilize the cmpxchg16b target feature on x86 and x86_64. Improve analysis of trait bounds for associated types. Allow associated types to be used as union fields. Allow Self: Autotrait bounds on dyn-safe trait methods. Treat str as containing [u8] for auto trait purposes. Compiler # Upgrade *-pc-windows-gnu on CI to mingw-w64 v10 and GCC 12.2. Rework min_choice algorithm of member constraints. Support true and false as boolean flags in compiler arguments. Default repr(C) enums to c_int size. Libraries # Implement the unstable DispatchFromDyn for cell types, allowing downstream experimentation with custom method receivers. Document that fmt::Arguments::as_str() may return Some(_) in more cases after optimization, subject to change. Implement AsFd and AsRawFd for Rc. Stabilized APIs # CStr::from_bytes_until_nul core::ffi::FromBytesUntilNulError These APIs are now stable in const contexts:\nSocketAddr::new SocketAddr::ip SocketAddr::port SocketAddr::is_ipv4 SocketAddr::is_ipv6 SocketAddrV4::new SocketAddrV4::ip SocketAddrV4::port SocketAddrV6::new SocketAddrV6::ip SocketAddrV6::port SocketAddrV6::flowinfo SocketAddrV6::scope_id Cargo # Cargo now suggests cargo fix or cargo clippy --fix when compilation warnings are auto-fixable. Cargo now suggests cargo add if you try to install a library crate. Cargo now sets the CARGO_BIN_NAME environment variable also for binary examples. Rustdoc # Vertically compact trait bound formatting. Only include stable lints in rustdoc::all group. Compute maximum Levenshtein distance based on the query. Remove inconsistently-present sidebar tooltips. Search by macro when query ends with !. Compatibility Notes # The rust-analysis component from rustup now only contains a warning placeholder. This was primarily intended for RLS, and the corresponding -Zsave-analysis flag has been removed from the compiler as well. Unaligned references to packed fields are now a hard error. This has been a warning since 1.53, and denied by default with a future-compatibility warning since 1.62. Update the minimum external LLVM to 14. Cargo now emits errors on invalid characters in a registry token. When default-features is set to false of a workspace dependency, and an inherited dependency of a member has default-features = true, Cargo will enable default features of that dependency. Cargo denies CARGO_HOME in the [env] configuration table. Cargo itself doesn\u0026rsquo;t pick up this value, but recursive calls to cargo would, which was not intended. Debuginfo for build dependencies is now off if not explicitly set. This is expected to improve the overall build time. The Rust distribution no longer always includes rustdoc If tools = [...] is set in config.toml, we will respect a missing rustdoc in that list. By default rustdoc remains included. To retain the prior behavior explicitly add \u0026quot;rustdoc\u0026quot; to the list. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nMove format_args!() into AST (and expand it during AST lowering) "},{"id":8,"href":"/docs/1.68.2/","title":"1.68.2","section":"Docs","content":" 1.68.2 # Released on: 28 March, 2023 This is a patch release Changes # Update the GitHub RSA host key bundled within Cargo. The key was rotated by GitHub on 2023-03-24 after the old one leaked. Mark the old GitHub RSA host key as revoked. This will prevent Cargo from accepting the leaked key even when trusted by the system. Add support for @revoked and a better error message for @cert-authority in Cargo\u0026rsquo;s SSH host key verification "},{"id":9,"href":"/docs/1.68.1/","title":"1.68.1","section":"Docs","content":" 1.68.1 # Released on: 23 March, 2023 This is a patch release Changes # Fix miscompilation in produced Windows MSVC artifacts This was introduced by enabling ThinLTO for the distributed rustc which led to miscompilations in the resulting binary. Currently this is believed to be limited to the -Zdylib-lto flag used for rustc compilation, rather than a general bug in ThinLTO, so only rustc artifacts should be affected. Fix \u0026ndash;enable-local-rust builds Treat $prefix-clang as clang in linker detection code Fix panic in compiler code "},{"id":10,"href":"/docs/1.68.0/","title":"1.68.0","section":"Docs","content":" 1.68.0 # Released on: 9 March, 2023 Branched from master on: 20 January, 2023 Language # Stabilize default_alloc_error_handler This allows usage of alloc on stable without requiring the definition of a handler for allocation failure. Defining custom handlers is still unstable. Stabilize efiapi calling convention. Remove implicit promotion for types with drop glue Compiler # Change bindings_with_variant_name to deny-by-default Allow .. to be parsed as let initializer Add armv7-sony-vita-newlibeabihf as a tier 3 target Always check alignment during compile-time const evaluation Disable \u0026ldquo;split dwarf inlining\u0026rdquo; by default. Add vendor to Fuchsia\u0026rsquo;s target triple Enable sanitizers for s390x-linux Libraries # Loosen the bound on the Debug implementation of Weak. Make std::task::Context !Send and !Sync PhantomData layout guarantees Don\u0026rsquo;t derive Debug for OnceWith \u0026amp; RepeatWith Implement DerefMut for PathBuf Add O(1) Vec -\u0026gt; VecDeque conversion guarantee Leak amplification for peek_mut() to ensure BinaryHeap\u0026rsquo;s invariant is always met Stabilized APIs # {core,std}::pin::pin! impl From\u0026lt;bool\u0026gt; for {f32,f64} std::path::MAIN_SEPARATOR_STR impl DerefMut for PathBuf These APIs are now stable in const contexts:\nVecDeque::new Cargo # Stabilize sparse registry support for crates.io cargo build --verbose tells you more about why it recompiles. Show progress of crates.io index update even net.git-fetch-with-cli option enabled Misc # Compatibility Notes # Only support Android NDK 25 or newer Add SEMICOLON_IN_EXPRESSIONS_FROM_MACROS to future-incompat report Only specify --target by default for -Zgcc-ld=lld on wasm Bump IMPLIED_BOUNDS_ENTAILMENT to Deny + ReportNow std::task::Context no longer implements Send and Sync Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nEncode spans relative to the enclosing item Don\u0026rsquo;t normalize in AstConv Find the right lower bound region in the scenario of partial order relations Fix impl block in const expr Check ADT fields for copy implementations considering regions rustdoc: simplify JS search routine by not messing with lev distance Enable ThinLTO for rustc on x86_64-pc-windows-msvc Enable ThinLTO for rustc on x86_64-apple-darwin "},{"id":11,"href":"/docs/1.67.1/","title":"1.67.1","section":"Docs","content":" 1.67.1 # Released on: 9 February, 2023 This is a patch release Changes # Fix interoperability with thin archives. Fix an internal error in the compiler build process. Downgrade clippy::uninlined_format_args to pedantic. "},{"id":12,"href":"/docs/1.67.0/","title":"1.67.0","section":"Docs","content":" 1.67.0 # Released on: 26 January, 2023 Branched from master on: 9 December, 2022 Language # Make Sized predicates coinductive, allowing cycles. #[must_use] annotations on async fn also affect the Future::Output. Elaborate supertrait obligations when deducing closure signatures. Invalid literals are no longer an error under cfg(FALSE). Unreserve braced enum variants in value namespace. Compiler # Enable varargs support for calling conventions other than C or cdecl. Add new MIR constant propagation based on dataflow analysis. Optimize field ordering by grouping m*2^n-sized fields with equivalently aligned ones. Stabilize native library modifier verbatim. Added, updated, and removed targets:\nAdd a tier 3 target for PowerPC on AIX, powerpc64-ibm-aix. Add a tier 3 target for the Sony PlayStation 1, mipsel-sony-psx. Add tier 3 no_std targets for the QNX Neutrino RTOS, aarch64-unknown-nto-qnx710 and x86_64-pc-nto-qnx710. Promote UEFI targets to tier 2, aarch64-unknown-uefi, i686-unknown-uefi, and x86_64-unknown-uefi. Remove tier 3 linuxkernel targets (not used by the actual kernel). Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Merge crossbeam-channel into std::sync::mpsc. Fix inconsistent rounding of 0.5 when formatted to 0 decimal places. Derive Eq and Hash for ControlFlow. Don\u0026rsquo;t build compiler_builtins with -C panic=abort. Stabilized APIs # {integer}::checked_ilog {integer}::checked_ilog2 {integer}::checked_ilog10 {integer}::ilog {integer}::ilog2 {integer}::ilog10 NonZeroU*::ilog2 NonZeroU*::ilog10 NonZero*::BITS These APIs are now stable in const contexts:\nchar::from_u32 char::from_digit char::to_digit core::char::from_u32 core::char::from_digit Compatibility Notes # The layout of repr(Rust) types now groups m*2^n-sized fields with equivalently aligned ones. This is intended to be an optimization, but it is also known to increase type sizes in a few cases for the placement of enum tags. As a reminder, the layout of repr(Rust) types is an implementation detail, subject to change. 0.5 now rounds to 0 when formatted to 0 decimal places. This makes it consistent with the rest of floating point formatting that rounds ties toward even digits. Chains of \u0026amp;\u0026amp; and || will now drop temporaries from their sub-expressions in evaluation order, left-to-right. Previously, it was \u0026ldquo;twisted\u0026rdquo; such that the first expression dropped its temporaries last, after all of the other expressions dropped in order. Underscore suffixes on string literals are now a hard error. This has been a future-compatibility warning since 1.20.0. Stop passing -export-dynamic to wasm-ld. main is now mangled as __main_void on wasm32-wasi. Cargo now emits an error if there are multiple registries in the configuration with the same index URL. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nRewrite LLVM\u0026rsquo;s archive writer in Rust. "},{"id":13,"href":"/docs/1.66.1/","title":"1.66.1","section":"Docs","content":" 1.66.1 # Released on: 10 January, 2023 This is a patch release Changes # Added validation of SSH host keys for git URLs in Cargo (CVE-2022-46176) "},{"id":14,"href":"/docs/1.66.0/","title":"1.66.0","section":"Docs","content":" 1.66.0 # Released on: 15 December, 2022 Branched from master on: 28 October, 2022 Language # Permit specifying explicit discriminants on all repr(Int) enums #[repr(u8)] enum Foo { A(u8) = 0, B(i8) = 1, C(bool) = 42, } Allow transmutes between the same type differing only in lifetimes Change constant evaluation errors from a deny-by-default lint to a hard error Trigger must_use on impl Trait for supertraits This makes impl ExactSizeIterator respect the existing #[must_use] annotation on Iterator. Allow ..=X in patterns Uplift clippy::for_loops_over_fallibles lint into rustc Stabilize sym operands in inline assembly Update to Unicode 15 Opaque types no longer imply lifetime bounds This is a soundness fix which may break code that was erroneously relying on this behavior. Compiler # Add armv5te-none-eabi and thumbv5te-none-eabi tier 3 targets Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support. Add support for linking against macOS universal libraries Libraries # Fix #[derive(Default)] on a generic #[default] enum adding unnecessary Default bounds Update to Unicode 15 Stabilized APIs # proc_macro::Span::source_text uX::{checked_add_signed, overflowing_add_signed, saturating_add_signed, wrapping_add_signed} iX::{checked_add_unsigned, overflowing_add_unsigned, saturating_add_unsigned, wrapping_add_unsigned} iX::{checked_sub_unsigned, overflowing_sub_unsigned, saturating_sub_unsigned, wrapping_sub_unsigned} BTreeSet::{first, last, pop_first, pop_last} BTreeMap::{first_key_value, last_key_value, first_entry, last_entry, pop_first, pop_last} Add AsFd implementations for stdio lock types on WASI. impl TryFrom\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt; for Box\u0026lt;[T; N]\u0026gt; core::hint::black_box Duration::try_from_secs_{f32,f64} Option::unzip std::os::fd Rustdoc # Add Rustdoc warning for invalid HTML tags in the documentation Cargo # Added cargo remove to remove dependencies from Cargo.toml cargo publish now waits for the new version to be downloadable before exiting See detailed release notes for more.\nCompatibility Notes # Only apply ProceduralMasquerade hack to older versions of rental Don\u0026rsquo;t export __heap_base and __data_end on wasm32-wasi. Don\u0026rsquo;t export __wasm_init_memory on WebAssembly. Only export __tls_* on wasm32-unknown-unknown. Don\u0026rsquo;t link to libresolv in libstd on Darwin Update libstd\u0026rsquo;s libc to 0.2.135 (to make libstd no longer pull in libiconv.dylib on Darwin) Opaque types no longer imply lifetime bounds This is a soundness fix which may break code that was erroneously relying on this behavior. Make order_dependent_trait_objects show up in future-breakage reports Change std::process::Command spawning to default to inheriting the parent\u0026rsquo;s signal mask Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nEnable BOLT for LLVM compilation Enable LTO for rustc_driver.so "},{"id":15,"href":"/docs/1.65.0/","title":"1.65.0","section":"Docs","content":" 1.65.0 # Released on: 3 November, 2022 Branched from master on: 16 September, 2022 Language # Error on as casts of enums with #[non_exhaustive] variants Stabilize let else Stabilize generic associated types (GATs) Add lints let_underscore_drop and let_underscore_lock from Clippy Stabilize breaking from arbitrary labeled blocks (\u0026ldquo;label-break-value\u0026rdquo;) Uninitialized integers, floats, and raw pointers are now considered immediate UB. Usage of MaybeUninit is the correct way to work with uninitialized memory. Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a Do not allow Drop impl on foreign ADTs Compiler # Stabilize -Csplit-debuginfo on Linux Use niche-filling optimization even when multiple variants have data Associated type projections are now verified to be well-formed prior to resolving the underlying type Stringify non-shorthand visibility correctly Normalize struct field types when unsizing Update to LLVM 15 Fix aarch64 call abi to correctly zeroext when needed debuginfo: Generalize C++-like encoding for enums Add special_module_name lint Add support for generating unique profraw files by default when using -C instrument-coverage Allow dynamic linking for iOS/tvOS targets New targets:\nAdd armv4t-none-eabi as a tier 3 target Add powerpc64-unknown-openbsd and riscv64-unknown-openbsd as tier 3 targets Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support. Libraries # Don\u0026rsquo;t generate PartialEq::ne in derive(PartialEq) Windows RNG: Use BCRYPT_RNG_ALG_HANDLE by default Forbid mixing System with direct system allocator calls Document no support for writing to non-blocking stdio/stderr std::layout::Layout size must not overflow isize::MAX when rounded up to align This also changes the safety conditions on Layout::from_size_align_unchecked. Stabilized APIs # std::backtrace::Backtrace Bound::as_ref std::io::read_to_string \u0026lt;*const T\u0026gt;::cast_mut \u0026lt;*mut T\u0026gt;::cast_const These APIs are now stable in const contexts:\n\u0026lt;*const T\u0026gt;::offset_from \u0026lt;*mut T\u0026gt;::offset_from Cargo # Apply GitHub fast path even for partial hashes Do not add home bin path to PATH if it\u0026rsquo;s already there Take priority into account within the pending queue. This slightly optimizes job scheduling by Cargo, with typically small improvements on larger crate graph builds. Compatibility Notes # std::layout::Layout size must not overflow isize::MAX when rounded up to align. This also changes the safety conditions on Layout::from_size_align_unchecked. PollFn now only implements Unpin if the closure is Unpin. This is a possible breaking change if users were relying on the blanket unpin implementation. See discussion on the PR for details of why this change was made. Drop ExactSizeIterator impl from std::char::EscapeAscii This is a backwards-incompatible change to the standard library\u0026rsquo;s surface area, but is unlikely to affect real world usage. Do not consider a single repeated lifetime eligible for elision in the return type This behavior was unintentionally changed in 1.64.0, and this release reverts that change by making this an error again. Reenable disabled early syntax gates as future-incompatibility lints Update the minimum external LLVM to 13 Don\u0026rsquo;t duplicate file descriptors into stdio fds Sunset RLS Deny usage of #![cfg_attr(..., crate_type = ...)] to set the crate type This strengthens the forward compatibility lint deprecated_cfg_attr_crate_type_name to deny. llvm-has-rust-patches allows setting the build system to treat the LLVM as having Rust-specific patches This option may need to be set for distributions that are building Rust with a patched LLVM via llvm-config, not the built-in LLVM. Combining three or more languages (e.g. Objective C, C++ and Rust) into one binary may hit linker limitations when using lld. For more information, see issue 102754. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nAdd x.sh and x.ps1 shell scripts compiletest: use target cfg instead of hard-coded tables Use object instead of LLVM for reading bitcode from rlibs Enable MIR inlining for optimized compilations This provides a 3-10% improvement in compiletimes for real world crates. See perf results. "},{"id":16,"href":"/docs/1.64.0/","title":"1.64.0","section":"Docs","content":" 1.64.0 # Released on: 22 September, 2022 Branched from master on: 5 August, 2022 Language # Unions with mutable references or tuples of allowed types are now allowed It is now considered valid to deallocate memory pointed to by a shared reference \u0026amp;T if every byte in T is inside an UnsafeCell Unused tuple struct fields are now warned against in an allow-by-default lint, unused_tuple_struct_fields, similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future. Compiler # Add Nintendo Switch as tier 3 target Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support. Only compile #[used] as llvm.compiler.used for ELF targets Add the --diagnostic-width compiler flag to define the terminal width. Add support for link-flavor rust-lld for iOS, tvOS and watchOS Libraries # Remove restrictions on compare-exchange memory ordering. You can now write! or writeln! into an OsString: Implement fmt::Write for OsString Make RwLockReadGuard covariant Implement FusedIterator for std::net::[Into]Incoming impl\u0026lt;T: AsRawFd\u0026gt; AsRawFd for {Arc,Box}\u0026lt;T\u0026gt; ptr::copy and ptr::swap are doing untyped copies Add cgroupv1 support to available_parallelism Mitigate many incorrect uses of mem::uninitialized Stabilized APIs # future::IntoFuture future::poll_fn task::ready! num::NonZero*::checked_mul num::NonZero*::checked_pow num::NonZero*::saturating_mul num::NonZero*::saturating_pow num::NonZeroI*::abs num::NonZeroI*::checked_abs num::NonZeroI*::overflowing_abs num::NonZeroI*::saturating_abs num::NonZeroI*::unsigned_abs num::NonZeroI*::wrapping_abs num::NonZeroU*::checked_add num::NonZeroU*::checked_next_power_of_two num::NonZeroU*::saturating_add os::unix::process::CommandExt::process_group os::windows::fs::FileTypeExt::is_symlink_dir os::windows::fs::FileTypeExt::is_symlink_file These types were previously stable in std::ffi, but are now also available in core and alloc:\ncore::ffi::CStr core::ffi::FromBytesWithNulError alloc::ffi::CString alloc::ffi::FromVecWithNulError alloc::ffi::IntoStringError alloc::ffi::NulError These types were previously stable in std::os::raw, but are now also available in core::ffi and std::ffi:\nffi::c_char ffi::c_double ffi::c_float ffi::c_int ffi::c_long ffi::c_longlong ffi::c_schar ffi::c_short ffi::c_uchar ffi::c_uint ffi::c_ulong ffi::c_ulonglong ffi::c_ushort These APIs are now usable in const contexts:\nslice::from_raw_parts Cargo # Packages can now inherit settings from the workspace so that the settings can be centralized in one place. See workspace.package and workspace.dependencies for more details on how to define these common settings. Cargo commands can now accept multiple --target flags to build for multiple targets at once, and the build.target config option may now take an array of multiple targets. The --jobs argument can now take a negative number to count backwards from the max CPUs. cargo add will now update Cargo.lock. Added the --crate-type flag to cargo rustc to override the crate type. Significantly improved the performance fetching git dependencies from GitHub when using a hash in the rev field. Misc # The rust-analyzer rustup component is now available on the stable channel. Compatibility Notes # The minimum required versions for all -linux-gnu targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: Increase the minimum linux-gnu versions Network primitives are now implemented with the ideal Rust layout, not the C system layout. This can cause problems when transmuting the types. Add assertion that transmute_copy\u0026rsquo;s U is not larger than T A soundness bug in BTreeMap was fixed that allowed data it was borrowing to be dropped before the container. The Drop behavior of C-like enums cast to ints has changed. These are already discouraged by a compiler warning. Relate late-bound closure lifetimes to parent fn in NLL Errors at const-eval time are now in future incompatibility reports On the thumbv6m-none-eabi target, some incorrect asm! statements were erroneously accepted if they used the high registers (r8 to r14) as an input/output operand. This is no longer accepted. impl Trait was accidentally accepted as the associated type value of return-position impl Trait, without fulfilling all the trait bounds of that associated type, as long as the hidden type satisfies said bounds. This has been fixed. Internal Changes # These changes do not affect any public interfaces of Rust, but they represent significant improvements to the performance or internals of rustc and related tools.\nWindows builds now use profile-guided optimization, providing 10-20% improvements to compiler performance: Utilize PGO for windows x64 rustc dist builds Stop keeping metadata in memory before writing it to disk compiletest: strip debuginfo by default for mode=ui Many improvements to generated code for derives, including performance improvements: Don\u0026rsquo;t use match-destructuring for derived ops on structs. Many small deriving cleanups More derive output improvements Clarify deriving code Final derive output improvements Stop injecting #[allow(unused_qualifications)] in generated derive implementations Improve derive(Debug) Bump to clap 3 fully move dropck to mir Optimize Vec::insert for the case where index == len. Convert rust-analyzer to an in-tree tool "},{"id":17,"href":"/docs/1.63.0/","title":"1.63.0","section":"Docs","content":" 1.63.0 # Released on: 11 August, 2022 Branched from master on: 24 June, 2022 Language # Remove migrate borrowck mode for pre-NLL errors. Modify MIR building to drop repeat expressions with length zero. Remove label/lifetime shadowing warnings. Allow explicit generic arguments in the presence of impl Trait args. Make cenum_impl_drop_cast warnings deny-by-default. Prevent unwinding when -C panic=abort is used regardless of declared ABI. lub: don\u0026rsquo;t bail out due to empty binders. Compiler # Stabilize the bundle native library modifier, also removing the deprecated static-nobundle linking kind. Add Apple WatchOS compile targets*. Add a Windows application manifest to rustc-main. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Implement Copy, Clone, PartialEq and Eq for core::fmt::Alignment. Extend ptr::null and null_mut to all thin (including extern) types. impl Read and Write for VecDeque\u0026lt;u8\u0026gt;. STD support for the Nintendo 3DS. Use rounding in float to Duration conversion methods. Make write/print macros eagerly drop temporaries. Implement internal traits that enable [OsStr]::join. Implement Hash for core::alloc::Layout. Add capacity documentation for OsString. Put a bound on collection misbehavior. Make std::mem::needs_drop accept ?Sized. impl Termination for Infallible and then make the Result impls of Termination more generic. Document Rust\u0026rsquo;s stance on /proc/self/mem. Stabilized APIs # array::from_fn Box::into_pin BinaryHeap::try_reserve BinaryHeap::try_reserve_exact OsString::try_reserve OsString::try_reserve_exact PathBuf::try_reserve PathBuf::try_reserve_exact Path::try_exists Ref::filter_map RefMut::filter_map NonNull::\u0026lt;[T]\u0026gt;::len ToOwned::clone_into Ipv6Addr::to_ipv4_mapped unix::io::AsFd unix::io::BorrowedFd\u0026lt;'fd\u0026gt; unix::io::OwnedFd windows::io::AsHandle windows::io::BorrowedHandle\u0026lt;'handle\u0026gt; windows::io::OwnedHandle windows::io::HandleOrInvalid windows::io::HandleOrNull windows::io::InvalidHandleError windows::io::NullHandleError windows::io::AsSocket windows::io::BorrowedSocket\u0026lt;'handle\u0026gt; windows::io::OwnedSocket thread::scope thread::Scope thread::ScopedJoinHandle These APIs are now usable in const contexts:\narray::from_ref slice::from_ref intrinsics::copy intrinsics::copy_nonoverlapping \u0026lt;*const T\u0026gt;::copy_to \u0026lt;*const T\u0026gt;::copy_to_nonoverlapping \u0026lt;*mut T\u0026gt;::copy_to \u0026lt;*mut T\u0026gt;::copy_to_nonoverlapping \u0026lt;*mut T\u0026gt;::copy_from \u0026lt;*mut T\u0026gt;::copy_from_nonoverlapping str::from_utf8 Utf8Error::error_len Utf8Error::valid_up_to Condvar::new Mutex::new RwLock::new Cargo # Stabilize the --config path command-line argument. Expose rust-version in the environment as CARGO_PKG_RUST_VERSION. Compatibility Notes # #[link] attributes are now checked more strictly, which may introduce errors for invalid attribute arguments that were previously ignored. Rounding is now used when converting a float to a Duration. The converted duration can differ slightly from what it was. Internal Changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nPrepare Rust for LLVM opaque pointers. "},{"id":18,"href":"/docs/1.62.1/","title":"1.62.1","section":"Docs","content":" 1.62.1 # Released on: 19 July, 2022 This is a patch release Rust 1.62.1 addresses a few recent regressions in the compiler and standard library, and also mitigates a CPU vulnerability on Intel SGX.\nThe compiler fixed unsound function coercions involving impl Trait return types. The compiler fixed an incremental compilation bug with async fn lifetimes. Windows added a fallback for overlapped I/O in synchronous reads and writes. The x86_64-fortanix-unknown-sgx target added a mitigation for the MMIO stale data vulnerability, advisory INTEL-SA-00615. "},{"id":19,"href":"/docs/1.62.0/","title":"1.62.0","section":"Docs","content":" 1.62.0 # Released on: 30 June, 2022 Branched from master on: 13 May, 2022 Language # Stabilize #[derive(Default)] on enums with a #[default] variant Teach flow sensitive checks that visibly uninhabited call expressions never return Fix constants not getting dropped if part of a diverging expression Support unit struct/enum variant in destructuring assignment Remove mutable_borrow_reservation_conflict lint and allow the code pattern const functions may now specify extern \u0026quot;C\u0026quot; or extern \u0026quot;Rust\u0026quot; Compiler # linker: Stop using whole-archive on dependencies of dylibs Make unaligned_references lint deny-by-default This lint is also a future compatibility lint, and is expected to eventually become a hard error. Only add codegen backend to dep info if -Zbinary-dep-depinfo is used Reject #[thread_local] attribute on non-static items Add tier 3 aarch64-pc-windows-gnullvm and x86_64-pc-windows-gnullvm targets* Implement a lint to warn about unused macro rules Promote x86_64-unknown-none target to Tier 2* * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Windows: Use a pipe relay for chaining pipes Replace Linux Mutex and Condvar with futex based ones. Replace RwLock by a futex based one on Linux std: directly use pthread in UNIX parker implementation Stabilized APIs # bool::then_some f32::total_cmp f64::total_cmp Stdin::lines windows::CommandExt::raw_arg impl\u0026lt;T: Default\u0026gt; Default for AssertUnwindSafe\u0026lt;T\u0026gt; From\u0026lt;Rc\u0026lt;str\u0026gt;\u0026gt; for Rc\u0026lt;[u8]\u0026gt; From\u0026lt;Arc\u0026lt;str\u0026gt;\u0026gt; for Arc\u0026lt;[u8]\u0026gt; FusedIterator for EncodeWide RDM intrinsics on aarch64 Clippy # Create clippy lint against unexpectedly late drop for temporaries in match scrutinee expressions Cargo # Added the cargo add command for adding dependencies to Cargo.toml from the command-line. docs Package ID specs now support name@version syntax in addition to the previous name:version to align with the behavior in cargo add and other tools. cargo install and cargo yank also now support this syntax so the version does not need to passed as a separate flag. The git and registry directories in Cargo\u0026rsquo;s home directory (usually ~/.cargo) are now marked as cache directories so that they are not included in backups or content indexing (on Windows). Added automatic @ argfile support, which will use \u0026ldquo;response files\u0026rdquo; if the command-line to rustc exceeds the operating system\u0026rsquo;s limit. Compatibility Notes # cargo test now passes --target to rustdoc if the specified target is the same as the host target. #10594 rustdoc: doctests are now run on unexported macro_rules! macros, matching other private items rustdoc: Remove .woff font files Enforce Copy bounds for repeat elements while considering lifetimes Windows: Fix potential unsoundness by aborting if File reads or writes cannot complete synchronously. Internal Changes # Unify ReentrantMutex implementations across all platforms These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\n"},{"id":20,"href":"/docs/1.61.0/","title":"1.61.0","section":"Docs","content":" 1.61.0 # Released on: 19 May, 2022 Branched from master on: 1 April, 2022 Language # const fn signatures can now include generic trait bounds const fn signatures can now use impl Trait in argument and return position Function pointers can now be created, cast, and passed around in a const fn Recursive calls can now set the value of a function\u0026rsquo;s opaque impl Trait return type Compiler # Linking modifier syntax in #[link] attributes and on the command line, as well as the whole-archive modifier specifically, are now supported The char type is now described as UTF-32 in debuginfo The #[target_feature] attribute can now be used with aarch64 features X86 #[target_feature = \u0026quot;adx\u0026quot;] is now stable Libraries # ManuallyDrop\u0026lt;T\u0026gt; is now documented to have the same layout as T #[ignore = \u0026quot;…\u0026quot;] messages are printed when running tests Consistently show absent stdio handles on Windows as NULL handles Make std::io::stdio::lock() return 'static handles. Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing let out = std::io::stdout().lock(); because out would outlive the return value of stdout(). Such code now works, eliminating a common pitfall that affected many Rust users. Vec::from_raw_parts is now less restrictive about its inputs std::thread::available_parallelism now takes cgroup quotas into account. Since available_parallelism is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, available_parallelism will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, available_parallelism will return 4. Stabilized APIs # Pin::static_mut Pin::static_ref Vec::retain_mut VecDeque::retain_mut Write for Cursor\u0026lt;[u8; N]\u0026gt; std::os::unix::net::SocketAddr::from_pathname std::process::ExitCode and std::process::Termination. The stabilization of these two APIs now makes it possible for programs to return errors from main with custom exit codes. std::thread::JoinHandle::is_finished These APIs are now usable in const contexts:\n\u0026lt;*const T\u0026gt;::offset and \u0026lt;*mut T\u0026gt;::offset \u0026lt;*const T\u0026gt;::wrapping_offset and \u0026lt;*mut T\u0026gt;::wrapping_offset \u0026lt;*const T\u0026gt;::add and \u0026lt;*mut T\u0026gt;::add \u0026lt;*const T\u0026gt;::sub and \u0026lt;*mut T\u0026gt;::sub \u0026lt;*const T\u0026gt;::wrapping_add and \u0026lt;*mut T\u0026gt;::wrapping_add \u0026lt;*const T\u0026gt;::wrapping_sub and \u0026lt;*mut T\u0026gt;::wrapping_sub \u0026lt;[T]\u0026gt;::as_mut_ptr \u0026lt;[T]\u0026gt;::as_ptr_range \u0026lt;[T]\u0026gt;::as_mut_ptr_range Cargo # No feature changes, but see compatibility notes.\nCompatibility Notes # Previously native static libraries were linked as whole-archive in some cases, but now rustc tries not to use whole-archive unless explicitly requested. This change may result in linking errors in some cases. To fix such errors, native libraries linked from the command line, build scripts, or #[link] attributes need to (more common) either be reordered to respect dependencies between them (if a depends on b then a should go first and b second) (less common) or be updated to use the +whole-archive modifier. Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort Proc macros no longer see ident matchers wrapped in groups The number of # in r# raw string literals is now required to be less than 256 When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced cargo vendor now only accepts one value for each --sync flag cfg predicates in all() and any() are always evaluated to detect errors, instead of short-circuiting. The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of all to write something like cfg(all(feature = \u0026quot;nightly\u0026quot;, syntax-requiring-nightly)), which will now fail to compile. Instead, use either cfg_attr(feature = \u0026quot;nightly\u0026quot;, ...) or nested uses of cfg. bootstrap: static-libstdcpp is now enabled by default, and can now be disabled when llvm-tools is enabled Internal Changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\ndebuginfo: Refactor debuginfo generation for types Remove the everybody loops pass "},{"id":21,"href":"/docs/1.60.0/","title":"1.60.0","section":"Docs","content":" 1.60.0 # Released on: 7 April, 2022 Branched from master on: 18 February, 2022 Language # Stabilize #[cfg(panic = \u0026quot;...\u0026quot;)] for either \u0026quot;unwind\u0026quot; or \u0026quot;abort\u0026quot;. Stabilize #[cfg(target_has_atomic = \u0026quot;...\u0026quot;)] for each integer size and \u0026quot;ptr\u0026quot;. Compiler # Enable combining +crt-static and relocation-model=pic on x86_64-unknown-linux-gnu Fixes wrong unreachable_pub lints on nested and glob public reexport Stabilize -Z instrument-coverage as -C instrument-coverage Stabilize -Z print-link-args as --print link-args Add new Tier 3 target mips64-openwrt-linux-musl* Add new Tier 3 target armv7-unknown-linux-uclibceabi (softfloat)* Fix invalid removal of newlines from doc comments Add kernel target for RustyHermit Deny mixing bin crate type with lib crate types Make rustc use RUST_BACKTRACE=full by default Upgrade to LLVM 14 * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Guarantee call order for sort_by_cached_key Improve Duration::try_from_secs_f32/f64 accuracy by directly processing exponent and mantissa Make Instant::{duration_since, elapsed, sub} saturating Remove non-monotonic clocks workarounds in Instant::now Make BuildHasherDefault, iter::Empty and future::Pending covariant Stabilized APIs # Arc::new_cyclic Rc::new_cyclic slice::EscapeAscii \u0026lt;[u8]\u0026gt;::escape_ascii u8::escape_ascii Vec::spare_capacity_mut MaybeUninit::assume_init_drop MaybeUninit::assume_init_read i8::abs_diff i16::abs_diff i32::abs_diff i64::abs_diff i128::abs_diff isize::abs_diff u8::abs_diff u16::abs_diff u32::abs_diff u64::abs_diff u128::abs_diff usize::abs_diff Display for io::ErrorKind From\u0026lt;u8\u0026gt; for ExitCode Not for ! (the \u0026ldquo;never\u0026rdquo; type) OpAssign\u0026lt;$t\u0026gt; for Wrapping\u0026lt;$t\u0026gt; arch::is_aarch64_feature_detected! Cargo # Port cargo from toml-rs to toml_edit Stabilize -Ztimings as --timings Stabilize namespaced and weak dependency features. Accept more cargo:rustc-link-arg-* types from build script output. cargo-new should not add ignore rule on Cargo.lock inside subdirs Misc # Ship docs on Tier 2 platforms by reusing the closest Tier 1 platform docs Drop rustc-docs from complete profile bootstrap: tidy up flag handling for llvm build Compatibility Notes # Remove compiler-rt linking hack on Android Mitigations for platforms with non-monotonic clocks have been removed from Instant::now. On platforms that don\u0026rsquo;t provide monotonic clocks, an instant is not guaranteed to be greater than an earlier instant anymore. Instant::{duration_since, elapsed, sub} do not panic anymore on underflow, saturating to 0 instead. In the real world the panic happened mostly on platforms with buggy monotonic clock implementations rather than catching programming errors like reversing the start and end times. Such programming errors will now results in 0 rather than a panic. In a future release we\u0026rsquo;re planning to increase the baseline requirements for the Linux kernel to version 3.2, and for glibc to version 2.17. We\u0026rsquo;d love your feedback in PR #95026. Internal Changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nSwitch all libraries to the 2021 edition "},{"id":22,"href":"/docs/1.59.0/","title":"1.59.0","section":"Docs","content":" 1.59.0 # Released on: 24 February, 2022 Branched from master on: 7 January, 2022 Language # Stabilize default arguments for const parameters and remove the ordering restriction for type and const parameters Stabilize destructuring assignment Relax private in public lint on generic bounds and where clauses of trait impls Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V Compiler # Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0) Emit LLVM optimization remarks when enabled with -Cremark Fix sparc64 ABI for aggregates with floating point members Warn when a #[test]-like built-in attribute macro is present multiple times. Add support for riscv64gc-unknown-freebsd Stabilize -Z emit-future-incompat as --json future-incompat Soft disable incremental compilation This release disables incremental compilation, unless the user has explicitly opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable. This is due to a known and relatively frequently occurring bug in incremental compilation, which causes builds to issue internal compiler errors. This particular bug is already fixed on nightly, but that fix has not yet rolled out to stable and is deemed too risky for a direct stable backport.\nAs always, we encourage users to test with nightly and report bugs so that we can track failures and fix issues earlier.\nSee 94124 for more details.\nLibraries # Remove unnecessary bounds for some Hash{Map,Set} methods Stabilized APIs # std::thread::available_parallelism Result::copied Result::cloned arch::asm! arch::global_asm! ops::ControlFlow::is_break ops::ControlFlow::is_continue TryFrom\u0026lt;char\u0026gt; for u8 char::TryFromCharError implementing Clone, Debug, Display, PartialEq, Copy, Eq, Error iter::zip NonZeroU8::is_power_of_two NonZeroU16::is_power_of_two NonZeroU32::is_power_of_two NonZeroU64::is_power_of_two NonZeroU128::is_power_of_two NonZeroUsize::is_power_of_two DoubleEndedIterator for ToLowercase DoubleEndedIterator for ToUppercase TryFrom\u0026lt;\u0026amp;mut [T]\u0026gt; for [T; N] UnwindSafe for Once RefUnwindSafe for Once armv8 neon intrinsics for aarch64 Const-stable:\nmem::MaybeUninit::as_ptr mem::MaybeUninit::assume_init mem::MaybeUninit::assume_init_ref ffi::CStr::from_bytes_with_nul_unchecked Cargo # Stabilize the strip profile option Stabilize future-incompat-report Support abbreviating --release as -r Support term.quiet configuration Remove --host from cargo {publish,search,login} Compatibility Notes # Refactor weak symbols in std::sys::unix This may add new, versioned, symbols when building with a newer glibc, as the standard library uses weak linkage rather than dynamically attempting to load certain symbols at runtime. Deprecate crate_type and crate_name nested inside #![cfg_attr] This adds a future compatibility lint to supporting the use of cfg_attr wrapping either crate_type or crate_name specification within Rust files; it is recommended that users migrate to setting the equivalent command line flags. Remove effect of #[no_link] attribute on name resolution This may expose new names, leading to conflicts with preexisting names in a given namespace and a compilation failure. Cargo will document libraries before binaries. Respect doc=false in dependencies, not just the root crate Weaken guarantee around advancing underlying iterators in zip Make split_inclusive() on an empty slice yield an empty output Update std::env::temp_dir to use GetTempPath2 on Windows when available. unreachable! was updated to match other formatting macro behavior on Rust 2021 Internal Changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nFix many cases of normalization-related ICEs\nReplace dominators algorithm with simple Lengauer-Tarjan\nStore liveness in interval sets for region inference\nRemove in_band_lifetimes from the compiler and standard library, in preparation for removing this unstable feature.\n"},{"id":23,"href":"/docs/1.58.1/","title":"1.58.1","section":"Docs","content":" 1.58.1 # Released on: 20 January, 2022 This is a patch release Fix race condition in std::fs::remove_dir_all (CVE-2022-21658) Handle captured arguments in the useless_format Clippy lint Move non_send_fields_in_send_ty Clippy lint to nursery Fix wrong error message displayed when some imports are missing Fix rustfmt not formatting generated files from stdin "},{"id":24,"href":"/docs/1.58.0/","title":"1.58.0","section":"Docs","content":" 1.58.0 # Released on: 13 January, 2022 Branched from master on: 26 November, 2021 Language # Format strings can now capture arguments simply by writing {ident} in the string. This works in all macros accepting format strings. Support for this in panic! (panic!(\u0026quot;{ident}\u0026quot;)) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect. *const T pointers can now be dereferenced in const contexts. The rules for when a generic struct implements Unsize have been relaxed. Compiler # Add LLVM CFI support to the Rust compiler Stabilize -Z strip as -C strip. Note that while release builds already don\u0026rsquo;t add debug symbols for the code you compile, the compiled standard library that ships with Rust includes debug symbols, so you may want to use the strip option to remove these symbols to produce smaller release binaries. Note that this release only includes support in rustc, not directly in cargo. Add support for LLVM coverage mapping format versions 5 and 6 Emit LLVM optimization remarks when enabled with -Cremark Update the minimum external LLVM to 12 Add x86_64-unknown-none at Tier 3* Build musl dist artifacts with debuginfo enabled. When building release binaries using musl, you may want to use the newly stabilized strip option to remove these debug symbols, reducing the size of your binaries. Don\u0026rsquo;t abort compilation after giving a lint error Error messages point at the source of trait bound obligations in more places * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # [All remaining functions in the standard library have #[must_use] annotations where appropriate][89692], producing a warning when ignoring their return value. This helps catch mistakes such as expecting a function to mutate a value in place rather than return a new value. Paths are automatically canonicalized on Windows for operations that support it Re-enable debug checks for copy and copy_nonoverlapping Implement RefUnwindSafe for Rc\u0026lt;T\u0026gt; Make RSplit\u0026lt;T, P\u0026gt;: Clone not require T: Clone Implement Termination for Result\u0026lt;Infallible, E\u0026gt;. This allows writing fn main() -\u0026gt; Result\u0026lt;Infallible, ErrorType\u0026gt;, for a program whose successful exits never involve returning from main (for instance, a program that calls exit, or that uses exec to run another program). Stabilized APIs # Metadata::is_symlink Path::is_symlink {integer}::saturating_div Option::unwrap_unchecked Result::unwrap_unchecked Result::unwrap_err_unchecked File::options These APIs are now usable in const contexts:\nDuration::new [Duration::checked_add] [Duration::saturating_add] [Duration::checked_sub] [Duration::saturating_sub] [Duration::checked_mul] [Duration::saturating_mul] [Duration::checked_div] Cargo # Add \u0026ndash;message-format for install command Warn when alias shadows external subcommand Rustdoc # Show all Deref implementations recursively in rustdoc Use computed visibility in rustdoc Compatibility Notes # Try all stable method candidates first before trying unstable ones. This change ensures that adding new nightly-only methods to the Rust standard library will not break code invoking methods of the same name from traits outside the standard library. Windows: std::process::Command will no longer search the current directory for executables. All proc-macro backward-compatibility lints are now deny-by-default. proc_macro: Append .0 to unsuffixed float if it would otherwise become int token Refactor weak symbols in std::sys::unix. This optimizes accesses to glibc functions, by avoiding the use of dlopen. This does not increase the minimum expected version of glibc. However, software distributions that use symbol versions to detect library dependencies, and which take weak symbols into account in that analysis, may detect rust binaries as requiring newer versions of glibc. rustdoc now rejects some unexpected semicolons in doctests Internal Changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nImplement coherence checks for negative trait impls Add rustc lint, warning when iterating over hashmaps Optimize live point computation Enable verification for 1/32nd of queries loaded from disk Implement version of normalize_erasing_regions that allows for normalization failure "},{"id":25,"href":"/docs/1.57.0/","title":"1.57.0","section":"Docs","content":" 1.57.0 # Released on: 2 December, 2021 Branched from master on: 15 October, 2021 Language # Macro attributes may follow #[derive] and will see the original (pre-cfg) input. Accept curly-brace macros in expressions, like m!{ .. }.method() and m!{ .. }?. Allow panicking in constant evaluation. Ignore derived Clone and Debug implementations during dead code analysis. Compiler # Create more accurate debuginfo for vtables. Add armv6k-nintendo-3ds at Tier 3*. Add armv7-unknown-linux-uclibceabihf at Tier 3*. Add m68k-unknown-linux-gnu at Tier 3*. Add SOLID targets at Tier 3*: aarch64-kmc-solid_asp3, armv7a-kmc-solid_asp3-eabi, armv7a-kmc-solid_asp3-eabihf * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Avoid allocations and copying in Vec::leak Add #[repr(i8)] to Ordering Optimize File::read_to_end and read_to_string Update to Unicode 14.0 Many more functions are marked #[must_use], producing a warning when ignoring their return value. This helps catch mistakes such as expecting a function to mutate a value in place rather than return a new value. Stabilised APIs # [T; N]::as_mut_slice [T; N]::as_slice collections::TryReserveError HashMap::try_reserve HashSet::try_reserve String::try_reserve String::try_reserve_exact Vec::try_reserve Vec::try_reserve_exact VecDeque::try_reserve VecDeque::try_reserve_exact Iterator::map_while iter::MapWhile proc_macro::is_available Command::get_program Command::get_args Command::get_envs Command::get_current_dir CommandArgs CommandEnvs These APIs are now usable in const contexts:\n[hint::unreachable_unchecked] Cargo # Stabilize custom profiles Compatibility notes # Ignore derived Clone and Debug implementations during dead code analysis. This will break some builds that set #![deny(dead_code)]. Internal changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nAdded an experimental backend for codegen with libgccjit. "},{"id":26,"href":"/docs/1.56.1/","title":"1.56.1","section":"Docs","content":" 1.56.1 # Released on: 1 November, 2021 This is a patch release Changes # New lints to detect the presence of bidirectional-override Unicode codepoints in the compiled source code (CVE-2021-42574) "},{"id":27,"href":"/docs/1.56.0/","title":"1.56.0","section":"Docs","content":" 1.56.0 # Released on: 21 October, 2021 Branched from master on: 3 September, 2021 Language # The 2021 Edition is now stable. See the edition guide for more details. The pattern in binding @ pattern can now also introduce new bindings. Union field access is permitted in const fn. Compiler # Upgrade to LLVM 13. Support memory, address, and thread sanitizers on aarch64-unknown-freebsd. Allow specifying a deployment target version for all iOS targets Warnings can be forced on with --force-warn. This feature is primarily intended for usage by cargo fix, rather than end users. Promote aarch64-apple-ios-sim to Tier 2*. Add powerpc-unknown-freebsd at Tier 3*. Add riscv32imc-esp-espidf at Tier 3*. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Allow writing of incomplete UTF-8 sequences via stdout/stderr on Windows. The Windows console still requires valid Unicode, but this change allows splitting a UTF-8 character across multiple write calls. This allows, for instance, programs that just read and write data buffers (e.g. copying a file to stdout) without regard for Unicode or character boundaries. Prefer AtomicU{64,128} over Mutex for Instant backsliding protection. For this use case, atomics scale much better under contention. Implement Extend\u0026lt;(A, B)\u0026gt; for (Extend\u0026lt;A\u0026gt;, Extend\u0026lt;B\u0026gt;) impl Default, Copy, Clone for std::io::Sink and std::io::Empty impl From\u0026lt;[(K, V); N]\u0026gt; for all collections. Remove P: Unpin bound on impl Future for Pin. Treat invalid environment variable names as nonexistent. Previously, the environment functions would panic if given a variable name with an internal null character or equal sign (=). Now, these functions will just treat such names as nonexistent variables, since the OS cannot represent the existence of a variable with such a name. Stabilised APIs # std::os::unix::fs::chroot UnsafeCell::raw_get BufWriter::into_parts core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe} These APIs were previously stable in std, but are now also available in core. Vec::shrink_to String::shrink_to OsString::shrink_to PathBuf::shrink_to BinaryHeap::shrink_to VecDeque::shrink_to HashMap::shrink_to HashSet::shrink_to These APIs are now usable in const contexts:\nstd::mem::transmute [T]::first [T]::split_first [T]::last [T]::split_last Cargo # Cargo supports specifying a minimum supported Rust version in Cargo.toml. This has no effect at present on dependency version selection. We encourage crates to specify their minimum supported Rust version, and we encourage CI systems that support Rust code to include a crate\u0026rsquo;s specified minimum version in the test matrix for that crate by default. Compatibility notes # Update to new argument parsing rules on Windows. This adjusts Rust\u0026rsquo;s standard library to match the behavior of the standard libraries for C/C++. The rules have changed slightly over time, and this PR brings us to the latest set of rules (changed in 2008). Disallow the aapcs calling convention on aarch64 This was already not supported by LLVM; this change surfaces this lack of support with a better error message. Make SEMICOLON_IN_EXPRESSIONS_FROM_MACROS warn by default Warn when an escaped newline skips multiple lines. Calls to libc::getpid / std::process::id from Command::pre_exec may return different values on glibc \u0026lt;= 2.24. Rust now invokes the clone3 system call directly, when available, to use new functionality available via that system call. Older versions of glibc cache the result of getpid, and only update that cache when calling glibc\u0026rsquo;s clone/fork functions, so a direct system call bypasses that cache update. glibc 2.25 and newer no longer cache getpid for exactly this reason. Internal changes # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nLLVM is compiled with PGO in published x86_64-unknown-linux-gnu artifacts. This improves the performance of most Rust builds. Unify representation of macros in internal data structures. This change fixes a host of bugs with the handling of macros by the compiler, as well as rustdoc. "},{"id":28,"href":"/docs/1.55.0/","title":"1.55.0","section":"Docs","content":" 1.55.0 # Released on: 9 September, 2021 Branched from master on: 23 July, 2021 Language # You can now write open \u0026ldquo;from\u0026rdquo; range patterns (X..), which will start at X and will end at the maximum value of the integer. You can now explicitly import the prelude of different editions through std::prelude (e.g. use std::prelude::rust_2021::*;). Compiler # Added tier 3* support for powerpc64le-unknown-freebsd. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Updated std\u0026rsquo;s float parsing to use the Eisel-Lemire algorithm. These improvements should in general provide faster string parsing of floats, no longer reject certain valid floating point values, and reduce the produced code size for non-stripped artifacts. string::Drain now implements AsRef\u0026lt;str\u0026gt; and AsRef\u0026lt;[u8]\u0026gt;. Stabilised APIs # Bound::cloned Drain::as_str IntoInnerError::into_error IntoInnerError::into_parts MaybeUninit::assume_init_mut MaybeUninit::assume_init_ref MaybeUninit::write array::map ops::ControlFlow x86::_bittest x86::_bittestandcomplement x86::_bittestandreset x86::_bittestandset x86_64::_bittest64 x86_64::_bittestandcomplement64 x86_64::_bittestandreset64 x86_64::_bittestandset64 The following previously stable functions are now const.\nstr::from_utf8_unchecked Cargo # Cargo will now deduplicate compiler diagnostics to the terminal when invoking rustc in parallel such as when using cargo test. The package definition in cargo metadata now includes the \u0026quot;default_run\u0026quot; field from the manifest. Added cargo d as an alias for cargo doc. Added {lib} as formatting option for cargo tree to print the \u0026quot;lib_name\u0026quot; of packages. Rustdoc # Added \u0026ldquo;Go to item on exact match\u0026rdquo; search option. The \u0026ldquo;Implementors\u0026rdquo; section on traits no longer shows redundant method definitions. Trait implementations are toggled open by default. This should make the implementations more searchable by tools like CTRL+F in your browser. Intra-doc links should now correctly resolve associated items (e.g. methods) through type aliases. Traits which are marked with #[doc(hidden)] will no longer appear in the \u0026ldquo;Trait Implementations\u0026rdquo; section. Compatibility Notes # std functions that return an io::Error will no longer use the ErrorKind::Other variant. This is to better reflect that these kinds of errors could be categorised into newer more specific ErrorKind variants, and that they do not represent a user error. Using environment variable names with process::Command on Windows now behaves as expected. Previously using environment variables with Command would cause them to be ASCII-uppercased. Rustdoc will now warn on using rustdoc lints that aren\u0026rsquo;t prefixed with rustdoc:: RUSTFLAGS is no longer set for build scripts. Build scripts should use CARGO_ENCODED_RUSTFLAGS instead. See the documentation for more details. "},{"id":29,"href":"/docs/1.54.0/","title":"1.54.0","section":"Docs","content":" 1.54.0 # Released on: 29 July, 2021 Branched from master on: 11 June, 2021 Language # You can now use macros for values in some built-in attributes. This primarily allows you to call macros within the #[doc] attribute. For example, to include external documentation in your crate, you can now write the following:\n#![doc = include_str!(\u0026#34;README.md\u0026#34;)] You can now cast between unsized slice types (and types which contain unsized slices) in const fn.\nYou can now use multiple generic lifetimes with impl Trait where the lifetimes don\u0026rsquo;t explicitly outlive another. In code this means that you can now have impl Trait\u0026lt;'a, 'b\u0026gt; where as before you could only have impl Trait\u0026lt;'a, 'b\u0026gt; where 'b: 'a.\nCompiler # Rustc will now search for custom JSON targets in /lib/rustlib/\u0026lt;target-triple\u0026gt;/target.json where / is the \u0026ldquo;sysroot\u0026rdquo; directory. You can find your sysroot directory by running rustc --print sysroot. Added wasm as a target_family for WebAssembly platforms. You can now use #[target_feature] on safe functions when targeting WebAssembly platforms. Improved debugger output for enums on Windows MSVC platforms. Added tier 3* support for bpfel-unknown-none and bpfeb-unknown-none. -Zmutable-noalias=yes is enabled by default when using LLVM 12 or above. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # panic::panic_any will now #[track_caller]. Added OutOfMemory as a variant of io::ErrorKind. proc_macro::Literal now implements FromStr. The implementations of vendor intrinsics in core::arch have been significantly refactored. The main user-visible changes are a 50% reduction in the size of libcore.rlib and stricter validation of constant operands passed to intrinsics. The latter is technically a breaking change, but allows Rust to more closely match the C vendor intrinsics API. Stabilized APIs # BTreeMap::into_keys BTreeMap::into_values HashMap::into_keys HashMap::into_values arch::wasm32 VecDeque::binary_search VecDeque::binary_search_by VecDeque::binary_search_by_key VecDeque::partition_point Cargo # Added the --prune \u0026lt;spec\u0026gt; option to cargo-tree to remove a package from the dependency graph. Added the --depth option to cargo-tree to print only to a certain depth in the tree Added the no-proc-macro value to cargo-tree --edges to hide procedural macro dependencies. A new environment variable named CARGO_TARGET_TMPDIR is available. This variable points to a directory that integration tests and benches can use as a \u0026ldquo;scratchpad\u0026rdquo; for testing filesystem operations. Compatibility Notes # Mixing Option and Result via ? is no longer permitted in closures for inferred types. Previously unsound code is no longer permitted where different constructors in branches could require different lifetimes. As previously mentioned the std::arch intrinsics now uses stricter const checking than before and may reject some previously accepted code. i128 multiplication on Cortex M0+ platforms currently unconditionally causes overflow when compiled with codegen-units = 1. "},{"id":30,"href":"/docs/1.53.0/","title":"1.53.0","section":"Docs","content":" 1.53.0 # Released on: 17 June, 2021 Branched from master on: 30 April, 2021 Language # You can now use unicode for identifiers. This allows multilingual identifiers but still doesn\u0026rsquo;t allow glyphs that are not considered characters such as ◆ or 🦀. More specifically you can now use any identifier that matches the UAX #31 \u0026ldquo;Unicode Identifier and Pattern Syntax\u0026rdquo; standard. This is the same standard as languages like Python, however Rust uses NFC normalization which may be different from other languages. You can now specify \u0026ldquo;or patterns\u0026rdquo; inside pattern matches. Previously you could only use | (OR) on complete patterns. E.g. let x = Some(2u8); // Before matches!(x, Some(1) | Some(2)); // Now matches!(x, Some(1 | 2)); Added the :pat_param macro_rules! matcher. This matcher has the same semantics as the :pat matcher. This is to allow :pat to change semantics to being a pattern fragment in a future edition. Compiler # Updated the minimum external LLVM version to LLVM 10. Added Tier 3* support for the wasm64-unknown-unknown target. Improved debuginfo for closures and async functions on Windows MSVC. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Abort messages will now forward to android_set_abort_message on Android platforms when available. slice::IterMut\u0026lt;'_, T\u0026gt; now implements AsRef\u0026lt;[T]\u0026gt; Arrays of any length now implement IntoIterator. Currently calling .into_iter() as a method on an array will return impl Iterator\u0026lt;Item=\u0026amp;T\u0026gt;, but this may change in a future edition to change Item to T. Calling IntoIterator::into_iter directly on arrays will provide impl Iterator\u0026lt;Item=T\u0026gt; as expected. leading_zeros, and trailing_zeros are now available on all NonZero integer types. {f32, f64}::from_str now parse and print special values (NaN, -0) according to IEEE 754. You can now index into slices using (Bound\u0026lt;usize\u0026gt;, Bound\u0026lt;usize\u0026gt;). Add the BITS associated constant to all numeric types. Stabilised APIs # AtomicBool::fetch_update AtomicPtr::fetch_update BTreeMap::retain BTreeSet::retain BufReader::seek_relative DebugStruct::non_exhaustive Duration::MAX Duration::ZERO Duration::is_zero Duration::saturating_add Duration::saturating_mul Duration::saturating_sub ErrorKind::Unsupported Option::insert Ordering::is_eq Ordering::is_ge Ordering::is_gt Ordering::is_le Ordering::is_lt Ordering::is_ne OsStr::is_ascii OsStr::make_ascii_lowercase OsStr::make_ascii_uppercase OsStr::to_ascii_lowercase OsStr::to_ascii_uppercase Peekable::peek_mut Rc::decrement_strong_count Rc::increment_strong_count Vec::extend_from_within array::from_mut array::from_ref cmp::max_by_key cmp::max_by cmp::min_by_key cmp::min_by f32::is_subnormal f64::is_subnormal Cargo # Cargo now supports git repositories where the default HEAD branch is not \u0026ldquo;master\u0026rdquo;. This also includes a switch to the version 3 Cargo.lock format which can handle default branches correctly. macOS targets now default to unpacked split-debuginfo. The authors field is no longer included in Cargo.toml for new projects. Rustdoc # Added the rustdoc::bare_urls lint that warns when you have URLs without hyperlinks. Compatibility Notes # Implement token-based handling of attributes during expansion Ipv4::from_str will now reject octal format IP addresses in addition to rejecting hexadecimal IP addresses. The octal format can lead to confusion and potential security vulnerabilities and is no longer recommended. The added BITS constant may conflict with external definitions. In particular, this was known to be a problem in the lexical-core crate, but they have published fixes for semantic versions 0.4 through 0.7. To update this dependency alone, use cargo update -p lexical-core. Incremental compilation remains off by default, unless one uses the RUSTC_FORCE_INCREMENTAL=1 environment variable added in 1.52.1. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nRework the std::sys::windows::alloc implementation. rustdoc: Don\u0026rsquo;t enter an infer_ctxt in get_blanket_impls for impls that aren\u0026rsquo;t blanket impls. rustdoc: Only look at blanket impls in get_blanket_impls Rework rustdoc const type "},{"id":31,"href":"/docs/1.52.1/","title":"1.52.1","section":"Docs","content":" 1.52.1 # Released on: 10 May, 2021 This is a patch release This release disables incremental compilation, unless the user has explicitly opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.\nThis is due to the widespread, and frequently occurring, breakage encountered by Rust users due to newly enabled incremental verification in 1.52.0. Notably, Rust users should upgrade to 1.52.0 or 1.52.1: the bugs that are detected by newly added incremental verification are still present in past stable versions, and are not yet fixed on any channel. These bugs can lead to miscompilation of Rust binaries.\nThese problems only affect incremental builds, so release builds with Cargo should not be affected unless the user has explicitly opted into incremental. Debug and check builds are affected.\nSee 84970 for more details.\n"},{"id":32,"href":"/docs/1.52.0/","title":"1.52.0","section":"Docs","content":" 1.52.0 # Released on: 6 May, 2021 Branched from master on: 19 March, 2021 Language # Added the unsafe_op_in_unsafe_fn lint, which checks whether the unsafe code in an unsafe fn is wrapped in a unsafe block. This lint is allowed by default, and may become a warning or hard error in a future edition. You can now cast mutable references to arrays to a pointer of the same type as the element. Compiler # Upgraded the default LLVM to LLVM 12. Added tier 3* support for the following targets.\ns390x-unknown-linux-musl riscv32gc-unknown-linux-musl \u0026amp; riscv64gc-unknown-linux-musl powerpc-unknown-openbsd * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # OsString now implements Extend and FromIterator. cmp::Reverse now has #[repr(transparent)] representation. Arc\u0026lt;impl Error\u0026gt; now implements error::Error. All integer division and remainder operations are now const. Stabilised APIs # Arguments::as_str char::MAX char::REPLACEMENT_CHARACTER char::UNICODE_VERSION char::decode_utf16 char::from_digit char::from_u32_unchecked char::from_u32 slice::partition_point str::rsplit_once str::split_once The following previously stable APIs are now const.\nchar::len_utf8 char::len_utf16 char::to_ascii_uppercase char::to_ascii_lowercase char::eq_ignore_ascii_case u8::to_ascii_uppercase u8::to_ascii_lowercase u8::eq_ignore_ascii_case Rustdoc # Rustdoc lints are now treated as a tool lint, meaning that lints are now prefixed with rustdoc:: (e.g. #[warn(rustdoc::broken_intra_doc_links)]). Using the old style is still allowed, and will become a warning in a future release. Rustdoc now supports argument files. Rustdoc now generates smart punctuation for documentation. You can now use \u0026ldquo;task lists\u0026rdquo; in Rustdoc Markdown. E.g. - [x] Complete - [ ] Todo Misc # You can now pass multiple filters to tests. E.g. cargo test -- foo bar will run all tests that match foo and bar. Rustup now distributes PDB symbols for the std library on Windows, allowing you to see std symbols when debugging. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nCheck the result cache before the DepGraph when ensuring queries Try fast_reject::simplify_type in coherence before doing full check Only store a LocalDefId in some HIR nodes Store HIR attributes in a side table Compatibility Notes # Cargo build scripts are now forbidden from setting RUSTC_BOOTSTRAP. Removed support for the x86_64-rumprun-netbsd target. Deprecated the x86_64-sun-solaris target in favor of x86_64-pc-solaris. Rustdoc now only accepts ,, , and \\t as delimiters for specifying languages in code blocks. Rustc now catches more cases of pub_use_of_private_extern_crate Changes in how proc macros handle whitespace may lead to panics when used with older proc-macro-hack versions. A cargo update should be sufficient to fix this in all cases. Turn #[derive] into a regular macro attribute "},{"id":33,"href":"/docs/1.51.0/","title":"1.51.0","section":"Docs","content":" 1.51.0 # Released on: 25 March, 2021 Branched from master on: 5 February, 2021 Language # You can now parameterize items such as functions, traits, and structs by constant values in addition to by types and lifetimes. Also known as \u0026ldquo;const generics\u0026rdquo; E.g. you can now write the following. Note: Only values of primitive integers, bool, or char types are currently permitted. struct GenericArray\u0026lt;T, const LENGTH: usize\u0026gt; { inner: [T; LENGTH] } impl\u0026lt;T, const LENGTH: usize\u0026gt; GenericArray\u0026lt;T, LENGTH\u0026gt; { const fn last(\u0026amp;self) -\u0026gt; Option\u0026lt;\u0026amp;T\u0026gt; { if LENGTH == 0 { None } else { Some(\u0026amp;self.inner[LENGTH - 1]) } } } Compiler # Added the -Csplit-debuginfo codegen option for macOS platforms. This option controls whether debug information is split across multiple files or packed into a single file. Note This option is unstable on other platforms. Added tier 3* support for aarch64_be-unknown-linux-gnu, aarch64-unknown-linux-gnu_ilp32, and aarch64_be-unknown-linux-gnu_ilp32 targets. Added tier 3 support for i386-unknown-linux-gnu and i486-unknown-linux-gnu targets. The target-cpu=native option will now detect individual features of CPUs. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Box::downcast is now also implemented for any dyn Any + Send + Sync object. str now implements AsMut\u0026lt;str\u0026gt;. u64 and u128 now implement From\u0026lt;char\u0026gt;. Error is now implemented for \u0026amp;T where T implements Error. Poll::{map_ok, map_err} are now implemented for Poll\u0026lt;Option\u0026lt;Result\u0026lt;T, E\u0026gt;\u0026gt;\u0026gt;. unsigned_abs is now implemented for all signed integer types. io::Empty now implements io::Seek. rc::Weak\u0026lt;T\u0026gt; and sync::Weak\u0026lt;T\u0026gt;\u0026rsquo;s methods such as as_ptr are now implemented for T: ?Sized types. Div and Rem by their NonZero variant is now implemented for all unsigned integers. Stabilized APIs # Arc::decrement_strong_count Arc::increment_strong_count Once::call_once_force Peekable::next_if_eq Peekable::next_if Seek::stream_position array::IntoIter panic::panic_any ptr::addr_of! ptr::addr_of_mut! slice::fill_with slice::split_inclusive_mut slice::split_inclusive slice::strip_prefix slice::strip_suffix str::split_inclusive sync::OnceState task::Wake VecDeque::range VecDeque::range_mut Cargo # Added the split-debuginfo profile option to control the -Csplit-debuginfo codegen option. Added the resolver field to Cargo.toml to enable the new feature resolver and CLI option behavior. Version 2 of the feature resolver will try to avoid unifying features of dependencies where that unification could be unwanted. Such as using the same dependency with a std feature in a build scripts and proc-macros, while using the no-std feature in the final binary. See the Cargo book documentation for more information on the feature. Rustdoc # Rustdoc will now include documentation for methods available from nested Deref traits. You can now provide a --default-theme flag which sets the default theme to use for documentation. Various improvements to intra-doc links:\nYou can link to non-path primitives such as slice. You can link to associated items. You can now include generic parameters when linking to items, like Vec\u0026lt;T\u0026gt;. Misc # You can now pass --include-ignored to tests (e.g. with cargo test -- --include-ignored) to include testing tests marked #[ignore]. Compatibility Notes # WASI platforms no longer use the wasm-bindgen ABI, and instead use the wasm32 ABI. rustc no longer promotes division, modulo and indexing operations to const that could fail. The minimum version of glibc for the following platforms has been bumped to version 2.31 for the distributed artifacts. armv5te-unknown-linux-gnueabi sparc64-unknown-linux-gnu thumbv7neon-unknown-linux-gnueabihf armv7-unknown-linux-gnueabi x86_64-unknown-linux-gnux32 atomic::spin_loop_hint has been deprecated. It\u0026rsquo;s recommended to use hint::spin_loop instead. Internal Only # Consistently avoid constructing optimized MIR when not doing codegen "},{"id":34,"href":"/docs/1.50.0/","title":"1.50.0","section":"Docs","content":" 1.50.0 # Released on: 11 February, 2021 Branched from master on: 25 December, 2020 Language # You can now use const values for x in [x; N] array expressions. This has been technically possible since 1.38.0, as it was unintentionally stabilized. Assignments to ManuallyDrop\u0026lt;T\u0026gt; union fields are now considered safe. Compiler # Added tier 3* support for the armv5te-unknown-linux-uclibceabi target. Added tier 3 support for the aarch64-apple-ios-macabi target. The x86_64-unknown-freebsd is now built with the full toolset. Dropped support for all cloudabi targets. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # proc_macro::Punct now implements PartialEq\u0026lt;char\u0026gt;. ops::{Index, IndexMut} are now implemented for fixed sized arrays of any length. On Unix platforms, the std::fs::File type now has a \u0026ldquo;niche\u0026rdquo; of -1. This value cannot be a valid file descriptor, and now means Option\u0026lt;File\u0026gt; takes up the same amount of space as File. Stabilized APIs # bool::then btree_map::Entry::or_insert_with_key f32::clamp f64::clamp hash_map::Entry::or_insert_with_key Ord::clamp RefCell::take slice::fill UnsafeCell::get_mut The following previously stable methods are now const.\nIpAddr::is_ipv4 IpAddr::is_ipv6 IpAddr::is_unspecified IpAddr::is_loopback IpAddr::is_multicast Ipv4Addr::octets Ipv4Addr::is_loopback Ipv4Addr::is_private Ipv4Addr::is_link_local Ipv4Addr::is_multicast Ipv4Addr::is_broadcast Ipv4Addr::is_documentation Ipv4Addr::to_ipv6_compatible Ipv4Addr::to_ipv6_mapped Ipv6Addr::segments Ipv6Addr::is_unspecified Ipv6Addr::is_loopback Ipv6Addr::is_multicast Ipv6Addr::to_ipv4 Layout::size Layout::align Layout::from_size_align pow for all integer types. checked_pow for all integer types. saturating_pow for all integer types. wrapping_pow for all integer types. next_power_of_two for all unsigned integer types. checked_next_power_of_two for all unsigned integer types. Cargo # Added the [build.rustc-workspace-wrapper] option. This option sets a wrapper to execute instead of rustc, for workspace members only. cargo:rerun-if-changed will now, if provided a directory, scan the entire contents of that directory for changes. Added the --workspace flag to the cargo update command. Misc # The search results tab and the help button are focusable with keyboard in rustdoc. Running tests will now print the total time taken to execute. Compatibility Notes # The compare_and_swap method on atomics has been deprecated. It\u0026rsquo;s recommended to use the compare_exchange and compare_exchange_weak methods instead. Changes in how TokenStreams are checked have fixed some cases where you could write unhygenic macro_rules! macros. #![test] as an inner attribute is now considered unstable like other inner macro attributes, and reports an error by default through the soft_unstable lint. Overriding a forbid lint at the same level that it was set is now a hard error. You can no longer intercept panic! calls by supplying your own macro. It\u0026rsquo;s recommended to use the #[panic_handler] attribute to provide your own implementation. Semi-colons after item statements (e.g. struct Foo {};) now produce a warning. "},{"id":35,"href":"/docs/1.49.0/","title":"1.49.0","section":"Docs","content":" 1.49.0 # Released on: 31 December, 2020 Branched from master on: 13 November, 2020 Language # Unions can now implement Drop, and you can now have a field in a union with ManuallyDrop\u0026lt;T\u0026gt;. You can now cast uninhabited enums to integers. You can now bind by reference and by move in patterns. This allows you to selectively borrow individual components of a type. E.g. #[derive(Debug)] struct Person { name: String, age: u8, } let person = Person { name: String::from(\u0026#34;Alice\u0026#34;), age: 20, }; // `name` is moved out of person, but `age` is referenced. let Person { name, ref age } = person; println!(\u0026#34;{} {}\u0026#34;, name, age); Compiler # Added tier 1* support for aarch64-unknown-linux-gnu. Added tier 2 support for aarch64-apple-darwin. Added tier 2 support for aarch64-pc-windows-msvc. Added tier 3 support for mipsel-unknown-none. Raised the minimum supported LLVM version to LLVM 9. Output from threads spawned in tests is now captured. Change os and vendor values to \u0026ldquo;none\u0026rdquo; and \u0026ldquo;unknown\u0026rdquo; for some targets * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # RangeInclusive now checks for exhaustion when calling contains and indexing. ToString::to_string now no longer shrinks the internal buffer in the default implementation. Stabilized APIs # slice::select_nth_unstable slice::select_nth_unstable_by slice::select_nth_unstable_by_key The following previously stable methods are now const.\nPoll::is_ready Poll::is_pending Cargo # Building a crate with cargo-package should now be independently reproducible. cargo-tree now marks proc-macro crates. Added CARGO_PRIMARY_PACKAGE build-time environment variable. This variable will be set if the crate being built is one the user selected to build, either with -p or through defaults. You can now use glob patterns when specifying packages \u0026amp; targets. Compatibility Notes # Demoted i686-unknown-freebsd from host tier 2 to target tier 2 support. Macros that end with a semi-colon are now treated as statements even if they expand to nothing. Rustc will now check for the validity of some built-in attributes on enum variants. Previously such invalid or unused attributes could be ignored. Leading whitespace is stripped more uniformly in documentation comments, which may change behavior. You read this post about the changes for more details. Trait bounds are no longer inferred for associated types. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nrustc\u0026rsquo;s internal crates are now compiled using the initial-exec Thread Local Storage model. Calculate visibilities once in resolve. Added system to the llvm-libunwind bootstrap config option. Added --color for configuring terminal color support to bootstrap. "},{"id":36,"href":"/docs/1.48.0/","title":"1.48.0","section":"Docs","content":" 1.48.0 # Released on: 19 November, 2020 Branched from master on: 2 October, 2020 Language # The unsafe keyword is now syntactically permitted on modules. This is still rejected semantically, but can now be parsed by procedural macros. Compiler # Stabilised the -C link-self-contained=\u0026lt;yes|no\u0026gt; compiler flag. This tells rustc whether to link its own C runtime and libraries or to rely on a external linker to find them. (Supported only on windows-gnu, linux-musl, and wasi platforms.) You can now use -C target-feature=+crt-static on linux-gnu targets. Note: If you\u0026rsquo;re using cargo you must explicitly pass the --target flag. Added tier 2* support for aarch64-unknown-linux-musl. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # io::Write is now implemented for \u0026amp;ChildStdin \u0026amp;Sink, \u0026amp;Stdout, and \u0026amp;Stderr. All arrays of any length now implement TryFrom\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt;. The matches! macro now supports having a trailing comma. Vec\u0026lt;A\u0026gt; now implements PartialEq\u0026lt;[B]\u0026gt; where A: PartialEq\u0026lt;B\u0026gt;. The RefCell::{replace, replace_with, clone} methods now all use #[track_caller]. Stabilized APIs # slice::as_ptr_range slice::as_mut_ptr_range VecDeque::make_contiguous future::pending future::ready The following previously stable methods are now const fn\u0026rsquo;s:\nOption::is_some Option::is_none Option::as_ref Result::is_ok Result::is_err Result::as_ref Ordering::reverse Ordering::then Cargo # Rustdoc # You can now link to items in rustdoc using the intra-doc link syntax. E.g. /// Uses [`std::future`] will automatically generate a link to std::future\u0026rsquo;s documentation. See \u0026ldquo;Linking to items by name\u0026rdquo; for more information. You can now specify #[doc(alias = \u0026quot;\u0026lt;alias\u0026gt;\u0026quot;)] on items to add search aliases when searching through rustdoc\u0026rsquo;s UI. Compatibility Notes # Promotion of references to 'static lifetime inside const fn now follows the same rules as inside a fn body. In particular, \u0026amp;foo() will not be promoted to 'static lifetime any more inside const fns. Associated type bindings on trait objects are now verified to meet the bounds declared on the trait when checking that they implement the trait. When trait bounds on associated types or opaque types are ambiguous, the compiler no longer makes an arbitrary choice on which bound to use. Fixed recursive nonterminals not being expanded in macros during pretty-print/reparse check. This may cause errors if your macro wasn\u0026rsquo;t correctly handling recursive nonterminal tokens. \u0026amp;mut references to non zero-sized types are no longer promoted. rustc will now warn if you use attributes like #[link_name] or #[cold] in places where they have no effect. Updated _mm256_extract_epi8 and _mm256_extract_epi16 signatures in arch::{x86, x86_64} to return i32 to match the vendor signatures. mem::uninitialized will now panic if any inner types inside a struct or enum disallow zero-initialization. #[target_feature] will now error if used in a place where it has no effect. Foreign exceptions are now caught by catch_unwind and will cause an abort. Note: This behaviour is not guaranteed and is still considered undefined behaviour, see the catch_unwind documentation for further information. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nBuilding rustc from source now uses ninja by default over make. You can continue building with make by setting ninja=false in your config.toml. cg_llvm: fewer_names in uncached_llvm_type Made ensure_sufficient_stack() non-generic "},{"id":37,"href":"/docs/1.47.0/","title":"1.47.0","section":"Docs","content":" 1.47.0 # Released on: 8 October, 2020 Branched from master on: 21 August, 2020 Language # Closures will now warn when not used. Compiler # Stabilized the -C control-flow-guard codegen option, which enables Control Flow Guard for Windows platforms, and is ignored on other platforms. Upgraded to LLVM 11. Added tier 3* support for the thumbv4t-none-eabi target. Upgrade the FreeBSD toolchain to version 11.4 RUST_BACKTRACE\u0026rsquo;s output is now more compact. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # CStr now implements Index\u0026lt;RangeFrom\u0026lt;usize\u0026gt;\u0026gt;. Traits in std/core are now implemented for arrays of any length, not just those of length less than 33. ops::RangeFull and ops::Range now implement Default. panic::Location now implements Copy, Clone, Eq, Hash, Ord, PartialEq, and PartialOrd. Stabilized APIs # Ident::new_raw Range::is_empty RangeInclusive::is_empty Result::as_deref Result::as_deref_mut Vec::leak pointer::offset_from f32::TAU f64::TAU The following previously stable APIs have now been made const.\nThe new method for all NonZero integers. The checked_add,checked_sub,checked_mul,checked_neg, checked_shl, checked_shr, saturating_add, saturating_sub, and saturating_mul methods for all integers. The checked_abs, saturating_abs, saturating_neg, and signum for all signed integers. The is_ascii_alphabetic, is_ascii_uppercase, is_ascii_lowercase, is_ascii_alphanumeric, is_ascii_digit, is_ascii_hexdigit, is_ascii_punctuation, is_ascii_graphic, is_ascii_whitespace, and is_ascii_control methods for char and u8. Cargo # build-dependencies are now built with opt-level 0 by default. You can override this by setting the following in your Cargo.toml. [profile.release.build-override] opt-level = 3 cargo-help will now display man pages for commands rather just the --help text. cargo-metadata now emits a test field indicating if a target has tests enabled. workspace.default-members now respects workspace.exclude. cargo-publish will now use an alternative registry by default if it\u0026rsquo;s the only registry specified in package.publish. Misc # Added a help button beside Rustdoc\u0026rsquo;s searchbar that explains rustdoc\u0026rsquo;s type based search. Added the Ayu theme to rustdoc. Compatibility Notes # Bumped the minimum supported Emscripten version to 1.39.20. Fixed a regression parsing {} \u0026amp;\u0026amp; false in tail expressions. Added changes to how proc-macros are expanded in macro_rules! that should help to preserve more span information. These changes may cause compilation errors if your macro was unhygenic or didn\u0026rsquo;t correctly handle Delimiter::None. Moved support for the CloudABI target to tier 3. linux-gnu targets now require minimum kernel 2.6.32 and glibc 2.11. Added the rustc-docs component. This allows you to install and read the documentation for the compiler internal APIs. (Currently only available for x86_64-unknown-linux-gnu.) Internal Only # Improved default settings for bootstrapping in x.py. You can read details about this change in the \u0026ldquo;Changes to x.py defaults\u0026rdquo; post on the Inside Rust blog. "},{"id":38,"href":"/docs/1.46.0/","title":"1.46.0","section":"Docs","content":" 1.46.0 # Released on: 27 August, 2020 Branched from master on: 10 July, 2020 Language # if, match, and loop expressions can now be used in const functions. Additionally you are now also able to coerce and cast to slices (\u0026amp;[T]) in const functions. The #[track_caller] attribute can now be added to functions to use the function\u0026rsquo;s caller\u0026rsquo;s location information for panic messages. Recursively indexing into tuples no longer needs parentheses. E.g. x.0.0 over (x.0).0. mem::transmute can now be used in statics and constants. Note You currently can\u0026rsquo;t use mem::transmute in constant functions. Compiler # You can now use the cdylib target on Apple iOS and tvOS platforms. Enabled static \u0026ldquo;Position Independent Executables\u0026rdquo; by default for x86_64-unknown-linux-musl. Libraries # mem::forget is now a const fn. String now implements From\u0026lt;char\u0026gt;. The leading_ones, and trailing_ones methods have been stabilised for all integer types. vec::IntoIter\u0026lt;T\u0026gt; now implements AsRef\u0026lt;[T]\u0026gt;. All non-zero integer types (NonZeroU8) now implement TryFrom for their zero-able equivalent (e.g. TryFrom\u0026lt;u8\u0026gt;). \u0026amp;[T] and \u0026amp;mut [T] now implement PartialEq\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt;. (String, u16) now implements ToSocketAddrs. vec::Drain\u0026lt;'_, T\u0026gt; now implements AsRef\u0026lt;[T]\u0026gt;. Stabilized APIs # Option::zip vec::Drain::as_slice Cargo # Added a number of new environment variables that are now available when compiling your crate.\nCARGO_BIN_NAME and CARGO_CRATE_NAME Providing the name of the specific binary being compiled and the name of the crate. CARGO_PKG_LICENSE The license from the manifest of the package. CARGO_PKG_LICENSE_FILE The path to the license file. Compatibility Notes # The target configuration option abi_blacklist has been renamed to unsupported_abis. The old name will still continue to work. Rustc will now warn if you cast a C-like enum that implements Drop. This was previously accepted but will become a hard error in a future release. Rustc will fail to compile if you have a struct with #[repr(i128)] or #[repr(u128)]. This representation is currently only allowed on enums. Tokens passed to macro_rules! are now always captured. This helps ensure that spans have the correct information, and may cause breakage if you were relying on receiving spans with dummy information. The InnoSetup installer for Windows is no longer available. This was a legacy installer that was replaced by a MSI installer a few years ago but was still being built. {f32, f64}::asinh now returns the correct values for negative numbers. Rustc will no longer accept overlapping trait implementations that only differ in how the lifetime was bound. Rustc now correctly relates the lifetime of an existential associated type. This fixes some edge cases where rustc would erroneously allow you to pass a shorter lifetime than expected. Rustc now dynamically links to libz (also called zlib) on Linux. The library will need to be installed for rustc to work, even though we expect it to be already available on most systems. Tests annotated with #[should_panic] are broken on ARMv7 while running under QEMU. Pretty printing of some tokens in procedural macros changed. The exact output returned by rustc\u0026rsquo;s pretty printing is an unstable implementation detail: we recommend any macro relying on it to switch to a more robust parsing system. "},{"id":39,"href":"/docs/1.45.2/","title":"1.45.2","section":"Docs","content":" 1.45.2 # Released on: 3 August, 2020 This is a patch release Fix bindings in tuple struct patterns Fix track_caller integration with trait objects "},{"id":40,"href":"/docs/1.45.1/","title":"1.45.1","section":"Docs","content":" 1.45.1 # Released on: 30 July, 2020 This is a patch release Fix const propagation with references. rustfmt accepts rustfmt_skip in cfg_attr again. Avoid spurious implicit region bound. Install clippy on x.py install "},{"id":41,"href":"/docs/1.45.0/","title":"1.45.0","section":"Docs","content":" 1.45.0 # Released on: 16 July, 2020 Branched from master on: 29 May, 2020 Language # Out of range float to int conversions using as has been defined as a saturating conversion. This was previously undefined behaviour, but you can use the {f64, f32}::to_int_unchecked methods to continue using the current behaviour, which may be desirable in rare performance sensitive situations. mem::Discriminant\u0026lt;T\u0026gt; now uses T\u0026rsquo;s discriminant type instead of always using u64. Function like procedural macros can now be used in expression, pattern, and statement positions. This means you can now use a function-like procedural macro anywhere you can use a declarative (macro_rules!) macro. Compiler # You can now override individual target features through the target-feature flag. E.g. -C target-feature=+avx2 -C target-feature=+fma is now equivalent to -C target-feature=+avx2,+fma. Added the force-unwind-tables flag. This option allows rustc to always generate unwind tables regardless of panic strategy. Added the embed-bitcode flag. This codegen flag allows rustc to include LLVM bitcode into generated rlibs (this is on by default). Added the tiny value to the code-model codegen flag. Added tier 3 support* for the mipsel-sony-psp target. Added tier 3 support for the thumbv7a-uwp-windows-msvc target. Upgraded to LLVM 10. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # net::{SocketAddr, SocketAddrV4, SocketAddrV6} now implements PartialOrd and Ord. proc_macro::TokenStream now implements Default. You can now use char with ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeTo} to iterate over a range of codepoints. E.g. you can now write the following; for ch in \u0026#39;a\u0026#39;..=\u0026#39;z\u0026#39; { print!(\u0026#34;{}\u0026#34;, ch); } println!(); // Prints \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; OsString now implements FromStr. The saturating_neg method has been added to all signed integer primitive types, and the saturating_abs method has been added for all integer primitive types. Arc\u0026lt;T\u0026gt;, Rc\u0026lt;T\u0026gt; now implement From\u0026lt;Cow\u0026lt;'_, T\u0026gt;\u0026gt;, and Box now implements From\u0026lt;Cow\u0026gt; when T is [T: Copy], str, CStr, OsStr, or Path. Box\u0026lt;[T]\u0026gt; now implements From\u0026lt;[T; N]\u0026gt;. BitOr and BitOrAssign are implemented for all NonZero integer types. The fetch_min, and fetch_max methods have been added to all atomic integer types. The fetch_update method has been added to all atomic integer types. Stabilized APIs # Arc::as_ptr BTreeMap::remove_entry Rc::as_ptr rc::Weak::as_ptr rc::Weak::from_raw rc::Weak::into_raw str::strip_prefix str::strip_suffix sync::Weak::as_ptr sync::Weak::from_raw sync::Weak::into_raw char::UNICODE_VERSION Span::resolved_at Span::located_at Span::mixed_site unix::process::CommandExt::arg0 Cargo # Cargo uses the embed-bitcode flag to optimize disk usage and build time. Misc # Rustdoc now supports strikethrough text in Markdown. E.g. ~~outdated information~~ becomes \u0026ldquo;outdated information\u0026rdquo;. Added an emoji to Rustdoc\u0026rsquo;s deprecated API message. Compatibility Notes # Trying to self initialize a static value (that is creating a value using itself) is unsound and now causes a compile error. {f32, f64}::powi now returns a slightly different value on Windows. This is due to changes in LLVM\u0026rsquo;s intrinsics which {f32, f64}::powi uses. Rustdoc\u0026rsquo;s CLI\u0026rsquo;s extra error exit codes have been removed. These were previously undocumented and not intended for public use. Rustdoc still provides a non-zero exit code on errors. Rustc\u0026rsquo;s lto flag is incompatible with the new embed-bitcode=no. This may cause issues if LTO is enabled through RUSTFLAGS or cargo rustc flags while cargo is adding embed-bitcode itself. The recommended way to control LTO is with Cargo profiles, either in Cargo.toml or .cargo/config, or by setting CARGO_PROFILE_\u0026lt;name\u0026gt;_LTO in the environment. Internals Only # Make clippy a git subtree instead of a git submodule Unify the undo log of all snapshot types "},{"id":42,"href":"/docs/1.44.1/","title":"1.44.1","section":"Docs","content":" 1.44.1 # Released on: 18 June, 2020 This is a patch release rustfmt accepts rustfmt_skip in cfg_attr again. Don\u0026rsquo;t hash executable filenames on apple platforms, fixing backtraces. Fix crashes when finding backtrace on macOS. Clippy applies lint levels into different files. "},{"id":43,"href":"/docs/1.44.0/","title":"1.44.0","section":"Docs","content":" 1.44.0 # Released on: 4 June, 2020 Branched from master on: 17 April, 2020 Language # You can now use async/.await with #[no_std] enabled. Added the unused_braces lint. Syntax-only changes\nExpansion-driven outline module parsing #[cfg(FALSE)] mod foo { mod bar { mod baz; // `foo/bar/baz.rs` doesn\u0026#39;t exist, but no error! } } These are still rejected semantically, so you will likely receive an error but these changes can be seen and parsed by macros and conditional compilation.\nCompiler # Rustc now respects the -C codegen-units flag in incremental mode. Additionally when in incremental mode rustc defaults to 256 codegen units. Refactored catch_unwind to have zero-cost, unless unwinding is enabled and a panic is thrown. Added tier 3* support for the aarch64-unknown-none and aarch64-unknown-none-softfloat targets. Added tier 3 support for arm64-apple-tvos and x86_64-apple-tvos targets. Libraries # Special cased vec![] to map directly to Vec::new(). This allows vec![] to be able to be used in const contexts. convert::Infallible now implements Hash. OsString now implements DerefMut and IndexMut returning a \u0026amp;mut OsStr. Unicode 13 is now supported. String now implements From\u0026lt;\u0026amp;mut str\u0026gt;. IoSlice now implements Copy. Vec\u0026lt;T\u0026gt; now implements From\u0026lt;[T; N]\u0026gt;. Where N is at most 32. proc_macro::LexError now implements fmt::Display and Error. from_le_bytes, to_le_bytes, from_be_bytes, to_be_bytes, from_ne_bytes, and to_ne_bytes methods are now const for all integer types. Stabilized APIs # PathBuf::with_capacity PathBuf::capacity PathBuf::clear PathBuf::reserve PathBuf::reserve_exact PathBuf::shrink_to_fit f32::to_int_unchecked f64::to_int_unchecked Layout::align_to Layout::pad_to_align Layout::array Layout::extend Cargo # Added the cargo tree command which will print a tree graph of your dependencies. E.g. mdbook v0.3.2 (/Users/src/rust/mdbook) ├── ammonia v3.0.0 │ ├── html5ever v0.24.0 │ │ ├── log v0.4.8 │ │ │ └── cfg-if v0.1.9 │ │ ├── mac v0.1.1 │ │ └── markup5ever v0.9.0 │ │ ├── log v0.4.8 (*) │ │ ├── phf v0.7.24 │ │ │ └── phf_shared v0.7.24 │ │ │ ├── siphasher v0.2.3 │ │ │ └── unicase v1.4.2 │ │ │ [build-dependencies] │ │ │ └── version_check v0.1.5 ... You can also display dependencies on multiple versions of the same crate with cargo tree -d (short for cargo tree --duplicates). Misc # Rustdoc now allows you to specify --crate-version to have rustdoc include the version in the sidebar. Compatibility Notes # Rustc now correctly generates static libraries on Windows GNU targets with the .a extension, rather than the previous .lib. Removed the -C no_integrated_as flag from rustc. The file_name property in JSON output of macro errors now points the actual source file rather than the previous format of \u0026lt;NAME macros\u0026gt;. Note: this may not point to a file that actually exists on the user\u0026rsquo;s system. The minimum required external LLVM version has been bumped to LLVM 8. mem::{zeroed, uninitialised} will now panic when used with types that do not allow zero initialization such as NonZeroU8. This was previously a warning. In 1.45.0 (the next release) converting a f64 to u32 using the as operator has been defined as a saturating operation. This was previously undefined behaviour, but you can use the {f64, f32}::to_int_unchecked methods to continue using the current behaviour, which may be desirable in rare performance sensitive situations. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\ndep_graph Avoid allocating a set on when the number reads are small. Replace big JS dict with JSON parsing. "},{"id":44,"href":"/docs/1.43.1/","title":"1.43.1","section":"Docs","content":" 1.43.1 # Released on: 7 May, 2020 This is a patch release Updated openssl-src to 1.1.1g for CVE-2020-1967. Fixed the stabilization of AVX-512 features. Fixed cargo package --list not working with unpublished dependencies. "},{"id":45,"href":"/docs/1.43.0/","title":"1.43.0","section":"Docs","content":" 1.43.0 # Released on: 23 April, 2020 Branched from master on: 6 March, 2020 Language # Fixed using binary operations with \u0026amp;{number} (e.g. \u0026amp;1.0) not having the type inferred correctly. Attributes such as #[cfg()] can now be used on if expressions. Syntax only changes\nAllow type Foo: Ord syntactically. Fuse associated and extern items up to defaultness. Syntactically allow self in all fn contexts. Merge fn syntax + cleanup item parsing. item macro fragments can be interpolated into traits, impls, and extern blocks. For example, you may now write: macro_rules! mac_trait { ($i:item) =\u0026gt; { trait T { $i } } } mac_trait! { fn foo() {} } These are still rejected semantically, so you will likely receive an error but these changes can be seen and parsed by macros and conditional compilation.\nCompiler # You can now pass multiple lint flags to rustc to override the previous flags. For example; rustc -D unused -A unused-variables denies everything in the unused lint group except unused-variables which is explicitly allowed. However, passing rustc -A unused-variables -D unused denies everything in the unused lint group including unused-variables since the allow flag is specified before the deny flag (and therefore overridden). rustc will now prefer your system MinGW libraries over its bundled libraries if they are available on windows-gnu. rustc now buffers errors/warnings printed in JSON. Libraries # Arc\u0026lt;[T; N]\u0026gt;, Box\u0026lt;[T; N]\u0026gt;, and Rc\u0026lt;[T; N]\u0026gt;, now implement TryFrom\u0026lt;Arc\u0026lt;[T]\u0026gt;\u0026gt;,TryFrom\u0026lt;Box\u0026lt;[T]\u0026gt;\u0026gt;, and TryFrom\u0026lt;Rc\u0026lt;[T]\u0026gt;\u0026gt; respectively. Note These conversions are only available when N is 0..=32. You can now use associated constants on floats and integers directly, rather than having to import the module. e.g. You can now write u32::MAX or f32::NAN with no imports. u8::is_ascii is now const. String now implements AsMut\u0026lt;str\u0026gt;. Added the primitive module to std and core. This module reexports Rust\u0026rsquo;s primitive types. This is mainly useful in macros where you want avoid these types being shadowed. Relaxed some of the trait bounds on HashMap and HashSet. string::FromUtf8Error now implements Clone + Eq. Stabilized APIs # Once::is_completed f32::LOG10_2 f32::LOG2_10 f64::LOG10_2 f64::LOG2_10 iter::once_with Cargo # You can now set config [profile]s in your .cargo/config, or through your environment. Cargo will now set CARGO_BIN_EXE_\u0026lt;name\u0026gt; pointing to a binary\u0026rsquo;s executable path when running integration tests or benchmarks. \u0026lt;name\u0026gt; is the name of your binary as-is e.g. If you wanted the executable path for a binary named my-programyou would use env!(\u0026quot;CARGO_BIN_EXE_my-program\u0026quot;). Misc # Certain checks in the const_err lint were deemed unrelated to const evaluation, and have been moved to the unconditional_panic and arithmetic_overflow lints. Compatibility Notes # Having trailing syntax in the assert! macro is now a hard error. This has been a warning since 1.36.0. Fixed Self not having the correctly inferred type. This incorrectly led to some instances being accepted, and now correctly emits a hard error. Internal Only # These changes provide no direct user facing benefits, but represent significant improvements to the internals and overall performance of rustc and related tools.\nAll components are now built with opt-level=3 instead of 2. Improved how rustc generates drop code. Improved performance from #[inline]-ing certain hot functions. traits: preallocate 2 Vecs of known initial size Avoid exponential behaviour when relating types Skip Drop terminators for enum variants without drop glue Improve performance of coherence checks Deduplicate types in the generator witness Invert control in struct_lint_level. "},{"id":46,"href":"/docs/1.42.0/","title":"1.42.0","section":"Docs","content":" 1.42.0 # Released on: 12 March, 2020 Branched from master on: 24 January, 2020 Language # You can now use the slice pattern syntax with subslices. e.g.\nfn foo(words: \u0026amp;[\u0026amp;str]) { match words { [\u0026#34;Hello\u0026#34;, \u0026#34;World\u0026#34;, \u0026#34;!\u0026#34;, ..] =\u0026gt; println!(\u0026#34;Hello World!\u0026#34;), [\u0026#34;Foo\u0026#34;, \u0026#34;Bar\u0026#34;, ..] =\u0026gt; println!(\u0026#34;Baz\u0026#34;), rest =\u0026gt; println!(\u0026#34;{:?}\u0026#34;, rest), } } You can now use #[repr(transparent)] on univariant enums. Meaning that you can create an enum that has the exact layout and ABI of the type it contains.\nYou can now use outer attribute procedural macros on inline modules.\nThere are some syntax-only changes:\ndefault is syntactically allowed before items in trait definitions. Items in impls (i.e. consts, types, and fns) may syntactically leave out their bodies in favor of ;. Bounds on associated types in impls are now syntactically allowed (e.g. type Foo: Ord;). ... (the C-variadic type) may occur syntactically directly as the type of any function parameter. These are still rejected semantically, so you will likely receive an error but these changes can be seen and parsed by procedural macros and conditional compilation.\nCompiler # Added tier 2* support for armv7a-none-eabi. Added tier 2 support for riscv64gc-unknown-linux-gnu. Option::{expect,unwrap} and Result::{expect, expect_err, unwrap, unwrap_err} now produce panic messages pointing to the location where they were called, rather than core\u0026rsquo;s internals. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # iter::Empty\u0026lt;T\u0026gt; now implements Send and Sync for any T. Pin::{map_unchecked, map_unchecked_mut} no longer require the return type to implement Sized. io::Cursor now derives PartialEq and Eq. Layout::new is now const. Added Standard Library support for riscv64gc-unknown-linux-gnu. Stabilized APIs # CondVar::wait_while CondVar::wait_timeout_while DebugMap::key DebugMap::value ManuallyDrop::take matches! ptr::slice_from_raw_parts_mut ptr::slice_from_raw_parts Cargo # You no longer need to include extern crate proc_macro; to be able to use proc_macro; in the 2018 edition. Compatibility Notes # Error::description has been deprecated, and its use will now produce a warning. It\u0026rsquo;s recommended to use Display/to_string instead. "},{"id":47,"href":"/docs/1.41.1/","title":"1.41.1","section":"Docs","content":" 1.41.1 # Released on: 27 February, 2020 This is a patch release Always check types of static items Always check lifetime bounds of Copy impls Fix miscompilation in callers of Layout::repeat [Rust 1.41.0 was announced as the last Rust release with tier 1 or tier 2 support for 32-bit Apple targets][apple-32bit-drop]. That announcement did not expect a patch release. 1.41.1 also includes release binaries for these targets. "},{"id":48,"href":"/docs/1.41.0/","title":"1.41.0","section":"Docs","content":" 1.41.0 # Released on: 30 January, 2020 Branched from master on: 13 December, 2019 Language # You can now pass type parameters to foreign items when implementing traits. E.g. You can now write impl\u0026lt;T\u0026gt; From\u0026lt;Foo\u0026gt; for Vec\u0026lt;T\u0026gt; {}. You can now arbitrarily nest receiver types in the self position. E.g. you can now write fn foo(self: Box\u0026lt;Box\u0026lt;Self\u0026gt;\u0026gt;) {}. Previously only Self, \u0026amp;Self, \u0026amp;mut Self, Arc\u0026lt;Self\u0026gt;, Rc\u0026lt;Self\u0026gt;, and Box\u0026lt;Self\u0026gt; were allowed. You can now use any valid identifier in a format_args macro. Previously identifiers starting with an underscore were not allowed. Visibility modifiers (e.g. pub) are now syntactically allowed on trait items and enum variants. These are still rejected semantically, but can be seen and parsed by procedural macros and conditional compilation. You can now define a Rust extern \u0026quot;C\u0026quot; function with Box\u0026lt;T\u0026gt; and use T* as the corresponding type on the C side. Please see the documentation for more information, including the important caveat about preferring to avoid Box\u0026lt;T\u0026gt; in Rust signatures for functions defined in C. Compiler # Rustc will now warn if you have unused loop 'labels. Removed support for the i686-unknown-dragonfly target. Added tier 3 support* for the riscv64gc-unknown-linux-gnu target. You can now pass an arguments file passing the @path syntax to rustc. Note that the format differs somewhat from what is found in other tooling; please see the documentation for more information. You can now provide --extern flag without a path, indicating that it is available from the search path or specified with an -L flag. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # The core::panic module is now stable. It was already stable through std. NonZero* numerics now implement From\u0026lt;NonZero*\u0026gt; if it\u0026rsquo;s a smaller integer width. E.g. NonZeroU16 now implements From\u0026lt;NonZeroU8\u0026gt;. MaybeUninit\u0026lt;T\u0026gt; now implements fmt::Debug. Stabilized APIs # Result::map_or Result::map_or_else std::rc::Weak::weak_count std::rc::Weak::strong_count std::sync::Weak::weak_count std::sync::Weak::strong_count Cargo # Cargo will now document all the private items for binary crates by default. cargo-install will now reinstall the package if it detects that it is out of date. Cargo.lock now uses a more git friendly format that should help to reduce merge conflicts. You can now override specific dependencies\u0026rsquo;s build settings E.g. [profile.dev.package.image] opt-level = 2 sets the image crate\u0026rsquo;s optimisation level to 2 for debug builds. You can also use [profile.\u0026lt;profile\u0026gt;.build-override] to override build scripts and their dependencies. Misc # You can now specify edition in documentation code blocks to compile the block for that edition. E.g. edition2018 tells rustdoc that the code sample should be compiled the 2018 edition of Rust. You can now provide custom themes to rustdoc with --theme, and check the current theme with --check-theme. You can use #[cfg(doc)] to compile an item when building documentation. Compatibility Notes # As previously announced 1.41 will be the last tier 1 release for 32-bit Apple targets. This means that the source code is still available to build, but the targets are no longer being tested and release binaries for those platforms will no longer be distributed by the Rust project. Please refer to the linked blog post for more information. "},{"id":49,"href":"/docs/1.40.0/","title":"1.40.0","section":"Docs","content":" 1.40.0 # Released on: 19 December, 2019 Branched from master on: 1 November, 2019 Language # You can now use tuple structs and tuple enum variant\u0026rsquo;s constructors in const contexts. e.g.\npub struct Point(i32, i32); const ORIGIN: Point = { let constructor = Point; constructor(0, 0) }; You can now mark structs, enums, and enum variants with the #[non_exhaustive] attribute to indicate that there may be variants or fields added in the future. For example this requires adding a wild-card branch (_ =\u0026gt; {}) to any match statements on a non-exhaustive enum. (RFC 2008)\nYou can now use function-like procedural macros in extern blocks and in type positions. e.g. type Generated = macro!();\nFunction-like and attribute procedural macros can now emit macro_rules! items, so you can now have your macros generate macros.\nThe meta pattern matcher in macro_rules! now correctly matches the modern attribute syntax. For example (#[$m:meta]) now matches #[attr], #[attr{tokens}], #[attr[tokens]], and #[attr(tokens)].\nCompiler # Added tier 3 support* for the thumbv7neon-unknown-linux-musleabihf target. Added tier 3 support for the aarch64-unknown-none-softfloat target. Added tier 3 support for the mips64-unknown-linux-muslabi64, and mips64el-unknown-linux-muslabi64 targets. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # The is_power_of_two method on unsigned numeric types is now a const function. Stabilized APIs # BTreeMap::get_key_value HashMap::get_key_value Option::as_deref_mut Option::as_deref Option::flatten UdpSocket::peer_addr f32::to_be_bytes f32::to_le_bytes f32::to_ne_bytes f64::to_be_bytes f64::to_le_bytes f64::to_ne_bytes f32::from_be_bytes f32::from_le_bytes f32::from_ne_bytes f64::from_be_bytes f64::from_le_bytes f64::from_ne_bytes mem::take slice::repeat todo! Cargo # Cargo will now always display warnings, rather than only on fresh builds. Feature flags (except --all-features) passed to a virtual workspace will now produce an error. Previously these flags were ignored. You can now publish dev-dependencies without including a version. Misc # You can now specify the #[cfg(doctest)] attribute to include an item only when running documentation tests with rustdoc. Compatibility Notes # As previously announced, any previous NLL warnings in the 2015 edition are now hard errors. The include! macro will now warn if it failed to include the entire file. The include! macro unintentionally only includes the first expression in a file, and this can be unintuitive. This will become either a hard error in a future release, or the behavior may be fixed to include all expressions as expected. Using #[inline] on function prototypes and consts now emits a warning under unused_attribute lint. Using #[inline] anywhere else inside traits or extern blocks now correctly emits a hard error. "},{"id":50,"href":"/docs/1.39.0/","title":"1.39.0","section":"Docs","content":" 1.39.0 # Released on: 7 November, 2019 Branched from master on: 20 September, 2019 Language # You can now create async functions and blocks with async fn, async move {}, and async {} respectively, and you can now call .await on async expressions. You can now use certain attributes on function, closure, and function pointer parameters. These attributes include cfg, cfg_attr, allow, warn, deny, forbid as well as inert helper attributes used by procedural macro attributes applied to items. e.g. fn len( #[cfg(windows)] slice: \u0026amp;[u16], #[cfg(not(windows))] slice: \u0026amp;[u8], ) -\u0026gt; usize { slice.len() } You can now take shared references to bind-by-move patterns in the if guards of match arms. e.g. fn main() { let array: Box\u0026lt;[u8; 4]\u0026gt; = Box::new([1, 2, 3, 4]); match array { nums // ---- `nums` is bound by move. if nums.iter().sum::\u0026lt;u8\u0026gt;() == 10 // ^------ `.iter()` implicitly takes a reference to `nums`. =\u0026gt; { drop(nums); // ----------- Legal as `nums` was bound by move and so we have ownership. } _ =\u0026gt; unreachable!(), } } Compiler # Added tier 3* support for the i686-unknown-uefi target. Added tier 3 support for the sparc64-unknown-openbsd target. rustc will now trim code snippets in diagnostics to fit in your terminal. Note Cargo currently doesn\u0026rsquo;t use this feature. Refer to cargo#7315 to track this feature\u0026rsquo;s progress. You can now pass --show-output argument to test binaries to print the output of successful tests. * Refer to Rust\u0026rsquo;s [platform support page][platform-support-doc] for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # Vec::new and String::new are now const functions. LinkedList::new is now a const function. str::len, [T]::len and str::as_bytes are now const functions. The abs, wrapping_abs, and overflowing_abs numeric functions are now const. Stabilized APIs # Pin::into_inner Instant::checked_duration_since Instant::saturating_duration_since Cargo # You can now publish git dependencies if supplied with a version. The --all flag has been renamed to --workspace. Using --all is now deprecated. Misc # You can now pass -Clinker to rustdoc to control the linker used for compiling doctests. Compatibility Notes # Code that was previously accepted by the old borrow checker, but rejected by the NLL borrow checker is now a hard error in Rust 2018. This was previously a warning, and will also become a hard error in the Rust 2015 edition in the 1.40.0 release. rustdoc now requires rustc to be installed and in the same directory to run tests. This should improve performance when running a large amount of doctests. The try! macro will now issue a deprecation warning. It is recommended to use the ? operator instead. asinh(-0.0) now correctly returns -0.0. Previously this returned 0.0. "},{"id":51,"href":"/docs/1.38.0/","title":"1.38.0","section":"Docs","content":" 1.38.0 # Released on: 26 September, 2019 Branched from master on: 9 August, 2019 Language # The #[global_allocator] attribute can now be used in submodules. The #[deprecated] attribute can now be used on macros. Compiler # Added pipelined compilation support to rustc. This will improve compilation times in some cases. For further information please refer to the \u0026ldquo;Evaluating pipelined rustc compilation\u0026rdquo; thread. Added tier 3* support for the aarch64-uwp-windows-msvc, i686-uwp-windows-gnu, i686-uwp-windows-msvc, x86_64-uwp-windows-gnu, and x86_64-uwp-windows-msvc targets. Added tier 3 support for the armv7-unknown-linux-gnueabi and armv7-unknown-linux-musleabi targets. Added tier 3 support for the hexagon-unknown-linux-musl target. Added tier 3 support for the riscv32i-unknown-none-elf target. Upgraded to LLVM 9. * Refer to Rust\u0026rsquo;s platform support page for more information on Rust\u0026rsquo;s tiered platform support.\nLibraries # ascii::EscapeDefault now implements Clone and Display. Derive macros for prelude traits (e.g. Clone, Debug, Hash) are now available at the same path as the trait. (e.g. The Clone derive macro is available at std::clone::Clone). This also makes all built-in macros available in std/core root. e.g. std::include_bytes!. str::Chars now implements Debug. slice::{concat, connect, join} now accepts \u0026amp;[T] in addition to \u0026amp;T. *const T and *mut T now implement marker::Unpin. Arc\u0026lt;[T]\u0026gt; and Rc\u0026lt;[T]\u0026gt; now implement FromIterator\u0026lt;T\u0026gt;. Added euclidean remainder and division operations (div_euclid, rem_euclid) to all numeric primitives. Additionally checked, overflowing, and wrapping versions are available for all integer primitives. thread::AccessError now implements Clone, Copy, Eq, Error, and PartialEq. iter::{StepBy, Peekable, Take} now implement DoubleEndedIterator. Stabilized APIs # \u0026lt;*const T\u0026gt;::cast \u0026lt;*mut T\u0026gt;::cast Duration::as_secs_f32 Duration::as_secs_f64 Duration::div_f32 Duration::div_f64 Duration::from_secs_f32 Duration::from_secs_f64 Duration::mul_f32 Duration::mul_f64 any::type_name Cargo # Added pipelined compilation support to cargo. You can now pass the --features option multiple times to enable multiple features. Rustdoc # Documentation on pub use statements is prepended to the documentation of the re-exported item Misc # rustc will now warn about some incorrect uses of mem::{uninitialized, zeroed} that are known to cause undefined behaviour. Compatibility Notes # The x86_64-unknown-uefi platform can not be built with rustc 1.38.0. The armv7-unknown-linux-gnueabihf platform is known to have issues with certain crates such as libc. "},{"id":52,"href":"/docs/1.37.0/","title":"1.37.0","section":"Docs","content":" 1.37.0 # Released on: 15 August, 2019 Branched from master on: 28 June, 2019 Language # #[must_use] will now warn if the type is contained in a tuple, Box, or an array and unused. You can now use the cfg and cfg_attr attributes on generic parameters. You can now use enum variants through type alias. e.g. You can write the following: type MyOption = Option\u0026lt;u8\u0026gt;; fn increment_or_zero(x: MyOption) -\u0026gt; u8 { match x { MyOption::Some(y) =\u0026gt; y + 1, MyOption::None =\u0026gt; 0, } } You can now use _ as an identifier for consts. e.g. You can write const _: u32 = 5;. You can now use #[repr(align(X)] on enums. The ? Kleene macro operator is now available in the 2015 edition. Compiler # You can now enable Profile-Guided Optimization with the -C profile-generate and -C profile-use flags. For more information on how to use profile guided optimization, please refer to the rustc book. The rust-lldb wrapper script should now work again. Libraries # mem::MaybeUninit\u0026lt;T\u0026gt; is now ABI-compatible with T. Stabilized APIs # BufReader::buffer BufWriter::buffer Cell::from_mut Cell\u0026lt;[T]\u0026gt;::as_slice_of_cells DoubleEndedIterator::nth_back Option::xor Wrapping::reverse_bits i128::reverse_bits i16::reverse_bits i32::reverse_bits i64::reverse_bits i8::reverse_bits isize::reverse_bits slice::copy_within u128::reverse_bits u16::reverse_bits u32::reverse_bits u64::reverse_bits u8::reverse_bits usize::reverse_bits Cargo # Cargo.lock files are now included by default when publishing executable crates with executables. You can now specify default-run=\u0026quot;foo\u0026quot; in [package] to specify the default executable to use for cargo run. Misc # Compatibility Notes # Using ... for inclusive range patterns will now warn by default. Please transition your code to using the ..= syntax for inclusive ranges instead. Using a trait object without the dyn will now warn by default. Please transition your code to use dyn Trait for trait objects instead. "},{"id":53,"href":"/docs/1.36.0/","title":"1.36.0","section":"Docs","content":" 1.36.0 # Released on: 4 July, 2019 Branched from master on: 17 May, 2019 Language # Non-Lexical Lifetimes are now enabled on the 2015 edition. The order of traits in trait objects no longer affects the semantics of that object. e.g. dyn Send + fmt::Debug is now equivalent to dyn fmt::Debug + Send, where this was previously not the case. Libraries # HashMap\u0026rsquo;s implementation has been replaced with hashbrown::HashMap implementation. TryFromSliceError now implements From\u0026lt;Infallible\u0026gt;. mem::needs_drop is now available as a const fn. alloc::Layout::from_size_align_unchecked is now available as a const fn. String now implements BorrowMut\u0026lt;str\u0026gt;. io::Cursor now implements Default. Both NonNull::{dangling, cast} are now const fns. The alloc crate is now stable. alloc allows you to use a subset of std (e.g. Vec, Box, Arc) in #![no_std] environments if the environment has access to heap memory allocation. String now implements From\u0026lt;\u0026amp;String\u0026gt;. You can now pass multiple arguments to the dbg! macro. dbg! will return a tuple of each argument when there is multiple arguments. Result::{is_err, is_ok} are now #[must_use] and will produce a warning if not used. Stabilized APIs # VecDeque::rotate_left VecDeque::rotate_right Iterator::copied io::IoSlice io::IoSliceMut Read::read_vectored Write::write_vectored str::as_mut_ptr mem::MaybeUninit pointer::align_offset future::Future task::Context task::RawWaker task::RawWakerVTable task::Waker task::Poll Cargo # Cargo will now produce an error if you attempt to use the name of a required dependency as a feature. You can now pass the --offline flag to run cargo without accessing the network. You can find further change\u0026rsquo;s in Cargo\u0026rsquo;s 1.36.0 release notes.\nClippy # There have been numerous additions and fixes to clippy, see Clippy\u0026rsquo;s 1.36.0 release notes for more details.\nMisc # Compatibility Notes # With the stabilisation of mem::MaybeUninit, mem::uninitialized use is no longer recommended, and will be deprecated in 1.39.0. "},{"id":54,"href":"/docs/1.35.0/","title":"1.35.0","section":"Docs","content":" 1.35.0 # Released on: 23 May, 2019 Branched from master on: 5 April, 2019 Language # FnOnce, FnMut, and the Fn traits are now implemented for Box\u0026lt;FnOnce\u0026gt;, Box\u0026lt;FnMut\u0026gt;, and Box\u0026lt;Fn\u0026gt; respectively. You can now coerce closures into unsafe function pointers. e.g. unsafe fn call_unsafe(func: unsafe fn()) { func() } pub fn main() { unsafe { call_unsafe(|| {}); } } Compiler # Added the armv6-unknown-freebsd-gnueabihf and armv7-unknown-freebsd-gnueabihf targets. Added the wasm32-unknown-wasi target. Libraries # Thread will now show its ID in Debug output. StdinLock, StdoutLock, and StderrLock now implement AsRawFd. alloc::System now implements Default. Expanded Debug output ({:#?}) for structs now has a trailing comma on the last field. char::{ToLowercase, ToUppercase} now implement ExactSizeIterator. All NonZero numeric types now implement FromStr. Removed the Read trait bounds on the BufReader::{get_ref, get_mut, into_inner} methods. You can now call the dbg! macro without any parameters to print the file and line where it is called. In place ASCII case conversions are now up to 4× faster. e.g. str::make_ascii_lowercase hash_map::{OccupiedEntry, VacantEntry} now implement Sync and Send. Stabilized APIs # f32::copysign f64::copysign RefCell::replace_with RefCell::map_split ptr::hash Range::contains RangeFrom::contains RangeTo::contains RangeInclusive::contains RangeToInclusive::contains Option::copied Cargo # You can now set cargo:rustc-cdylib-link-arg at build time to pass custom linker arguments when building a cdylib. Its usage is highly platform specific. Misc # The Rust toolchain is now available natively for musl based distros. "},{"id":55,"href":"/docs/1.34.2/","title":"1.34.2","section":"Docs","content":" 1.34.2 # Released on: 14 May, 2019 This is a patch release Destabilize the Error::type_id function due to a security vulnerability (CVE-2019-12083) "},{"id":56,"href":"/docs/1.34.1/","title":"1.34.1","section":"Docs","content":" 1.34.1 # Released on: 25 April, 2019 This is a patch release Fix false positives for the redundant_closure Clippy lint Fix false positives for the missing_const_for_fn Clippy lint Fix Clippy panic when checking some macros "},{"id":57,"href":"/docs/1.34.0/","title":"1.34.0","section":"Docs","content":" 1.34.0 # Released on: 11 April, 2019 Branched from master on: 22 February, 2019 Language # You can now use #[deprecated = \u0026quot;reason\u0026quot;] as a shorthand for #[deprecated(note = \u0026quot;reason\u0026quot;)]. This was previously allowed by mistake but had no effect. You can now accept token streams in #[attr()],#[attr[]], and #[attr{}] procedural macros. You can now write extern crate self as foo; to import your crate\u0026rsquo;s root into the extern prelude. Compiler # You can now target riscv64imac-unknown-none-elf and riscv64gc-unknown-none-elf. You can now enable linker plugin LTO optimisations with -C linker-plugin-lto. This allows rustc to compile your Rust code into LLVM bitcode allowing LLVM to perform LTO optimisations across C/C++ FFI boundaries. You can now target powerpc64-unknown-freebsd. Libraries # The trait bounds have been removed on some of HashMap\u0026lt;K, V, S\u0026gt;\u0026rsquo;s and HashSet\u0026lt;T, S\u0026gt;\u0026rsquo;s basic methods. Most notably you no longer require the Hash trait to create an iterator. The Ord trait bounds have been removed on some of BinaryHeap\u0026lt;T\u0026gt;\u0026rsquo;s basic methods. Most notably you no longer require the Ord trait to create an iterator. The methods overflowing_neg and wrapping_neg are now const functions for all numeric types. Indexing a str is now generic over all types that implement SliceIndex\u0026lt;str\u0026gt;. str::trim, str::trim_matches, str::trim_{start, end}, and str::trim_{start, end}_matches are now #[must_use] and will produce a warning if their returning type is unused. The methods checked_pow, saturating_pow, wrapping_pow, and overflowing_pow are now available for all numeric types. These are equivalent to methods such as wrapping_add for the pow operation. Stabilized APIs # std \u0026amp; core # Any::type_id Error::type_id atomic::AtomicI16 atomic::AtomicI32 atomic::AtomicI64 atomic::AtomicI8 atomic::AtomicU16 atomic::AtomicU32 atomic::AtomicU64 atomic::AtomicU8 convert::Infallible convert::TryFrom convert::TryInto iter::from_fn iter::successors num::NonZeroI128 num::NonZeroI16 num::NonZeroI32 num::NonZeroI64 num::NonZeroI8 num::NonZeroIsize slice::sort_by_cached_key str::escape_debug str::escape_default str::escape_unicode str::split_ascii_whitespace std # Instant::checked_add Instant::checked_sub SystemTime::checked_add SystemTime::checked_sub Cargo # You can now use alternative registries to crates.io. Misc # You can now use the ? operator in your documentation tests without manually adding fn main() -\u0026gt; Result\u0026lt;(), _\u0026gt; {}. Compatibility Notes # Command::before_exec is being replaced by the unsafe method Command::pre_exec and will be deprecated with Rust 1.37.0. Use of ATOMIC_{BOOL, ISIZE, USIZE}_INIT is now deprecated as you can now use const functions in static variables. "},{"id":58,"href":"/docs/1.33.0/","title":"1.33.0","section":"Docs","content":" 1.33.0 # Released on: 28 February, 2019 Branched from master on: 11 January, 2019 Language # You can now use the cfg(target_vendor) attribute. E.g. #[cfg(target_vendor=\u0026quot;apple\u0026quot;)] fn main() { println!(\u0026quot;Hello Apple!\u0026quot;); } Integer patterns such as in a match expression can now be exhaustive. E.g. You can have match statement on a u8 that covers 0..=255 and you would no longer be required to have a _ =\u0026gt; unreachable!() case. You can now have multiple patterns in if let and while let expressions. You can do this with the same syntax as a match expression. E.g. enum Creature { Crab(String), Lobster(String), Person(String), } fn main() { let state = Creature::Crab(\u0026#34;Ferris\u0026#34;); if let Creature::Crab(name) | Creature::Person(name) = state { println!(\u0026#34;This creature\u0026#39;s name is: {}\u0026#34;, name); } } You can now have irrefutable if let and while let patterns. Using this feature will by default produce a warning as this behaviour can be unintuitive. E.g. if let _ = 5 {} You can now use let bindings, assignments, expression statements, and irrefutable pattern destructuring in const functions. You can now call unsafe const functions. E.g. const unsafe fn foo() -\u0026gt; i32 { 5 } const fn bar() -\u0026gt; i32 { unsafe { foo() } } You can now specify multiple attributes in a cfg_attr attribute. E.g. #[cfg_attr(all(), must_use, optimize)] You can now specify a specific alignment with the #[repr(packed)] attribute. E.g. #[repr(packed(2))] struct Foo(i16, i32); is a struct with an alignment of 2 bytes and a size of 6 bytes. You can now import an item from a module as an _. This allows you to import a trait\u0026rsquo;s impls, and not have the name in the namespace. E.g. use std::io::Read as _; // Allowed as there is only one `Read` in the module. pub trait Read {} You may now use Rc, Arc, and Pin as method receivers. Compiler # You can now set a linker flavor for rustc with the -Clinker-flavor command line argument. The minimum required LLVM version has been bumped to 6.0. Added support for the PowerPC64 architecture on FreeBSD. The x86_64-fortanix-unknown-sgx target support has been upgraded to tier 2 support. Visit the platform support page for information on Rust\u0026rsquo;s platform support. Added support for the thumbv7neon-linux-androideabi and thumbv7neon-unknown-linux-gnueabihf targets. Added support for the x86_64-unknown-uefi target. Libraries # The methods overflowing_{add, sub, mul, shl, shr} are now const functions for all numeric types. The methods rotate_left, rotate_right, and wrapping_{add, sub, mul, shl, shr} are now const functions for all numeric types. The methods is_positive and is_negative are now const functions for all signed numeric types. The get method for all NonZero types is now const. The methods count_ones, count_zeros, leading_zeros, trailing_zeros, swap_bytes, from_be, from_le, to_be, to_le are now const for all numeric types. Ipv4Addr::new is now a const function Stabilized APIs # unix::FileExt::read_exact_at unix::FileExt::write_all_at Option::transpose Result::transpose convert::identity pin::Pin marker::Unpin marker::PhantomPinned Vec::resize_with VecDeque::resize_with Duration::as_millis Duration::as_micros Duration::as_nanos Cargo # You can now publish crates that require a feature flag to compile with cargo publish --features or cargo publish --all-features. Cargo should now rebuild a crate if a file was modified during the initial build. Compatibility Notes # The methods str::{trim_left, trim_right, trim_left_matches, trim_right_matches} are now deprecated in the standard library, and their usage will now produce a warning. Please use the str::{trim_start, trim_end, trim_start_matches, trim_end_matches} methods instead. The Error::cause method has been deprecated in favor of Error::source which supports downcasting. Libtest no longer creates a new thread for each test when --test-threads=1. It also runs the tests in deterministic order "},{"id":59,"href":"/docs/1.32.0/","title":"1.32.0","section":"Docs","content":" 1.32.0 # Released on: 17 January, 2019 Branched from master on: 30 November, 2018 Language # 2018 edition # You can now use the ? operator in macro definitions. The ? operator allows you to specify zero or one repetitions similar to the * and + operators. Module paths with no leading keyword like super, self, or crate, will now always resolve to the item (enum, struct, etc.) available in the module if present, before resolving to a external crate or an item the prelude. E.g. enum Color { Red, Green, Blue } use Color::*; All editions # You can now match against PhantomData\u0026lt;T\u0026gt; types. You can now match against literals in macros with the literal specifier. This will match against a literal of any type. E.g. 1, 'A', \u0026quot;Hello World\u0026quot; Self can now be used as a constructor and pattern for unit and tuple structs. E.g. struct Point(i32, i32); impl Point { pub fn new(x: i32, y: i32) -\u0026gt; Self { Self(x, y) } pub fn is_origin(\u0026amp;self) -\u0026gt; bool { match self { Self(0, 0) =\u0026gt; true, _ =\u0026gt; false, } } } Self can also now be used in type definitions. E.g. enum List\u0026lt;T\u0026gt; where Self: PartialOrd\u0026lt;Self\u0026gt; // can write `Self` instead of `List\u0026lt;T\u0026gt;` { Nil, Cons(T, Box\u0026lt;Self\u0026gt;) // likewise here } You can now mark traits with #[must_use]. This provides a warning if a impl Trait or dyn Trait is returned and unused in the program. Compiler # The default allocator has changed from jemalloc to the default allocator on your system. The compiler itself on Linux \u0026amp; macOS will still use jemalloc, but programs compiled with it will use the system allocator. Added the aarch64-pc-windows-msvc target. Libraries # PathBuf now implements FromStr. Box\u0026lt;[T]\u0026gt; now implements FromIterator\u0026lt;T\u0026gt;. The dbg! macro has been stabilized. This macro enables you to easily debug expressions in your rust program. E.g. let a = 2; let b = dbg!(a * 2) + 1; // ^-- prints: [src/main.rs:4] a * 2 = 4 assert_eq!(b, 5); The following APIs are now const functions and can be used in a const context.\nCell::as_ptr UnsafeCell::get char::is_ascii iter::empty ManuallyDrop::new ManuallyDrop::into_inner RangeInclusive::start RangeInclusive::end NonNull::as_ptr slice::as_ptr str::as_ptr Duration::as_secs Duration::subsec_millis Duration::subsec_micros Duration::subsec_nanos CStr::as_ptr Ipv4Addr::is_unspecified Ipv6Addr::new Ipv6Addr::octets Stabilized APIs # i8::to_be_bytes i8::to_le_bytes i8::to_ne_bytes i8::from_be_bytes i8::from_le_bytes i8::from_ne_bytes i16::to_be_bytes i16::to_le_bytes i16::to_ne_bytes i16::from_be_bytes i16::from_le_bytes i16::from_ne_bytes i32::to_be_bytes i32::to_le_bytes i32::to_ne_bytes i32::from_be_bytes i32::from_le_bytes i32::from_ne_bytes i64::to_be_bytes i64::to_le_bytes i64::to_ne_bytes i64::from_be_bytes i64::from_le_bytes i64::from_ne_bytes i128::to_be_bytes i128::to_le_bytes i128::to_ne_bytes i128::from_be_bytes i128::from_le_bytes i128::from_ne_bytes isize::to_be_bytes isize::to_le_bytes isize::to_ne_bytes isize::from_be_bytes isize::from_le_bytes isize::from_ne_bytes u8::to_be_bytes u8::to_le_bytes u8::to_ne_bytes u8::from_be_bytes u8::from_le_bytes u8::from_ne_bytes u16::to_be_bytes u16::to_le_bytes u16::to_ne_bytes u16::from_be_bytes u16::from_le_bytes u16::from_ne_bytes u32::to_be_bytes u32::to_le_bytes u32::to_ne_bytes u32::from_be_bytes u32::from_le_bytes u32::from_ne_bytes u64::to_be_bytes u64::to_le_bytes u64::to_ne_bytes u64::from_be_bytes u64::from_le_bytes u64::from_ne_bytes u128::to_be_bytes u128::to_le_bytes u128::to_ne_bytes u128::from_be_bytes u128::from_le_bytes u128::from_ne_bytes usize::to_be_bytes usize::to_le_bytes usize::to_ne_bytes usize::from_be_bytes usize::from_le_bytes usize::from_ne_bytes Cargo # You can now run cargo c as an alias for cargo check. Usernames are now allowed in alt registry URLs. Misc # libproc_macro has been added to the rust-src distribution. Compatibility Notes # The argument types for AVX\u0026rsquo;s _mm256_stream_si256, _mm256_stream_pd, _mm256_stream_ps have been changed from *const to *mut as the previous implementation was unsound. "},{"id":60,"href":"/docs/1.31.1/","title":"1.31.1","section":"Docs","content":" 1.31.1 # Released on: 20 December, 2018 This is a patch release Changes # Fix Rust failing to build on powerpc-unknown-netbsd Fix broken go-to-definition in RLS Fix infinite loop on hover in RLS "},{"id":61,"href":"/docs/1.31.0/","title":"1.31.0","section":"Docs","content":" 1.31.0 # Released on: 6 December, 2018 Branched from master on: 19 October, 2018 Language # 🎉 This version marks the release of the 2018 edition of Rust. 🎉 New lifetime elision rules now allow for eliding lifetimes in functions and impl headers. E.g. impl\u0026lt;'a\u0026gt; Reader for BufReader\u0026lt;'a\u0026gt; {} can now be impl Reader for BufReader\u0026lt;'_\u0026gt; {}. Lifetimes are still required to be defined in structs. You can now define and use const functions. These are currently a strict minimal subset of the const fn RFC. Refer to the language reference for what exactly is available. You can now use tool lints, which allow you to scope lints from external tools using attributes. E.g. #[allow(clippy::filter_map)]. #[no_mangle] and #[export_name] attributes can now be located anywhere in a crate, not just in exported functions. You can now use parentheses in pattern matches. Compiler # Updated musl to 1.1.20 Libraries # You can now convert num::NonZero* types to their raw equivalents using the From trait. E.g. u8 now implements From\u0026lt;NonZeroU8\u0026gt;. You can now convert a \u0026amp;Option\u0026lt;T\u0026gt; into Option\u0026lt;\u0026amp;T\u0026gt; and \u0026amp;mut Option\u0026lt;T\u0026gt; into Option\u0026lt;\u0026amp;mut T\u0026gt; using the From trait. You can now multiply (*) a time::Duration by a u32. Stabilized APIs # slice::align_to slice::align_to_mut slice::chunks_exact slice::chunks_exact_mut slice::rchunks slice::rchunks_mut slice::rchunks_exact slice::rchunks_exact_mut Option::replace Cargo # Cargo will now download crates in parallel using HTTP/2. You can now rename packages in your Cargo.toml We have a guide on how to use the package key in your dependencies. "},{"id":62,"href":"/docs/1.30.1/","title":"1.30.1","section":"Docs","content":" 1.30.1 # Released on: 8 November, 2018 This is a patch release Changes # Fixed overflow ICE in rustdoc Cap Cargo progress bar width at 60 in MSYS terminals "},{"id":63,"href":"/docs/1.30.0/","title":"1.30.0","section":"Docs","content":" 1.30.0 # Released on: 25 October, 2018 Branched from master on: 7 September, 2018 Language # Procedural macros are now available. These kinds of macros allow for more powerful code generation. There is a new chapter available in the Rust Programming Language book that goes further in depth. You can now use keywords as identifiers using the raw identifiers syntax (r#), e.g. let r#for = true; Using anonymous parameters in traits is now deprecated with a warning and will be a hard error in the 2018 edition. You can now use crate in paths. This allows you to refer to the crate root in the path, e.g. use crate::foo; refers to foo in src/lib.rs. Using a external crate no longer requires being prefixed with ::. Previously, using a external crate in a module without a use statement required let json = ::serde_json::from_str(foo); but can now be written as let json = serde_json::from_str(foo);. You can now apply the #[used] attribute to static items to prevent the compiler from optimising them away, even if they appear to be unused, e.g. #[used] static FOO: u32 = 1; You can now import and reexport macros from other crates with the use syntax. Macros exported with #[macro_export] are now placed into the root module of the crate. If your macro relies on calling other local macros, it is recommended to export with the #[macro_export(local_inner_macros)] attribute so users won\u0026rsquo;t have to import those macros. You can now catch visibility keywords (e.g. pub, pub(crate)) in macros using the vis specifier. Non-macro attributes now allow all forms of literals, not just strings. Previously, you would write #[attr(\u0026quot;true\u0026quot;)], and you can now write #[attr(true)]. You can now specify a function to handle a panic in the Rust runtime with the #[panic_handler] attribute. Compiler # Added the riscv32imc-unknown-none-elf target. Added the aarch64-unknown-netbsd target Upgraded to LLVM 8. Libraries # ManuallyDrop now allows the inner type to be unsized. Stabilized APIs # Ipv4Addr::BROADCAST\nIpv4Addr::LOCALHOST\nIpv4Addr::UNSPECIFIED\nIpv6Addr::LOCALHOST\nIpv6Addr::UNSPECIFIED\nIterator::find_map\nThe following methods are replacement methods for trim_left, trim_right, trim_left_matches, and trim_right_matches, which will be deprecated in 1.33.0:\nstr::trim_end_matches\nstr::trim_end\nstr::trim_start_matches\nstr::trim_start\nCargo # cargo run doesn\u0026rsquo;t require specifying a package in workspaces. cargo doc now supports --message-format=json. This is equivalent to calling rustdoc --error-format=json. Cargo will now provide a progress bar for builds. Misc # rustdoc allows you to specify what edition to treat your code as with the --edition option. rustdoc now has the --color (specify whether to output color) and --error-format (specify error format, e.g. json) options. We now distribute a rust-gdbgui script that invokes gdbgui with Rust debug symbols. Attributes from Rust tools such as rustfmt or clippy are now available, e.g. #[rustfmt::skip] will skip formatting the next item. "},{"id":64,"href":"/docs/1.29.2/","title":"1.29.2","section":"Docs","content":" 1.29.2 # Released on: 11 October, 2018 This is a patch release Changes # Workaround for an aliasing-related LLVM bug, which caused miscompilation. The rls-preview component on the windows-gnu targets has been restored. "},{"id":65,"href":"/docs/1.29.1/","title":"1.29.1","section":"Docs","content":" 1.29.1 # Released on: 25 September, 2018 This is a patch release Security Notes # The standard library\u0026rsquo;s str::repeat function contained an out of bounds write caused by an integer overflow. This has been fixed by deterministically panicking when an overflow happens.\nThank you to Scott McMurray for responsibly disclosing this vulnerability to us.\n"},{"id":66,"href":"/docs/1.29.0/","title":"1.29.0","section":"Docs","content":" 1.29.0 # Released on: 13 September, 2018 Branched from master on: 27 July, 2018 Compiler # Bumped minimum LLVM version to 5.0. Added powerpc64le-unknown-linux-musl target. Added aarch64-unknown-hermit and x86_64-unknown-hermit targets. Upgraded to LLVM 7. Libraries # Once::call_once no longer requires Once to be 'static. BuildHasherDefault now implements PartialEq and Eq. Box\u0026lt;CStr\u0026gt;, Box\u0026lt;OsStr\u0026gt;, and Box\u0026lt;Path\u0026gt; now implement Clone. Implemented PartialEq\u0026lt;\u0026amp;str\u0026gt; for OsString and PartialEq\u0026lt;OsString\u0026gt; for \u0026amp;str. Cell\u0026lt;T\u0026gt; now allows T to be unsized. SocketAddr is now stable on Redox. Stabilized APIs # Arc::downcast Iterator::flatten Rc::downcast Cargo # Cargo can silently fix some bad lockfiles. You can use --locked to disable this behavior. cargo-install will now allow you to cross compile an install using --target. Added the cargo-fix subcommand to automatically move project code from 2015 edition to 2018. cargo doc can now optionally document private types using the --document-private-items flag. Misc # rustdoc now has the --cap-lints option which demotes all lints above the specified level to that level. For example --cap-lints warn will demote deny and forbid lints to warn. rustc and rustdoc will now have the exit code of 1 if compilation fails and 101 if there is a panic. A preview of clippy has been made available through rustup. You can install the preview with rustup component add clippy-preview. Compatibility Notes # str::{slice_unchecked, slice_unchecked_mut} are now deprecated. Use str::get_unchecked(begin..end) instead. std::env::home_dir is now deprecated for its unintuitive behavior. Consider using the home_dir function from https://crates.io/crates/dirs instead. rustc will no longer silently ignore invalid data in target spec. cfg attributes and --cfg command line flags are now more strictly validated. "},{"id":67,"href":"/docs/1.28.0/","title":"1.28.0","section":"Docs","content":" 1.28.0 # Released on: 2 August, 2018 Branched from master on: 15 June, 2018 Language # The #[repr(transparent)] attribute is now stable. This attribute allows a Rust newtype wrapper (struct NewType\u0026lt;T\u0026gt;(T);) to be represented as the inner type across Foreign Function Interface (FFI) boundaries. The keywords pure, sizeof, alignof, and offsetof have been unreserved and can now be used as identifiers. The GlobalAlloc trait and #[global_allocator] attribute are now stable. This will allow users to specify a global allocator for their program. Unit test functions marked with the #[test] attribute can now return Result\u0026lt;(), E: Debug\u0026gt; in addition to (). The lifetime specifier for macro_rules! is now stable. This allows macros to easily target lifetimes. Compiler # The s and z optimisation levels are now stable. These optimisations prioritise making smaller binary sizes. z is the same as s with the exception that it does not vectorise loops, which typically results in an even smaller binary. The short error format is now stable. Specified with --error-format=short this option will provide a more compressed output of rust error messages. Added a lint warning when you have duplicated macro_exports. Reduced the number of allocations in the macro parser. This can improve compile times of macro heavy crates on average by 5%. Libraries # Implemented Default for \u0026amp;mut str. Implemented From\u0026lt;bool\u0026gt; for all integer and unsigned number types. Implemented Extend for (). The Debug implementation of time::Duration should now be more easily human readable. Previously a Duration of one second would printed as Duration { secs: 1, nanos: 0 } and will now be printed as 1s. Implemented From\u0026lt;\u0026amp;String\u0026gt; for Cow\u0026lt;str\u0026gt;, From\u0026lt;\u0026amp;Vec\u0026lt;T\u0026gt;\u0026gt; for Cow\u0026lt;[T]\u0026gt;, From\u0026lt;Cow\u0026lt;CStr\u0026gt;\u0026gt; for CString, From\u0026lt;CString\u0026gt;, From\u0026lt;CStr\u0026gt;, From\u0026lt;\u0026amp;CString\u0026gt; for Cow\u0026lt;CStr\u0026gt;, From\u0026lt;OsString\u0026gt;, From\u0026lt;OsStr\u0026gt;, From\u0026lt;\u0026amp;OsString\u0026gt; for Cow\u0026lt;OsStr\u0026gt;, From\u0026lt;\u0026amp;PathBuf\u0026gt; for Cow\u0026lt;Path\u0026gt;, and From\u0026lt;Cow\u0026lt;Path\u0026gt;\u0026gt; for PathBuf. Implemented Shl and Shr for Wrapping\u0026lt;u128\u0026gt; and Wrapping\u0026lt;i128\u0026gt;. DirEntry::metadata now uses fstatat instead of lstat when possible. This can provide up to a 40% speed increase. Improved error messages when using format!. Stabilized APIs # Iterator::step_by Path::ancestors SystemTime::UNIX_EPOCH alloc::GlobalAlloc alloc::Layout alloc::LayoutErr alloc::System alloc::alloc alloc::alloc_zeroed alloc::dealloc alloc::realloc alloc::handle_alloc_error btree_map::Entry::or_default fmt::Alignment hash_map::Entry::or_default iter::repeat_with num::NonZeroUsize num::NonZeroU128 num::NonZeroU16 num::NonZeroU32 num::NonZeroU64 num::NonZeroU8 ops::RangeBounds slice::SliceIndex slice::from_mut slice::from_ref {Any + Send + Sync}::downcast_mut {Any + Send + Sync}::downcast_ref {Any + Send + Sync}::is Cargo # Cargo will now no longer allow you to publish crates with build scripts that modify the src directory. The src directory in a crate should be considered to be immutable. Misc # The suggestion_applicability field in rustc\u0026rsquo;s json output is now stable. This will allow dev tools to check whether a code suggestion would apply to them. Compatibility Notes # Rust will consider trait objects with duplicated constraints to be the same type as without the duplicated constraint. For example the below code will now fail to compile. trait Trait {} impl Trait + Send { fn test(\u0026amp;self) { println!(\u0026#34;one\u0026#34;); } //~ ERROR duplicate definitions with name `test` } impl Trait + Send + Send { fn test(\u0026amp;self) { println!(\u0026#34;two\u0026#34;); } } "},{"id":68,"href":"/docs/1.27.2/","title":"1.27.2","section":"Docs","content":" 1.27.2 # Released on: 20 July, 2018 This is a patch release Compatibility Notes # The borrow checker was fixed to avoid potential unsoundness when using match ergonomics: #52213. "},{"id":69,"href":"/docs/1.27.1/","title":"1.27.1","section":"Docs","content":" 1.27.1 # Released on: 10 July, 2018 This is a patch release Security Notes # rustdoc would execute plugins in the /tmp/rustdoc/plugins directory when running, which enabled executing code as some other user on a given machine. This release fixes that vulnerability; you can read more about this on the blog. The associated CVE is CVE-2018-1000622.\nThank you to Red Hat for responsibly disclosing this vulnerability to us.\nCompatibility Notes # The borrow checker was fixed to avoid an additional potential unsoundness when using match ergonomics: #51415, #49534. "},{"id":70,"href":"/docs/1.27.0/","title":"1.27.0","section":"Docs","content":" 1.27.0 # Released on: 21 June, 2018 Branched from master on: 4 May, 2018 Language # Removed \u0026lsquo;proc\u0026rsquo; from the reserved keywords list. This allows proc to be used as an identifier. The dyn syntax is now available. This syntax is equivalent to the bare Trait syntax, and should make it clearer when being used in tandem with impl Trait because it is equivalent to the following syntax: \u0026amp;Trait == \u0026amp;dyn Trait, \u0026amp;mut Trait == \u0026amp;mut dyn Trait, and Box\u0026lt;Trait\u0026gt; == Box\u0026lt;dyn Trait\u0026gt;. Attributes on generic parameters such as types and lifetimes are now stable. e.g. fn foo\u0026lt;#[lifetime_attr] 'a, #[type_attr] T: 'a\u0026gt;() {} The #[must_use] attribute can now also be used on functions as well as types. It provides a lint that by default warns users when the value returned by a function has not been used. Compiler # Added the armv5te-unknown-linux-musleabi target. Libraries # SIMD (Single Instruction Multiple Data) on x86/x86_64 is now stable. This includes arch::x86 \u0026amp; arch::x86_64 modules which contain SIMD intrinsics, a new macro called is_x86_feature_detected!, the #[target_feature(enable=\u0026quot;\u0026quot;)] attribute, and adding target_feature = \u0026quot;\u0026quot; to the cfg attribute. A lot of methods for [u8], f32, and f64 previously only available in std are now available in core. The generic Rhs type parameter on ops::{Shl, ShlAssign, Shr} now defaults to Self. std::str::replace now has the #[must_use] attribute to clarify that the operation isn\u0026rsquo;t done in place. Clone::clone, Iterator::collect, and ToOwned::to_owned now have the #[must_use] attribute to warn about unused potentially expensive allocations. Stabilized APIs # DoubleEndedIterator::rfind DoubleEndedIterator::rfold DoubleEndedIterator::try_rfold Duration::from_micros Duration::from_nanos Duration::subsec_micros Duration::subsec_millis HashMap::remove_entry Iterator::try_fold Iterator::try_for_each NonNull::cast Option::filter String::replace_range Take::set_limit hint::unreachable_unchecked os::unix::process::parent_id ptr::swap_nonoverlapping slice::rsplit_mut slice::rsplit slice::swap_with_slice Cargo # cargo-metadata now includes authors, categories, keywords, readme, and repository fields. cargo-metadata now includes a package\u0026rsquo;s metadata table. Added the --target-dir optional argument. This allows you to specify a different directory than target for placing compilation artifacts. Cargo will be adding automatic target inference for binaries, benchmarks, examples, and tests in the Rust 2018 edition. If your project specifies specific targets, e.g. using [[bin]], and have other binaries in locations where cargo would infer a binary, Cargo will produce a warning. You can disable this feature ahead of time by setting any of the following to false: autobins, autobenches, autoexamples, autotests. Cargo will now cache compiler information. This can be disabled by setting CARGO_CACHE_RUSTC_INFO=0 in your environment. Misc # Added “The Rustc book” into the official documentation. “The Rustc book” documents and teaches how to use the rustc compiler. All books available on doc.rust-lang.org are now searchable. Compatibility Notes # Calling a CharExt or StrExt method directly on core will no longer work. e.g. ::core::prelude::v1::StrExt::is_empty(\u0026quot;\u0026quot;) will not compile, \u0026quot;\u0026quot;.is_empty() will still compile. Debug output on atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize} will only print the inner type. E.g. print!(\u0026quot;{:?}\u0026quot;, AtomicBool::new(true)) will print true, not AtomicBool(true). The maximum number for repr(align(N)) is now 2²⁹. Previously you could enter higher numbers but they were not supported by LLVM. Up to 512MB alignment should cover all use cases. The .description() method on the std::error::Error trait has been soft-deprecated. It is no longer required to implement it. "},{"id":71,"href":"/docs/1.26.2/","title":"1.26.2","section":"Docs","content":" 1.26.2 # Released on: 5 June, 2018 This is a patch release Compatibility Notes # The borrow checker was fixed to avoid unsoundness when using match ergonomics. "},{"id":72,"href":"/docs/1.26.1/","title":"1.26.1","section":"Docs","content":" 1.26.1 # Released on: 29 May, 2018 This is a patch release Tools # RLS now works on Windows. Rustfmt stopped badly formatting text in some cases. Compatibility Notes # fn main() -\u0026gt; impl Trait no longer works for non-Termination trait. This reverts an accidental stabilization. NaN \u0026gt; NaN no longer returns true in const-fn contexts. Prohibit using turbofish for impl Trait in method arguments. "},{"id":73,"href":"/docs/1.26.0/","title":"1.26.0","section":"Docs","content":" 1.26.0 # Released on: 10 May, 2018 Branched from master on: 23 March, 2018 Language # Closures now implement Copy and/or Clone if all captured variables implement either or both traits. The inclusive range syntax e.g. for x in 0..=10 is now stable. The '_ lifetime is now stable. The underscore lifetime can be used anywhere a lifetime can be elided. impl Trait is now stable allowing you to have abstract types in returns or in function parameters. E.g. fn foo() -\u0026gt; impl Iterator\u0026lt;Item=u8\u0026gt; or fn open(path: impl AsRef\u0026lt;Path\u0026gt;). Pattern matching will now automatically apply dereferences. 128-bit integers in the form of u128 and i128 are now stable. main can now return Result\u0026lt;(), E: Debug\u0026gt; in addition to (). A lot of operations are now available in a const context. E.g. You can now index into constant arrays, reference and dereference into constants, and use tuple struct constructors. Fixed entry slice patterns are now stable. E.g. let points = [1, 2, 3, 4]; match points { [1, 2, 3, 4] =\u0026gt; println!(\u0026#34;All points were sequential.\u0026#34;), _ =\u0026gt; println!(\u0026#34;Not all points were sequential.\u0026#34;), } Compiler # LLD is now used as the default linker for wasm32-unknown-unknown. Fixed exponential projection complexity on nested types. This can provide up to a ~12% reduction in compile times for certain crates. Added the --remap-path-prefix option to rustc. Allowing you to remap path prefixes outputted by the compiler. Added powerpc-unknown-netbsd target. Libraries # Implemented From\u0026lt;u16\u0026gt; for usize \u0026amp; From\u0026lt;{u8, i16}\u0026gt; for isize. Added hexadecimal formatting for integers with fmt::Debug e.g. assert!(format!(\u0026quot;{:02x?}\u0026quot;, b\u0026quot;Foo\\0\u0026quot;) == \u0026quot;[46, 6f, 6f, 00]\u0026quot;) Implemented Default, Hash for cmp::Reverse. Optimized str::repeat being 8x faster in large cases. ascii::escape_default is now available in libcore. Trailing commas are now supported in std and core macros. Implemented Copy, Clone for cmp::Reverse Implemented Clone for char::{ToLowercase, ToUppercase}. Stabilized APIs # *const T::add *const T::copy_to_nonoverlapping *const T::copy_to *const T::read_unaligned *const T::read_volatile *const T::read *const T::sub *const T::wrapping_add *const T::wrapping_sub *mut T::add *mut T::copy_to_nonoverlapping *mut T::copy_to *mut T::read_unaligned *mut T::read_volatile *mut T::read *mut T::replace *mut T::sub *mut T::swap *mut T::wrapping_add *mut T::wrapping_sub *mut T::write_bytes *mut T::write_unaligned *mut T::write_volatile *mut T::write Box::leak FromUtf8Error::as_bytes LocalKey::try_with Option::cloned btree_map::Entry::and_modify fs::read_to_string fs::read fs::write hash_map::Entry::and_modify iter::FusedIterator ops::RangeInclusive ops::RangeToInclusive process::id slice::rotate_left slice::rotate_right String::retain Cargo # Cargo will now output path to custom commands when -v is passed with --list The Cargo binary version is now the same as the Rust version Misc # The second edition of \u0026ldquo;The Rust Programming Language\u0026rdquo; book is now recommended over the first. Compatibility Notes # aliasing a Fn trait as dyn no longer works. E.g. the following syntax is now invalid. use std::ops::Fn as dyn; fn g(_: Box\u0026lt;dyn(std::fmt::Debug)\u0026gt;) {} The result of dereferences are no longer promoted to 'static. e.g. fn main() { const PAIR: \u0026amp;(i32, i32) = \u0026amp;(0, 1); let _reversed_pair: \u0026amp;\u0026#39;static _ = \u0026amp;(PAIR.1, PAIR.0); // Doesn\u0026#39;t work } Deprecate AsciiExt trait in favor of inherent methods. \u0026quot;.e0\u0026quot; will now no longer parse as 0.0 and will instead cause an error. Removed hoedown from rustdoc. Bounds on higher-kinded lifetimes a hard error. "},{"id":74,"href":"/docs/1.25.0/","title":"1.25.0","section":"Docs","content":" 1.25.0 # Released on: 29 March, 2018 Branched from master on: 9 February, 2018 Language # The #[repr(align(x))] attribute is now stable. RFC 1358 You can now use nested groups of imports. e.g. use std::{fs::File, io::Read, path::{Path, PathBuf}}; You can now have | at the start of a match arm. e.g. enum Foo { A, B, C } fn main() { let x = Foo::A; match x { | Foo::A | Foo::B =\u0026gt; println!(\u0026#34;AB\u0026#34;), | Foo::C =\u0026gt; println!(\u0026#34;C\u0026#34;), } } Compiler # Upgraded to LLVM 6. Added -C lto=val option. Added i586-unknown-linux-musl target Libraries # Impl Send for process::Command on Unix. Impl PartialEq and Eq for ParseCharError. UnsafeCell::into_inner is now safe. Implement libstd for CloudABI. Float::{from_bits, to_bits} is now available in libcore. Implement AsRef\u0026lt;Path\u0026gt; for Component Implemented Write for Cursor\u0026lt;\u0026amp;mut Vec\u0026lt;u8\u0026gt;\u0026gt; Moved Duration to libcore. Stabilized APIs # Location::column ptr::NonNull The following functions can now be used in a constant expression. eg. static MINUTE: Duration = Duration::from_secs(60);\nDuration::new Duration::from_secs Duration::from_millis Cargo # cargo new no longer removes rust or rs prefixes/suffixes. cargo new now defaults to creating a binary crate, instead of a library crate. Misc # Rust by example is now shipped with new releases Compatibility Notes # Deprecated net::lookup_host. rustdoc has switched to pulldown as the default markdown renderer. The borrow checker was sometimes incorrectly permitting overlapping borrows around indexing operations (see #47349). This has been fixed (which also enabled some correct code that used to cause errors (e.g. #33903 and #46095). Removed deprecated unstable attribute #[simd]. "},{"id":75,"href":"/docs/1.24.1/","title":"1.24.1","section":"Docs","content":" 1.24.1 # Released on: 1 March, 2018 This is a patch release Changes # Do not abort when unwinding through FFI Emit UTF-16 files for linker arguments on Windows Make the error index generator work again Cargo will warn on Windows 7 if an update is needed. "},{"id":76,"href":"/docs/1.24.0/","title":"1.24.0","section":"Docs","content":" 1.24.0 # Released on: 15 February, 2018 Branched from master on: 29 December, 2017 Language # External sysv64 ffi is now available. eg. extern \u0026quot;sysv64\u0026quot; fn foo () {} Compiler # rustc now uses 16 codegen units by default for release builds. For the fastest builds, utilize codegen-units=1. Added armv4t-unknown-linux-gnueabi target. Add aarch64-unknown-openbsd support Libraries # str::find::\u0026lt;char\u0026gt; now uses memchr. This should lead to a 10x improvement in performance in the majority of cases. OsStr\u0026rsquo;s Debug implementation is now lossless and consistent with Windows. time::{SystemTime, Instant} now implement Hash. impl From\u0026lt;bool\u0026gt; for AtomicBool impl From\u0026lt;{CString, \u0026amp;CStr}\u0026gt; for {Arc\u0026lt;CStr\u0026gt;, Rc\u0026lt;CStr\u0026gt;} impl From\u0026lt;{OsString, \u0026amp;OsStr}\u0026gt; for {Arc\u0026lt;OsStr\u0026gt;, Rc\u0026lt;OsStr\u0026gt;} impl From\u0026lt;{PathBuf, \u0026amp;Path}\u0026gt; for {Arc\u0026lt;Path\u0026gt;, Rc\u0026lt;Path\u0026gt;} float::from_bits now just uses transmute. This provides some optimisations from LLVM. Copied AsciiExt methods onto char Remove T: Sized requirement on ptr::is_null() impl From\u0026lt;RecvError\u0026gt; for {TryRecvError, RecvTimeoutError} Optimised f32::{min, max} to generate more efficient x86 assembly [u8]::contains now uses memchr which provides a 3x speed improvement Stabilized APIs # RefCell::replace RefCell::swap atomic::spin_loop_hint The following functions can now be used in a constant expression. eg. let buffer: [u8; size_of::\u0026lt;usize\u0026gt;()];, static COUNTER: AtomicUsize = AtomicUsize::new(1);\nAtomicBool::new AtomicUsize::new AtomicIsize::new AtomicPtr::new Cell::new {integer}::min_value {integer}::max_value mem::size_of mem::align_of ptr::null ptr::null_mut RefCell::new UnsafeCell::new Cargo # Added a workspace.default-members config that overrides implied --all in virtual workspaces. Enable incremental by default on development builds. Also added configuration keys to Cargo.toml and .cargo/config to disable on a per-project or global basis respectively. Misc # Compatibility Notes # Floating point types Debug impl now always prints a decimal point. Ipv6Addr now rejects superfluous ::\u0026rsquo;s in IPv6 addresses This is in accordance with IETF RFC 4291 §2.2. Unwinding will no longer go past FFI boundaries, and will instead abort. Formatter::flags method is now deprecated. The sign_plus, sign_minus, alternate, and sign_aware_zero_pad should be used instead. Leading zeros in tuple struct members is now an error column!() macro is one-based instead of zero-based fmt::Arguments can no longer be shared across threads Access to #[repr(packed)] struct fields is now unsafe Cargo sets a different working directory for the compiler "},{"id":77,"href":"/docs/1.23.0/","title":"1.23.0","section":"Docs","content":" 1.23.0 # Released on: 4 January, 2018 Branched from master on: 17 November, 2017 Language # Arbitrary auto traits are now permitted in trait objects. rustc now uses subtyping on the left hand side of binary operations. Which should fix some confusing errors in some operations. Compiler # Enabled TrapUnreachable in LLVM which should mitigate the impact of undefined behavior. rustc now suggests renaming import if names clash. Display errors/warnings correctly when there are zero-width or wide characters. rustc now avoids unnecessary copies of arguments that are simple bindings This should improve memory usage on average by 5-10%. Updated musl used to build musl rustc to 1.1.17 Libraries # Allow a trailing comma in assert_eq/ne macro Implement Hash for raw pointers to unsized types impl From\u0026lt;*mut T\u0026gt; for AtomicPtr\u0026lt;T\u0026gt; impl From\u0026lt;usize/isize\u0026gt; for AtomicUsize/AtomicIsize. Removed the T: Sync requirement for RwLock\u0026lt;T\u0026gt;: Send Removed T: Sized requirement for {\u0026lt;*const T\u0026gt;, \u0026lt;*mut T\u0026gt;}::as_ref and \u0026lt;*mut T\u0026gt;::as_mut Optimized Thread::{park, unpark} implementation Improved SliceExt::binary_search performance. impl FromIterator\u0026lt;()\u0026gt; for () Copied AsciiExt trait methods to primitive types. Use of AsciiExt is now deprecated. Stabilized APIs # Cargo # Cargo now supports uninstallation of multiple packages eg. cargo uninstall foo bar uninstalls foo and bar. Added unit test checking to cargo check Cargo now lets you install a specific version using cargo install --version Misc # Releases now ship with the Cargo book documentation. rustdoc now prints rendering warnings on every run. Compatibility Notes # Changes have been made to type equality to make it more correct, in rare cases this could break some code. Tracking issue for further information char::escape_debug now uses Unicode 10 over 9. Upgraded Android SDK to 27, and NDK to r15c. This drops support for Android 9, the minimum supported version is Android 14. Bumped the minimum LLVM to 3.9 "},{"id":78,"href":"/docs/1.22.1/","title":"1.22.1","section":"Docs","content":" 1.22.1 # Released on: 22 November, 2017 This is a patch release Changes # Update Cargo to fix an issue with macOS 10.13 \u0026ldquo;High Sierra\u0026rdquo; "},{"id":79,"href":"/docs/1.22.0/","title":"1.22.0","section":"Docs","content":" 1.22.0 # Released on: 22 November, 2017 Branched from master on: 6 October, 2017 Language # non_snake_case lint now allows extern no-mangle functions Now accepts underscores in unicode escapes T op= \u0026amp;T now works for numeric types. eg. let mut x = 2; x += \u0026amp;8; types that impl Drop are now allowed in const and static types Compiler # rustc now defaults to having 16 codegen units at debug on supported platforms. rustc will no longer inline in codegen units when compiling for debug This should decrease compile times for debug builds. strict memory alignment now enabled on ARMv6 Remove support for the PNaCl target le32-unknown-nacl Libraries # Allow atomic operations up to 32 bits on armv5te_unknown_linux_gnueabi Box\u0026lt;Error\u0026gt; now impls From\u0026lt;Cow\u0026lt;str\u0026gt;\u0026gt; std::mem::Discriminant is now guaranteed to be Send + Sync fs::copy now returns the length of the main stream on NTFS. Properly detect overflow in Instant += Duration. impl Hasher for {\u0026amp;mut Hasher, Box\u0026lt;Hasher\u0026gt;} impl fmt::Debug for SplitWhitespace. Option\u0026lt;T\u0026gt; now impls Try This allows for using ? with Option types. Stabilized APIs # Cargo # Cargo will now build multi file examples in subdirectories of the examples folder that have a main.rs file. Changed [root] to [package] in Cargo.lock Packages with the old format will continue to work and can be updated with cargo update. Now supports vendoring git repositories Misc # libbacktrace is now available on Apple platforms. Stabilised the compile_fail attribute for code fences in doc-comments. This now lets you specify that a given code example will fail to compile. Compatibility Notes # The minimum Android version that rustc can build for has been bumped to 4.0 from 2.3 Allowing T op= \u0026amp;T for numeric types has broken some type inference cases "},{"id":80,"href":"/docs/1.21.0/","title":"1.21.0","section":"Docs","content":" 1.21.0 # Released on: 12 October, 2017 Branched from master on: 25 August, 2017 Language # You can now use static references for literals. Example: fn main() { let x: \u0026amp;\u0026#39;static u32 = \u0026amp;0; } Relaxed path syntax. Optional :: before \u0026lt; is now allowed in all contexts. Example: my_macro!(Vec\u0026lt;i32\u0026gt;::new); // Always worked my_macro!(Vec::\u0026lt;i32\u0026gt;::new); // Now works Compiler # Upgraded jemalloc to 4.5.0 Enabled unwinding panics on Redox Now runs LLVM in parallel during translation phase. This should reduce peak memory usage. Libraries # Generate builtin impls for Clone for all arrays and tuples that are T: Clone Stdin, Stdout, and Stderr now implement AsRawFd. Rc and Arc now implement From\u0026lt;\u0026amp;[T]\u0026gt; where T: Clone, From\u0026lt;str\u0026gt;, From\u0026lt;String\u0026gt;, From\u0026lt;Box\u0026lt;T\u0026gt;\u0026gt; where T: ?Sized, and From\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt;. Stabilized APIs # std::mem::discriminant\nCargo # You can now call cargo install with multiple package names Cargo commands inside a virtual workspace will now implicitly pass --all Added a [patch] section to Cargo.toml to handle prepublication dependencies RFC 1969 include \u0026amp; exclude fields in Cargo.toml now accept gitignore like patterns Added the --all-targets option Using required dependencies as a feature is now deprecated and emits a warning Misc # Cargo docs are moving to doc.rust-lang.org/cargo The rustdoc book is now available at doc.rust-lang.org/rustdoc Added a preview of RLS has been made available through rustup Install with rustup component add rls-preview std::os documentation for Unix, Linux, and Windows now appears on doc.rust-lang.org Previously only showed std::os::unix. Compatibility Notes # Changes in method matching against higher-ranked types This may cause breakage in subtyping corner cases. A more in-depth explanation is available. rustc\u0026rsquo;s JSON error output\u0026rsquo;s byte position start at top of file. Was previously relative to the rustc\u0026rsquo;s internal CodeMap struct which required the unstable library libsyntax to correctly use. unused_results lint no longer ignores booleans "},{"id":81,"href":"/docs/1.20.0/","title":"1.20.0","section":"Docs","content":" 1.20.0 # Released on: 31 August, 2017 Branched from master on: 14 July, 2017 Language # Associated constants are now stabilised. A lot of macro bugs are now fixed. Compiler # Struct fields are now properly coerced to the expected field type. Enabled wasm LLVM backend WASM can now be built with the wasm32-experimental-emscripten target. Changed some of the error messages to be more helpful. Add support for RELRO(RELocation Read-Only) for platforms that support it. rustc now reports the total number of errors on compilation failure previously this was only the number of errors in the pass that failed. Expansion in rustc has been sped up 29x. added msp430-none-elf target. rustc will now suggest one-argument enum variant to fix type mismatch when applicable Fixes backtraces on Redox rustc now identifies different versions of same crate when absolute paths of different types match in an error message. Libraries # Relaxed Debug constraints on {HashMap,BTreeMap}::{Keys,Values}. Impl PartialEq, Eq, PartialOrd, Ord, Debug, Hash for unsized tuples. Impl fmt::{Display, Debug} for Ref, RefMut, MutexGuard, RwLockReadGuard, RwLockWriteGuard Impl Clone for DefaultHasher. Impl Sync for SyncSender. Impl FromStr for char Fixed how {f32, f64}::{is_sign_negative, is_sign_positive} handles NaN. allow messages in the unimplemented!() macro. ie. unimplemented!(\u0026quot;Waiting for 1.21 to be stable\u0026quot;) pub(restricted) is now supported in the thread_local! macro. Upgrade to Unicode 10.0.0 Reimplemented {f32, f64}::{min, max} in Rust instead of using CMath. Skip the main thread\u0026rsquo;s manual stack guard on Linux Iterator::nth for ops::{Range, RangeFrom} is now done in O(1) time #[repr(align(N))] attribute max number is now 2^31 - 1. This was previously 2^15. {OsStr, Path}::Display now avoids allocations where possible Stabilized APIs # CStr::into_c_string CString::as_c_str CString::into_boxed_c_str Chain::get_mut Chain::get_ref Chain::into_inner Option::get_or_insert_with Option::get_or_insert OsStr::into_os_string OsString::into_boxed_os_str Take::get_mut Take::get_ref Utf8Error::error_len char::EscapeDebug char::escape_debug compile_error! f32::from_bits f32::to_bits f64::from_bits f64::to_bits mem::ManuallyDrop slice::sort_unstable_by_key slice::sort_unstable_by slice::sort_unstable str::from_boxed_utf8_unchecked str::as_bytes_mut str::as_bytes_mut str::from_utf8_mut str::from_utf8_unchecked_mut str::get_mut str::get_unchecked_mut str::get_unchecked str::get str::into_boxed_bytes Cargo # Cargo API token location moved from ~/.cargo/config to ~/.cargo/credentials. Cargo will now build main.rs binaries that are in sub-directories of src/bin. ie. Having src/bin/server/main.rs and src/bin/client/main.rs generates target/debug/server and target/debug/client You can now specify version of a binary when installed through cargo install using --vers. Added --no-fail-fast flag to cargo to run all benchmarks regardless of failure. Changed the convention around which file is the crate root. Compatibility Notes # Functions with 'static in their return types will now not be as usable as if they were using lifetime parameters instead. The reimplementation of {f32, f64}::is_sign_{negative, positive} now takes the sign of NaN into account where previously didn\u0026rsquo;t. "},{"id":82,"href":"/docs/1.19.0/","title":"1.19.0","section":"Docs","content":" 1.19.0 # Released on: 20 July, 2017 Branched from master on: 2 June, 2017 Language # Numeric fields can now be used for creating tuple structs. RFC 1506 For example struct Point(u32, u32); let x = Point { 0: 7, 1: 0 };. Macro recursion limit increased to 1024 from 64. Added lint for detecting unused macros. loop can now return a value with break. RFC 1624 For example: let x = loop { break 7; }; C compatible unions are now available. RFC 1444 They can only contain Copy types and cannot have a Drop implementation. Example: union Foo { bar: u8, baz: usize } Non capturing closures can now be coerced into fns, RFC 1558 Example: let foo: fn(u8) -\u0026gt; u8 = |v: u8| { v }; Compiler # Add support for bootstrapping the Rust compiler toolchain on Android. Change arm-linux-androideabi to correspond to the armeabi official ABI. If you wish to continue targeting the armeabi-v7a ABI you should use --target armv7-linux-androideabi. Fixed ICE when removing a source file between compilation sessions. Minor optimisation of string operations. Compiler error message is now aborting due to previous error(s) instead of aborting due to N previous errors This was previously inaccurate and would only count certain kinds of errors. The compiler now supports Visual Studio 2017 The compiler is now built against LLVM 4.0.1 by default Added a lot of new error codes Added target-feature=+crt-static option RFC 1721 Which allows libraries with C Run-time Libraries(CRT) to be statically linked. Fixed various ARM codegen bugs Libraries # String now implements FromIterator\u0026lt;Cow\u0026lt;'a, str\u0026gt;\u0026gt; and Extend\u0026lt;Cow\u0026lt;'a, str\u0026gt;\u0026gt; Vec now implements From\u0026lt;\u0026amp;mut [T]\u0026gt; Box\u0026lt;[u8]\u0026gt; now implements From\u0026lt;Box\u0026lt;str\u0026gt;\u0026gt; SplitWhitespace now implements Clone [u8]::reverse is now 5x faster and [u16]::reverse is now 1.5x faster eprint! and eprintln! macros added to prelude. Same as the print! macros, but for printing to stderr. Stabilized APIs # OsString::shrink_to_fit cmp::Reverse Command::envs thread::ThreadId Cargo # Build scripts can now add environment variables to the environment the crate is being compiled in. Example: println!(\u0026quot;cargo:rustc-env=FOO=bar\u0026quot;); Subcommands now replace the current process rather than spawning a new child process Workspace members can now accept glob file patterns Added --all flag to the cargo bench subcommand to run benchmarks of all the members in a given workspace. Updated libssh2-sys to 0.2.6 Target directory path is now in the cargo metadata Cargo no longer checks out a local working directory for the crates.io index This should provide smaller file size for the registry, and improve cloning times, especially on Windows machines. Added an --exclude option for excluding certain packages when using the --all option Cargo will now automatically retry when receiving a 5xx error from crates.io The --features option now accepts multiple comma or space delimited values. Added support for custom target specific runners Misc # Added rust-windbg.cmd for loading rust .natvis files in the Windows Debugger. Rust will now release XZ compressed packages rustup will now prefer to download rust packages with XZ compression over GZip packages. Added the ability to escape # in rust documentation By adding additional #\u0026rsquo;s ie. ## is now # Compatibility Notes # MutexGuard\u0026lt;T\u0026gt; may only be Sync if T is Sync. -Z flags are now no longer allowed to be used on the stable compiler. This has been a warning for a year previous to this. As a result of the -Z flag change, the cargo-check plugin no longer works. Users should migrate to the built-in check command, which has been available since 1.16. Ending a float literal with ._ is now a hard error. Example: 42._ . Any use of a private extern crate outside of its module is now a hard error. This was previously a warning. use ::self::foo; is now a hard error. self paths are always relative while the :: prefix makes a path absolute, but was ignored and the path was relative regardless. Floating point constants in match patterns is now a hard error This was previously a warning. Struct or enum constants that don\u0026rsquo;t derive PartialEq \u0026amp; Eq used match patterns is now a hard error This was previously a warning. Lifetimes named '_ are no longer allowed. This was previously a warning. From the pound escape, lines consisting of multiple #s are now visible It is an error to re-export private enum variants. This is known to break a number of crates that depend on an older version of mustache. On Windows, if VCINSTALLDIR is set incorrectly, rustc will try to use it to find the linker, and the build will fail where it did not previously "},{"id":83,"href":"/docs/1.18.0/","title":"1.18.0","section":"Docs","content":" 1.18.0 # Released on: 8 June, 2017 Branched from master on: 21 April, 2017 Language # Stabilize pub(restricted) pub can now accept a module path to make the item visible to just that module tree. Also accepts the keyword crate to make something public to the whole crate but not users of the library. Example: pub(crate) mod utils;. RFC 1422. Stabilize #![windows_subsystem] attribute conservative exposure of the /SUBSYSTEM linker flag on Windows platforms. RFC 1665. Refactor of trait object type parsing Now ty in macros can accept types like Write + Send, trailing + are now supported in trait objects, and better error reporting for trait objects starting with ?Sized. 0e+10 is now a valid floating point literal Now warns if you bind a lifetime parameter to \u0026lsquo;static Tuples, Enum variant fields, and structs with no repr attribute or with #[repr(Rust)] are reordered to minimize padding and produce a smaller representation in some cases. Compiler # rustc can now emit mir with --emit mir Improved LLVM IR for trivial functions Added explanation for E0090(Wrong number of lifetimes are supplied) rustc compilation is now 15%-20% faster Thanks to optimisation opportunities found through profiling Improved backtrace formatting when panicking Libraries # Specialized Vec::from_iter being passed vec::IntoIter if the iterator hasn\u0026rsquo;t been advanced the original Vec is reassembled with no actual iteration or reallocation. Simplified HashMap Bucket interface provides performance improvements for iterating and cloning. Specialize Vec::from_elem to use calloc Fixed Race condition in fs::create_dir_all No longer caching stdio on Windows Optimized insertion sort in slice insertion sort in some cases 2.50%~ faster and in one case now 12.50% faster. Optimized AtomicBool::fetch_nand Stabilized APIs # Child::try_wait HashMap::retain HashSet::retain PeekMut::pop TcpStream::peek UdpSocket::peek UdpSocket::peek_from Cargo # Added partial Pijul support Pijul is a version control system in Rust. You can now create new cargo projects with Pijul using cargo new --vcs pijul Now always emits build script warnings for crates that fail to build Added Android build support Added --bins and --tests flags now you can build all programs of a certain type, for example cargo build --bins will build all binaries. Added support for haiku Misc # rustdoc can now use pulldown-cmark with the --enable-commonmark flag Rust now uses the official cross compiler for NetBSD rustdoc now accepts # at the start of files Fixed jemalloc support for musl Compatibility Notes # Changes to how the 0 flag works in format! Padding zeroes are now always placed after the sign if it exists and before the digits. With the # flag the zeroes are placed after the prefix and before the digits.\nDue to the struct field optimisation, using transmute on structs that have no repr attribute or #[repr(Rust)] will no longer work. This has always been undefined behavior, but is now more likely to break in practice.\nThe refactor of trait object type parsing fixed a bug where + was receiving the wrong priority parsing things like \u0026amp;for\u0026lt;'a\u0026gt; Tr\u0026lt;'a\u0026gt; + Send as \u0026amp;(for\u0026lt;'a\u0026gt; Tr\u0026lt;'a\u0026gt; + Send) instead of (\u0026amp;for\u0026lt;'a\u0026gt; Tr\u0026lt;'a\u0026gt;) + Send\nOverlapping inherent impls are now a hard error\nPartialOrd and Ord must agree on the ordering.\nrustc main.rs -o out --emit=asm,llvm-ir Now will output out.asm and out.ll instead of only one of the filetypes.\ncalling a function that returns Self will no longer work when the size of Self cannot be statically determined.\nrustc now builds with a \u0026ldquo;pthreads\u0026rdquo; flavour of MinGW for Windows GNU this has caused a few regressions namely:\nChanged the link order of local static/dynamic libraries (respecting the order on given rather than having the compiler reorder). Changed how MinGW is linked, native code linked to dynamic libraries may require manually linking to the gcc support library (for the native code itself) "},{"id":84,"href":"/docs/1.17.0/","title":"1.17.0","section":"Docs","content":" 1.17.0 # Released on: 27 April, 2017 Branched from master on: 10 March, 2017 Language # The lifetime of statics and consts defaults to 'static. RFC 1623 Fields of structs may be initialized without duplicating the field/variable names. RFC 1682 Self may be included in the where clause of impls. RFC 1647 When coercing to an unsized type lifetimes must be equal. That is, there is no subtyping between T and U when T: Unsize\u0026lt;U\u0026gt;. For example, coercing \u0026amp;mut [\u0026amp;'a X; N] to \u0026amp;mut [\u0026amp;'b X] requires 'a be equal to 'b. Soundness fix. Values passed to the indexing operator, [], automatically coerce Static variables may contain references to other statics Compiler # Exit quickly on only --emit dep-info Make -C relocation-model more correctly determine whether the linker creates a position-independent executable Add -C overflow-checks to directly control whether integer overflow panics The rustc type checker now checks items on demand instead of in a single in-order pass. This is mostly an internal refactoring in support of future work, including incremental type checking, but also resolves RFC 1647, allowing Self to appear in impl where clauses. Optimize vtable loads Turn off vectorization for Emscripten targets Provide suggestions for unknown macros imported with use Fix ICEs in path resolution Strip exception handling code on Emscripten when panic=abort Add clearer error message using \u0026amp;str + \u0026amp;str Stabilized APIs # Arc::into_raw Arc::from_raw Arc::ptr_eq Rc::into_raw Rc::from_raw Rc::ptr_eq Ordering::then Ordering::then_with BTreeMap::range BTreeMap::range_mut collections::Bound process::abort ptr::read_unaligned ptr::write_unaligned Result::expect_err Cell::swap Cell::replace Cell::into_inner Cell::take Libraries # BTreeMap and BTreeSet can iterate over ranges Cell can store non-Copy types. RFC 1651 String implements FromIterator\u0026lt;\u0026amp;char\u0026gt; Box implements a number of new conversions: From\u0026lt;Box\u0026lt;str\u0026gt;\u0026gt; for String, From\u0026lt;Box\u0026lt;[T]\u0026gt;\u0026gt; for Vec\u0026lt;T\u0026gt;, From\u0026lt;Box\u0026lt;CStr\u0026gt;\u0026gt; for CString, From\u0026lt;Box\u0026lt;OsStr\u0026gt;\u0026gt; for OsString, From\u0026lt;Box\u0026lt;Path\u0026gt;\u0026gt; for PathBuf, Into\u0026lt;Box\u0026lt;str\u0026gt;\u0026gt; for String, Into\u0026lt;Box\u0026lt;[T]\u0026gt;\u0026gt; for Vec\u0026lt;T\u0026gt;, Into\u0026lt;Box\u0026lt;CStr\u0026gt;\u0026gt; for CString, Into\u0026lt;Box\u0026lt;OsStr\u0026gt;\u0026gt; for OsString, Into\u0026lt;Box\u0026lt;Path\u0026gt;\u0026gt; for PathBuf, Default for Box\u0026lt;str\u0026gt;, Default for Box\u0026lt;CStr\u0026gt;, Default for Box\u0026lt;OsStr\u0026gt;, From\u0026lt;\u0026amp;CStr\u0026gt; for Box\u0026lt;CStr\u0026gt;, From\u0026lt;\u0026amp;OsStr\u0026gt; for Box\u0026lt;OsStr\u0026gt;, From\u0026lt;\u0026amp;Path\u0026gt; for Box\u0026lt;Path\u0026gt; ffi::FromBytesWithNulError implements Error and Display Specialize PartialOrd\u0026lt;A\u0026gt; for [A] where A: Ord Slightly optimize slice::sort Add ToString trait specialization for Cow\u0026lt;'a, str\u0026gt; and String Box\u0026lt;[T]\u0026gt; implements From\u0026lt;\u0026amp;[T]\u0026gt; where T: Copy, Box\u0026lt;str\u0026gt; implements From\u0026lt;\u0026amp;str\u0026gt; IpAddr implements From for various arrays. SocketAddr implements From\u0026lt;(I, u16)\u0026gt; where I: Into\u0026lt;IpAddr\u0026gt; format! estimates the needed capacity before writing a string Support unprivileged symlink creation in Windows PathBuf implements Default Implement PartialEq\u0026lt;[A]\u0026gt; for VecDeque\u0026lt;A\u0026gt; HashMap resizes adaptively to guard against DOS attacks and poor hash functions. Cargo # Add cargo check --all Add an option to ignore SSL revocation checking Add cargo run --package Add required_features Assume build.rs is a build script Find workspace via workspace_root link in containing member Misc # Documentation is rendered with mdbook instead of the obsolete, in-tree rustbook The \u0026ldquo;Unstable Book\u0026rdquo; documents nightly-only features Improve the style of the sidebar in rustdoc output Configure build correctly on 64-bit CPU\u0026rsquo;s with the armhf ABI Fix MSP430 breakage due to i128 Preliminary Solaris/SPARCv9 support rustc is linked statically on Windows MSVC targets, allowing it to run without installing the MSVC runtime. rustdoc --test includes file names in test names This release includes builds of std for sparc64-unknown-linux-gnu, aarch64-unknown-linux-fuchsia, and x86_64-unknown-linux-fuchsia. Initial support for aarch64-unknown-freebsd Initial support for i686-unknown-netbsd This release no longer includes the old makefile build system. Rust is built with a custom build system, written in Rust, and with Cargo. Add Debug implementations for libcollection structs TypeId implements PartialOrd and Ord --test-threads=0 produces an error rustup installs documentation by default The Rust source includes NatVis visualizations. These can be used by WinDbg and Visual Studio to improve the debugging experience. Compatibility Notes # Rust 1.17 does not correctly detect the MSVC 2017 linker. As a workaround, either use MSVC 2015 or run vcvars.bat. When coercing to an unsized type lifetimes must be equal. That is, disallow subtyping between T and U when T: Unsize\u0026lt;U\u0026gt;, e.g. coercing \u0026amp;mut [\u0026amp;'a X; N] to \u0026amp;mut [\u0026amp;'b X] requires 'a be equal to 'b. Soundness fix. format! and Display::to_string panic if an underlying formatting implementation returns an error. Previously the error was silently ignored. It is incorrect for write_fmt to return an error when writing to a string. In-tree crates are verified to be unstable. Previously, some minor crates were marked stable and could be accessed from the stable toolchain. Rust git source no longer includes vendored crates. Those that need to build with vendored crates should build from release tarballs. Fix inert attributes from proc_macro_derives During crate resolution, rustc prefers a crate in the sysroot if two crates are otherwise identical. Unlikely to be encountered outside the Rust build system. Fixed bugs around how type inference interacts with dead-code. The existing code generally ignores the type of dead-code unless a type-hint is provided; this can cause surprising inference interactions particularly around defaulting. The new code uniformly ignores the result type of dead-code. Tuple-struct constructors with private fields are no longer visible Lifetime parameters that do not appear in the arguments are now considered early-bound, resolving a soundness bug (#32330). The hr_lifetime_in_assoc_type future-compatibility lint has been in effect since April of 2016. rustdoc: fix doctests with non-feature crate attributes Make transmuting from fn item types to pointer-sized types a hard error "},{"id":85,"href":"/docs/1.16.0/","title":"1.16.0","section":"Docs","content":" 1.16.0 # Released on: 16 March, 2017 Branched from master on: 27 January, 2017 Language # The compiler\u0026rsquo;s dead_code lint now accounts for type aliases. Uninhabitable enums (those without any variants) no longer permit wildcard match patterns Clean up semantics of self in an import list Self may appear in impl headers Self may appear in struct expressions Compiler # rustc now supports --emit=metadata, which causes rustc to emit a .rmeta file containing only crate metadata. This can be used by tools like the Rust Language Service to perform metadata-only builds. Levenshtein based typo suggestions now work in most places, while previously they worked only for fields and sometimes for local variables. Together with the overhaul of \u0026ldquo;no resolution\u0026rdquo;/\u0026ldquo;unexpected resolution\u0026rdquo; errors (#38154) they result in large and systematic improvement in resolution diagnostics. Fix transmute::\u0026lt;T, U\u0026gt; where T requires a bigger alignment than U rustc: use -Xlinker when specifying an rpath with \u0026lsquo;,\u0026rsquo; in it rustc no longer attempts to provide \u0026ldquo;consider using an explicit lifetime\u0026rdquo; suggestions. They were inaccurate. Stabilized APIs # VecDeque::truncate VecDeque::resize String::insert_str Duration::checked_add Duration::checked_sub Duration::checked_div Duration::checked_mul str::replacen str::repeat SocketAddr::is_ipv4 SocketAddr::is_ipv6 IpAddr::is_ipv4 IpAddr::is_ipv6 Vec::dedup_by Vec::dedup_by_key Result::unwrap_or_default \u0026lt;*const T\u0026gt;::wrapping_offset \u0026lt;*mut T\u0026gt;::wrapping_offset CommandExt::creation_flags File::set_permissions String::split_off Libraries # [T]::binary_search and [T]::binary_search_by_key now take their argument by Borrow parameter All public types in std implement Debug IpAddr implements From\u0026lt;Ipv4Addr\u0026gt; and From\u0026lt;Ipv6Addr\u0026gt; Ipv6Addr implements From\u0026lt;[u16; 8]\u0026gt; Ctrl-Z returns from Stdin.read() when reading from the console on Windows std: Fix partial writes in LineWriter std: Clamp max read/write sizes on Unix Use more specific panic message for \u0026amp;str slicing errors TcpListener::set_only_v6 is deprecated. This functionality cannot be achieved in std currently. writeln!, like println!, now accepts a form with no string or formatting arguments, to just print a newline Implement iter::Sum and iter::Product for Result Reduce the size of static data in std_unicode::tables char::EscapeDebug, EscapeDefault, EscapeUnicode, CaseMappingIter, ToLowercase, ToUppercase, implement Display Duration implements Sum String implements ToSocketAddrs Cargo # The cargo check command does a type check of a project without building it crates.io will display CI badges from Travis and AppVeyor, if specified in Cargo.toml crates.io will display categories listed in Cargo.toml Compilation profiles accept integer values for debug, in addition to true and false. These are passed to rustc as the value to -C debuginfo Implement cargo --version --verbose All builds now output \u0026lsquo;dep-info\u0026rsquo; build dependencies compatible with make and ninja Build all workspace members with build --all Document all workspace members with doc --all Path deps outside workspace are not members Misc # rustdoc has a --sysroot argument that, like rustc, specifies the path to the Rust implementation The armv7-linux-androideabi target no longer enables NEON extensions, per Google\u0026rsquo;s ABI guide The stock standard library can be compiled for Redox OS Rust has initial SPARC support. Tier 3. No builds available. Rust has experimental support for Nvidia PTX. Tier 3. No builds available. Fix backtraces on i686-pc-windows-gnu by disabling FPO Compatibility Notes # Uninhabitable enums (those without any variants) no longer permit wildcard match patterns In this release, references to uninhabited types can not be pattern-matched. This was accidentally allowed in 1.15. The compiler\u0026rsquo;s dead_code lint now accounts for type aliases. Ctrl-Z returns from Stdin.read() when reading from the console on Windows Clean up semantics of self in an import list Reimplemented lifetime elision. This change was almost entirely compatible with existing code, but it did close a number of small bugs and loopholes, as well as being more accepting in some other cases. "},{"id":86,"href":"/docs/1.15.1/","title":"1.15.1","section":"Docs","content":" 1.15.1 # Released on: 9 February, 2017 This is a patch release Fix IntoIter::as_mut_slice\u0026rsquo;s signature Compile compiler builtins with -fPIC on 32-bit platforms "},{"id":87,"href":"/docs/1.15.0/","title":"1.15.0","section":"Docs","content":" 1.15.0 # Released on: 2 February, 2017 Branched from master on: 16 December, 2016 Language # Basic procedural macros allowing custom #[derive], aka \u0026ldquo;macros 1.1\u0026rdquo;, are stable. This allows popular code-generating crates like Serde and Diesel to work ergonomically. RFC 1681. Tuple structs may be empty. Unary and empty tuple structs may be instantiated with curly braces. Part of RFC 1506. A number of minor changes to name resolution have been activated. They add up to more consistent semantics, allowing for future evolution of Rust macros. Specified in RFC 1560, see its section on \u0026ldquo;changes\u0026rdquo; for details of what is different. The breaking changes here have been transitioned through the legacy_imports lint since 1.14, with no known regressions. In macro_rules, path fragments can now be parsed as type parameter bounds ?Sized can be used in where clauses There is now a limit on the size of monomorphized types and it can be modified with the #![type_size_limit] crate attribute, similarly to the #![recursion_limit] attribute Compiler # On Windows, the compiler will apply dllimport attributes when linking to extern functions. Additional attributes and flags can control which library kind is linked and its name. RFC 1717. Rust-ABI symbols are no longer exported from cdylibs The --test flag works with procedural macro crates Fix extern \u0026quot;aapcs\u0026quot; fn ABI The -C no-stack-check flag is deprecated. It does nothing. The format! expander recognizes incorrect printf and shell-style formatting directives and suggests the correct format. Only report one error for all unused imports in an import list Compiler Performance # Avoid unnecessary mk_ty calls in Ty::super_fold_with Avoid more unnecessary mk_ty calls in Ty::super_fold_with Don\u0026rsquo;t clone in UnificationTable::probe Remove scope_auxiliary to cut RSS by 10% Use small vectors in type walker Macro expansion performance was improved Change HirVec\u0026lt;P\u0026lt;T\u0026gt;\u0026gt; to HirVec\u0026lt;T\u0026gt; in hir::Expr Replace FNV with a faster hash function Stabilized APIs # std::iter::Iterator::min_by std::iter::Iterator::max_by std::os::*::fs::FileExt std::sync::atomic::Atomic*::get_mut std::sync::atomic::Atomic*::into_inner std::vec::IntoIter::as_slice std::vec::IntoIter::as_mut_slice std::sync::mpsc::Receiver::try_iter std::os::unix::process::CommandExt::before_exec std::rc::Rc::strong_count std::rc::Rc::weak_count std::sync::Arc::strong_count std::sync::Arc::weak_count std::char::encode_utf8 std::char::encode_utf16 std::cell::Ref::clone std::io::Take::into_inner Libraries # The standard sorting algorithm has been rewritten for dramatic performance improvements. It is a hybrid merge sort, drawing influences from Timsort. Previously it was a naive merge sort. Iterator::nth no longer has a Sized bound Extend\u0026lt;\u0026amp;T\u0026gt; is specialized for Vec where T: Copy to improve performance. chars().count() is much faster and so are chars().last() and char_indices().last() Fix ARM Objective-C ABI in std::env::args Chinese characters display correctly in fmt::Debug Derive Default for Duration Support creation of anonymous pipes on WinXP/2k mpsc::RecvTimeoutError implements Error Don\u0026rsquo;t pass overlapped handles to processes Cargo # In this release, Cargo build scripts no longer have access to the OUT_DIR environment variable at build time via env!(\u0026quot;OUT_DIR\u0026quot;). They should instead check the variable at runtime with std::env. That the value was set at build time was a bug, and incorrect when cross-compiling. This change is known to cause breakage. Add --all flag to cargo test Compile statically against the MSVC CRT Mix feature flags into fingerprint/metadata shorthash Link OpenSSL statically on OSX Apply new fingerprinting to build dir outputs Test for bad path overrides with summaries Require cargo install --vers to take a semver version Fix retrying crate downloads for network errors Implement string lookup for build.rustflags config key Emit more info on \u0026ndash;message-format=json Assume build.rs in the same directory as Cargo.toml is a build script Don\u0026rsquo;t ignore errors in workspace manifest Fix --message-format JSON when rustc emits non-JSON warnings Tooling # Test runners (binaries built with --test) now support a --list argument that lists the tests it contains Test runners now support a --exact argument that makes the test filter match exactly, instead of matching only a substring of the test name rustdoc supports a --playground-url flag rustdoc provides more details about #[should_panic] errors Misc # The Rust build system is now written in Rust. The Makefiles may continue to be used in this release by passing --disable-rustbuild to the configure script, but they will be deleted soon. Note that the new build system uses a different on-disk layout that will likely affect any scripts building Rust. Rust supports i686-unknown-openbsd. Tier 3 support. No testing or releases. Rust supports the MSP430. Tier 3 support. No testing or releases. Rust supports the ARMv5TE architecture. Tier 3 support. No testing or releases. Compatibility Notes # A number of minor changes to name resolution have been activated. They add up to more consistent semantics, allowing for future evolution of Rust macros. Specified in RFC 1560, see its section on \u0026ldquo;changes\u0026rdquo; for details of what is different. The breaking changes here have been transitioned through the legacy_imports lint since 1.14, with no known regressions. In this release, Cargo build scripts no longer have access to the OUT_DIR environment variable at build time via env!(\u0026quot;OUT_DIR\u0026quot;). They should instead check the variable at runtime with std::env. That the value was set at build time was a bug, and incorrect when cross-compiling. This change is known to cause breakage. Higher-ranked lifetimes are no longer allowed to appear only in associated types. The hr_lifetime_in_assoc_type lint has been a warning since 1.10 and is now an error by default. It will become a hard error in the near future. The semantics relating modules to file system directories are changing in minor ways. This is captured in the new legacy_directory_ownership lint, which is a warning in this release, and will become a hard error in the future. Rust-ABI symbols are no longer exported from cdylibs Once Peekable peeks a None it will return that None without re-querying the underlying iterator "},{"id":88,"href":"/docs/1.14.0/","title":"1.14.0","section":"Docs","content":" 1.14.0 # Released on: 22 December, 2016 Branched from master on: 4 November, 2016 Language # .. matches multiple tuple fields in enum variants, structs and tuples. RFC 1492. Safe fn items can be coerced to unsafe fn pointers use * and use ::* both glob-import from the crate root It\u0026rsquo;s now possible to call a Vec\u0026lt;Box\u0026lt;Fn()\u0026gt;\u0026gt; without explicit dereferencing Compiler # Mark enums with non-zero discriminant as non-zero Lower-case static mut names are linted like other statics and consts Fix ICE on some macros in const integer positions (e.g. [u8; m!()]) Improve error message and snippet for \u0026ldquo;did you mean x\u0026rdquo; Add a panic-strategy field to the target specification Include LLVM version in --version --verbose Compile-time Optimizations # Improve macro expansion performance Shrink Expr_::ExprInlineAsm Replace all uses of SHA-256 with BLAKE2b Reduce the number of bytes hashed by IchHasher Avoid more allocations when compiling html5ever Use SmallVector in CombineFields::instantiate Avoid some allocations in the macro parser Use a faster deflate setting Add ArrayVec and AccumulateVec to reduce heap allocations during interning of slices Optimize write_metadata Don\u0026rsquo;t process obligation forest cycles when stalled Avoid many CrateConfig clones Optimize Substs::super_fold_with Optimize ObligationForest\u0026rsquo;s NodeState handling Speed up plug_leaks Libraries # println!(), with no arguments, prints newline. Previously, an empty string was required to achieve the same. Wrapping impls standard binary and unary operators, as well as the Sum and Product iterators Implement From\u0026lt;Cow\u0026lt;str\u0026gt;\u0026gt; for String and From\u0026lt;Cow\u0026lt;[T]\u0026gt;\u0026gt; for Vec\u0026lt;T\u0026gt; Improve fold performance for chain, cloned, map, and VecDeque iterators Improve SipHasher performance on small values Add Iterator trait TrustedLen to enable better FromIterator / Extend Expand .zip() specialization to .map() and .cloned() ReadDir implements Debug Implement RefUnwindSafe for atomic types Specialize Vec::extend to Vec::extend_from_slice Avoid allocations in Decoder::read_str io::Error implements From\u0026lt;io::ErrorKind\u0026gt; Impl Debug for raw pointers to unsized data Don\u0026rsquo;t reuse HashMap random seeds The internal memory layout of HashMap is more cache-friendly, for significant improvements in some operations HashMap uses less memory on 32-bit architectures Impl Add\u0026lt;{str, Cow\u0026lt;str\u0026gt;}\u0026gt; for Cow\u0026lt;str\u0026gt; Cargo # Expose rustc cfg values to build scripts Allow cargo to work with read-only CARGO_HOME Fix passing \u0026ndash;features when testing multiple packages Use a single profile set per workspace Load replace sections from lock files Ignore panic configuration for test/bench profiles Tooling # rustup is the recommended Rust installation method This release includes host (rustc) builds for Linux on MIPS, PowerPC, and S390x. These are tier 2 platforms and may have major defects. Follow the instructions on the website to install, or add the targets to an existing installation with rustup target add. The new target triples are: mips-unknown-linux-gnu mipsel-unknown-linux-gnu mips64-unknown-linux-gnuabi64 mips64el-unknown-linux-gnuabi64 powerpc-unknown-linux-gnu powerpc64-unknown-linux-gnu powerpc64le-unknown-linux-gnu s390x-unknown-linux-gnu This release includes target (std) builds for ARM Linux running MUSL libc. These are tier 2 platforms and may have major defects. Add the following triples to an existing rustup installation with rustup target add: arm-unknown-linux-musleabi arm-unknown-linux-musleabihf armv7-unknown-linux-musleabihf This release includes experimental support for WebAssembly, via the wasm32-unknown-emscripten target. This target is known to have major defects. Please test, report, and fix. rustup no longer installs documentation by default. Run rustup component add rust-docs to install. Fix line stepping in debugger Enable line number debuginfo in releases Misc # Disable jemalloc on aarch64/powerpc/mips Add support for Fuchsia OS Detect local-rebuild by only MAJOR.MINOR version Compatibility Notes # A number of forward-compatibility lints used by the compiler to gradually introduce language changes have been converted to deny by default: \u0026ldquo;use of inaccessible extern crate erroneously allowed\u0026rdquo; \u0026ldquo;type parameter default erroneously allowed in invalid location\u0026rdquo; \u0026ldquo;detects super or self keywords at the beginning of global path\u0026rdquo; \u0026ldquo;two overlapping inherent impls define an item with the same name were erroneously allowed\u0026rdquo; \u0026ldquo;floating-point constants cannot be used in patterns\u0026rdquo; \u0026ldquo;constants of struct or enum type can only be used in a pattern if the struct or enum has #[derive(PartialEq, Eq)]\u0026rdquo; \u0026ldquo;lifetimes or labels named '_ were erroneously allowed\u0026rdquo; Prohibit patterns in trait methods without bodies The atomic Ordering enum may not be matched exhaustively Future-proofing #[no_link] breaks some obscure cases The $crate macro variable is accepted in fewer locations Impls specifying extra region requirements beyond the trait they implement are rejected Enums may not be unsized. Unsized enums are intended to work but never have. For now they are forbidden. Enforce the shadowing restrictions from RFC 1560 for today\u0026rsquo;s macros "},{"id":89,"href":"/docs/1.13.0/","title":"1.13.0","section":"Docs","content":" 1.13.0 # Released on: 10 November, 2016 Branched from master on: 23 September, 2016 Language # Stabilize the ? operator. ? is a simple way to propagate errors, like the try! macro, described in RFC 0243. Stabilize macros in type position. Described in RFC 873. Stabilize attributes on statements. Described in RFC 0016. Fix #[derive] for empty tuple structs/variants Fix lifetime rules for \u0026lsquo;if\u0026rsquo; conditions Avoid loading and parsing unconfigured non-inline modules Compiler # Add the -C link-arg argument Remove the old AST-based backend from rustc_trans Don\u0026rsquo;t enable NEON by default on armv7 Linux Fix debug line number info for macro expansions Do not emit \u0026ldquo;class method\u0026rdquo; debuginfo for types that are not DICompositeType Warn about multiple conflicting #[repr] hints When sizing DST, don\u0026rsquo;t double-count nested struct prefixes Default RUST_MIN_STACK to 16MiB for now Improve rlib metadata format. Reduces rlib size significantly. Reject macros with empty repetitions to avoid infinite loop Expand macros without recursing to avoid stack overflows Diagnostics # Replace macro backtraces with labeled local uses Improve error message for misplaced doc comments Buffer unix and lock windows to prevent message interleaving Update lifetime errors to specifically note temporaries Special case a few colors for Windows Suggest use self when such an import resolves Be more specific when type parameter shadows primitive type Many minor improvements Compile-time Optimizations # Compute and cache HIR hashes at beginning Don\u0026rsquo;t hash types in loan paths Cache projections in trans Optimize the parser\u0026rsquo;s last token handling Only instantiate #[inline] functions in codegen units referencing them. This leads to big improvements in cases where crates export define many inline functions without using them directly. Lazily allocate TypedArena\u0026rsquo;s first chunk Don\u0026rsquo;t allocate during default HashSet creation Stabilized APIs # checked_abs wrapping_abs overflowing_abs RefCell::try_borrow RefCell::try_borrow_mut Libraries # Add assert_ne! and debug_assert_ne! Make vec_deque::Drain, hash_map::Drain, and hash_set::Drain covariant Implement AsRef\u0026lt;[T]\u0026gt; for std::slice::Iter Implement Debug for std::vec::IntoIter CString: avoid excessive growth just to 0-terminate Implement CoerceUnsized for {Cell, RefCell, UnsafeCell} Use arc4rand on FreeBSD memrchr: Correct aligned offset computation Improve Demangling of Rust Symbols Use monotonic time in condition variables Implement Debug for std::path::{Components,Iter} Implement conversion traits for char Fix illegal instruction caused by overflow in channel cloning Zero first byte of CString on drop Inherit overflow checks for sum and product Add missing Eq implementations Implement Debug for DirEntry When getaddrinfo returns EAI_SYSTEM retrieve actual error from errno SipHasher is deprecated. Use DefaultHasher. Implement more traits for std::io::ErrorKind Optimize BinaryHeap bounds checking Work around pointer aliasing issue in Vec::extend_from_slice, extend_with_element Fix overflow checking in unsigned pow() Cargo # This release includes security fixes to both curl and OpenSSL. Fix transitive doctests when panic=abort Add \u0026ndash;all-features flag to cargo Reject path-based dependencies in cargo package Don\u0026rsquo;t parse the home directory more than once Don\u0026rsquo;t try to generate Cargo.lock on empty workspaces Update OpenSSL to 1.0.2j Add license and license_file to cargo metadata output Make crates-io registry URL optional in config; ignore all changes to source.crates-io Don\u0026rsquo;t download dependencies from other platforms Build transitive dev-dependencies when needed Add support for per-target rustflags in .cargo/config Avoid updating registry when adding existing deps Warn about path overrides that won\u0026rsquo;t work Use workspaces during cargo install Leak mspdbsrv.exe processes on Windows Add \u0026ndash;message-format flag Pass target environment for rustdoc Use CommandExt::exec for cargo run on Unix Update curl and curl-sys Call rustdoc test with the correct cfg flags of a package Tooling # rustdoc: Add the --sysroot argument rustdoc: Fix a couple of issues with the search results rustdoc: remove the ! from macro URLs and titles gdb: Fix pretty-printing special-cased Rust types rustdoc: Filter more incorrect methods inherited through Deref Misc # Remove unmaintained style guide Add s390x support Initial work at Haiku OS support Add mips-uclibc targets Crate-ify compiler-rt into compiler-builtins Add rustc version info (git hash + date) to dist tarball Many documentation improvements Compatibility Notes # SipHasher is deprecated. Use DefaultHasher. Deny (by default) transmuting from fn item types to pointer-sized types. Continuing the long transition to zero-sized fn items, per RFC 401. Fix #[derive] for empty tuple structs/variants. Part of RFC 1506. Issue deprecation warnings for safe accesses to extern statics Fix lifetime rules for \u0026lsquo;if\u0026rsquo; conditions. Inherit overflow checks for sum and product. Forbid user-defined macros named \u0026ldquo;macro_rules\u0026rdquo;. "},{"id":90,"href":"/docs/1.12.1/","title":"1.12.1","section":"Docs","content":" 1.12.1 # Released on: 20 October, 2016 This is a patch release Regression Fixes # ICE: \u0026lsquo;rustc\u0026rsquo; panicked at \u0026lsquo;assertion failed: concrete_substs.is_normalized_for_trans()\u0026rsquo; #36381 Confusion with double negation and booleans rustc 1.12.0 fails with SIGSEGV in release mode (syn crate 0.8.0) Rustc 1.12.0 Windows build of ethcore crate fails with LLVM error 1.12.0: High memory usage when linking in release mode with debug info Corrupted memory after updated to 1.12 \u0026ldquo;Let NullaryConstructor = something;\u0026rdquo; causes internal compiler error: \u0026ldquo;tried to overwrite interned AdtDef\u0026rdquo; Fix ICE: inject bitcast if types mismatch for invokes/calls/stores debuginfo: Handle spread_arg case in MIR-trans in a more stable way. "},{"id":91,"href":"/docs/1.12.0/","title":"1.12.0","section":"Docs","content":" 1.12.0 # Released on: 29 September, 2016 Branched from master on: 12 August, 2016 Highlights # rustc translates code to LLVM IR via its own \u0026ldquo;middle\u0026rdquo; IR (MIR). This translation pass is far simpler than the previous AST-\u0026gt;LLVM pass, and creates opportunities to perform new optimizations directly on the MIR. It was previously described on the Rust blog. rustc presents a new, more readable error format, along with machine-readable JSON error output for use by IDEs. Most common editors supporting Rust have been updated to work with it. It was previously described on the Rust blog. Compiler # rustc translates code to LLVM IR via its own \u0026ldquo;middle\u0026rdquo; IR (MIR). This translation pass is far simpler than the previous AST-\u0026gt;LLVM pass, and creates opportunities to perform new optimizations directly on the MIR. It was previously described on the Rust blog. Print the Rust target name, not the LLVM target name, with --print target-list The computation of TypeId is correct in some cases where it was previously producing inconsistent results The mips-unknown-linux-gnu target uses hardware floating point by default The rustc arguments, --print target-cpus, --print target-features, --print relocation-models, and --print code-models print the available options to the -C target-cpu, -C target-feature, -C relocation-model and -C code-model code generation arguments rustc supports three new MUSL targets on ARM: arm-unknown-linux-musleabi, arm-unknown-linux-musleabihf, and armv7-unknown-linux-musleabihf. These targets produce statically-linked binaries. There are no binary release builds yet though. Diagnostics # rustc presents a new, more readable error format, along with machine-readable JSON error output for use by IDEs. Most common editors supporting Rust have been updated to work with it. It was previously described on the Rust blog. In error descriptions, references are now described in plain English, instead of as \u0026ldquo;\u0026amp;-ptr\u0026rdquo; In error type descriptions, unknown numeric types are named {integer} or {float} instead of _ rustc emits a clearer error when inner attributes follow a doc comment Language # macro_rules! invocations can be made within macro_rules! invocations macro_rules! meta-variables are hygienic macro_rules! tt matchers can be reparsed correctly, making them much more useful macro_rules! stmt matchers correctly consume the entire contents when inside non-braces invocations Semicolons are properly required as statement delimiters inside macro_rules! invocations cfg_attr works on path attributes Stabilized APIs # Cell::as_ptr RefCell::as_ptr IpAddr::is_unspecified IpAddr::is_loopback IpAddr::is_multicast Ipv4Addr::is_unspecified Ipv6Addr::octets LinkedList::contains VecDeque::contains ExitStatusExt::from_raw. Both on Unix and Windows. Receiver::recv_timeout RecvTimeoutError BinaryHeap::peek_mut PeekMut iter::Product iter::Sum OccupiedEntry::remove_entry VacantEntry::into_key Libraries # The format! macro and friends now allow a single argument to be formatted in multiple styles The lifetime bounds on [T]::binary_search_by and [T]::binary_search_by_key have been adjusted to be more flexible Option implements From for its contained type Cell, RefCell and UnsafeCell implement From for their contained type RwLock panics if the reader count overflows vec_deque::Drain, hash_map::Drain and hash_set::Drain are covariant vec::Drain and binary_heap::Drain are covariant Cow\u0026lt;str\u0026gt; implements FromIterator for char, \u0026amp;str and String Sockets on Linux are correctly closed in subprocesses via SOCK_CLOEXEC hash_map::Entry, hash_map::VacantEntry and hash_map::OccupiedEntry implement Debug btree_map::Entry, btree_map::VacantEntry and btree_map::OccupiedEntry implement Debug String implements AddAssign Variadic extern fn pointers implement the Clone, PartialEq, Eq, PartialOrd, Ord, Hash, fmt::Pointer, and fmt::Debug traits FileType implements Debug References to Mutex and RwLock are unwind-safe mpsc::sync_channel Receivers return any available message before reporting a disconnect Unicode definitions have been updated to 9.0 env iterators implement DoubleEndedIterator Cargo # Support local mirrors of registries Add support for command aliases Allow opt-level=\u0026quot;s\u0026quot; / opt-level=\u0026quot;z\u0026quot; in profile overrides Make cargo doc --open --target work as expected Speed up noop registry updates Update OpenSSL Fix --panic=abort with plugins Always pass -C metadata to the compiler Fix depending on git repos with workspaces Add a --lib flag to cargo new Add http.cainfo for custom certs Indicate the compilation profile after compiling Allow enabling features for dependencies with --features Add --jobs flag to cargo package Add --dry-run to cargo publish Add support for RUSTDOCFLAGS Performance # panic::catch_unwind is more optimized panic::catch_unwind no longer accesses thread-local storage on entry Tooling # Test binaries now support a --test-threads argument to specify the number of threads used to run tests, and which acts the same as the RUST_TEST_THREADS environment variable The test runner now emits a warning when tests run over 60 seconds rustdoc: Fix methods in search results rust-lldb warns about unsupported versions of LLDB Rust releases now come with source packages that can be installed by rustup via rustup component add rust-src. The resulting source code can be used by tools and IDES, located in the sysroot under lib/rustlib/src. Misc # The compiler can now be built against LLVM 3.9 Many minor improvements to the documentation. The Rust exception handling \u0026ldquo;personality\u0026rdquo; routine is now written in Rust Compatibility Notes # When printing Windows OsStrs, unpaired surrogate codepoints are escaped with the lowercase format instead of the uppercase When formatting strings, if \u0026ldquo;precision\u0026rdquo; is specified, the \u0026ldquo;fill\u0026rdquo;, \u0026ldquo;align\u0026rdquo; and \u0026ldquo;width\u0026rdquo; specifiers are no longer ignored The Debug impl for strings no longer escapes all non-ASCII characters "},{"id":92,"href":"/docs/1.11.0/","title":"1.11.0","section":"Docs","content":" 1.11.0 # Released on: 18 August, 2016 Branched from master on: 1 July, 2016 Language # Support nested cfg_attr attributes Allow statement-generating braced macro invocations at the end of blocks Macros can be expanded inside of trait definitions #[macro_use] works properly when it is itself expanded from a macro Stabilized APIs # BinaryHeap::append BTreeMap::append BTreeMap::split_off BTreeSet::append BTreeSet::split_off f32::to_degrees (in libcore - previously stabilized in libstd) f32::to_radians (in libcore - previously stabilized in libstd) f64::to_degrees (in libcore - previously stabilized in libstd) f64::to_radians (in libcore - previously stabilized in libstd) Iterator::sum Iterator::product Cell::get_mut RefCell::get_mut Libraries # The thread_local! macro supports multiple definitions in a single invocation, and can apply attributes Cow implements Default Wrapping implements binary, octal, lower-hex and upper-hex Display formatting The range types implement Hash lookup_host ignores unknown address types assert_eq! accepts a custom error message, like assert! does The main thread is now called \u0026ldquo;main\u0026rdquo; instead of \u0026ldquo;\u0026lt;main\u0026gt;\u0026rdquo; Cargo # Disallow specifying features of transitive deps Add color support for Windows consoles Fix harness = false on [lib] sections Don\u0026rsquo;t panic when links contains a \u0026lsquo;.\u0026rsquo; Build scripts can emit warnings, and -vv prints warnings for all crates. Ignore file locks on OS X NFS mounts Don\u0026rsquo;t warn about package.metadata keys. This provides room for expansion by arbitrary tools. Add support for cdylib crate types Prevent publishing crates when files are dirty Don\u0026rsquo;t fetch all crates on clean Propagate \u0026ndash;color option to rustc Fix cargo doc --open on Windows Improve autocompletion Configure colors of stderr as well as stdout Performance # Caching projections speeds up type check dramatically for some workloads The default HashMap hasher is SipHash 1-3 instead of SipHash 2-4 This hasher is faster, but is believed to provide sufficient protection from collision attacks. Comparison of Ipv4Addr is 10x faster Rustdoc # Fix empty implementation section on some module pages Fix inlined renamed re-exports in import lists Fix search result layout for enum variants and struct fields Fix issues with source links to external crates Fix redirect pages for renamed re-exports Tooling # rustc is better at finding the MSVC toolchain When emitting debug info, rustc emits frame pointers for closures, shims and glue, as it does for all other functions rust-lldb warns about unsupported versions of LLDB Many more errors have been given error codes and extended explanations API documentation continues to be improved, with many new examples Misc # rustc no longer hangs when dependencies recursively re-export submodules rustc requires LLVM 3.7+ The \u0026lsquo;How Safe and Unsafe Interact\u0026rsquo; chapter of The Rustonomicon was rewritten rustc support 16-bit pointer sizes. No targets use this yet, but it works toward AVR support. Compatibility Notes # consts and statics may not have unsized types The new follow-set rules that place restrictions on macro_rules! in order to ensure syntax forward-compatibility have been enabled This was an amendment to RFC 550, and has been a warning since 1.10. cfg attribute process has been refactored to fix various bugs. This causes breakage in some corner cases. "},{"id":93,"href":"/docs/1.10.0/","title":"1.10.0","section":"Docs","content":" 1.10.0 # Released on: 7 July, 2016 Branched from master on: 20 May, 2016 Language # Copy types are required to have a trivial implementation of Clone. RFC 1521. Single-variant enums support the #[repr(..)] attribute. Fix #[derive(RustcEncodable)] in the presence of other encode methods. panic! can be converted to a runtime abort with the -C panic=abort flag. RFC 1513. Add a new crate type, \u0026lsquo;cdylib\u0026rsquo;. cdylibs are dynamic libraries suitable for loading by non-Rust hosts. RFC 1510. Note that Cargo does not yet directly support cdylibs. Stabilized APIs # os::windows::fs::OpenOptionsExt::access_mode os::windows::fs::OpenOptionsExt::share_mode os::windows::fs::OpenOptionsExt::custom_flags os::windows::fs::OpenOptionsExt::attributes os::windows::fs::OpenOptionsExt::security_qos_flags os::unix::fs::OpenOptionsExt::custom_flags sync::Weak::new Default for sync::Weak panic::set_hook panic::take_hook panic::PanicInfo panic::PanicInfo::payload panic::PanicInfo::location panic::Location panic::Location::file panic::Location::line ffi::CStr::from_bytes_with_nul ffi::CStr::from_bytes_with_nul_unchecked ffi::FromBytesWithNulError fs::Metadata::modified fs::Metadata::accessed fs::Metadata::created sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr} SocketAddr::is_unnamed SocketAddr::as_pathname UnixStream::connect UnixStream::pair UnixStream::try_clone UnixStream::local_addr UnixStream::peer_addr UnixStream::set_read_timeout UnixStream::set_write_timeout UnixStream::read_timeout UnixStream::write_timeout UnixStream::set_nonblocking UnixStream::take_error UnixStream::shutdown Read/Write/RawFd impls for UnixStream UnixListener::bind UnixListener::accept UnixListener::try_clone UnixListener::local_addr UnixListener::set_nonblocking UnixListener::take_error UnixListener::incoming RawFd impls for UnixListener UnixDatagram::bind UnixDatagram::unbound UnixDatagram::pair UnixDatagram::connect UnixDatagram::try_clone UnixDatagram::local_addr UnixDatagram::peer_addr UnixDatagram::recv_from UnixDatagram::recv UnixDatagram::send_to UnixDatagram::send UnixDatagram::set_read_timeout UnixDatagram::set_write_timeout UnixDatagram::read_timeout UnixDatagram::write_timeout UnixDatagram::set_nonblocking UnixDatagram::take_error UnixDatagram::shutdown RawFd impls for UnixDatagram {BTree,Hash}Map::values_mut \u0026lt;[_]\u0026gt;::binary_search_by_key Libraries # The abs_sub method of floats is deprecated. The semantics of this minor method are subtle and probably not what most people want. Add implementation of Ord for Cell and RefCell where T: Ord. On Linux, if HashMaps can\u0026rsquo;t be initialized with getrandom they will fall back to /dev/urandom temporarily to avoid blocking during early boot. Implemented negation for wrapping numerals. Implement Clone for binary_heap::IntoIter. Implement Display and Hash for std::num::Wrapping. Add Default implementation for \u0026amp;CStr, CString. Implement From\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt; and Into\u0026lt;Vec\u0026lt;T\u0026gt;\u0026gt; for VecDeque\u0026lt;T\u0026gt;. Implement Default for UnsafeCell, fmt::Error, Condvar, Mutex, RwLock. Cargo # Cargo.toml supports the profile.*.panic option. This controls the runtime behavior of the panic! macro and can be either \u0026ldquo;unwind\u0026rdquo; (the default), or \u0026ldquo;abort\u0026rdquo;. RFC 1513. Don\u0026rsquo;t throw away errors with -p arguments. Report status to stderr instead of stdout. Build scripts are passed a CARGO_MANIFEST_LINKS environment variable that corresponds to the links field of the manifest. Ban keywords from crate names. Canonicalize CARGO_HOME on Windows. Retry network requests. By default they are retried twice, which can be customized with the net.retry value in .cargo/config. Don\u0026rsquo;t print extra error info for failing subcommands. Add --force flag to cargo install. Don\u0026rsquo;t use flock on NFS mounts. Prefer building cargo install artifacts in temporary directories. Makes it possible to install multiple crates in parallel. Add cargo test --doc. Add cargo --explain. Don\u0026rsquo;t print warnings when -q is passed. Add cargo doc --lib and --bin. Don\u0026rsquo;t require build script output to be UTF-8. Correctly attempt multiple git usernames. Performance # rustc memory usage was reduced by refactoring the context used for type checking. Speed up creation of HashMaps by caching the random keys used to initialize the hash state. The find implementation for Chain iterators is 2x faster. Trait selection optimizations speed up type checking by 15%. Efficient trie lookup for boolean Unicode properties. 10x faster than the previous lookup tables. Special case #[derive(Copy, Clone)] to avoid bloat. Usability # Many incremental improvements to documentation and rustdoc. rustdoc: List blanket trait impls. rustdoc: Clean up ABI rendering. Indexing with the wrong type produces a more informative error. Improve diagnostics for constants being used in irrefutable patterns. When many method candidates are in scope limit the suggestions to 10. Remove confusing suggestion when calling a fn type. Do not suggest changing \u0026amp;mut self to \u0026amp;mut mut self. Misc # Update i686-linux-android features to match Android ABI. Update aarch64-linux-android features to match Android ABI. std no longer prints backtraces on platforms where the running module must be loaded with env::current_exe, which can\u0026rsquo;t be relied on. This release includes std binaries for the i586-unknown-linux-gnu, i686-unknown-linux-musl, and armv7-linux-androideabi targets. The i586 target is for old x86 hardware without SSE2, and the armv7 target is for Android running on modern ARM architectures. The rust-gdb and rust-lldb scripts are distributed on all Unix platforms. On Unix the runtime aborts by calling libc::abort instead of generating an illegal instruction. Rust is now bootstrapped from the previous release of Rust, instead of a snapshot from an arbitrary commit. Compatibility Notes # AtomicBool is now bool-sized, not word-sized. target_env for Linux ARM targets is just gnu, not gnueabihf, gnueabi, etc. Consistently panic on overflow in Duration::new. Change String::truncate to panic less. Add :block to the follow set for :ty and :path. Affects how macros are parsed. Fix macro hygiene bug. Feature-gated attributes on macro-generated macro invocations are now rejected. Suppress fallback and ambiguity errors during type inference. This caused some minor changes to type inference. "},{"id":94,"href":"/docs/1.9.0/","title":"1.9.0","section":"Docs","content":" 1.9.0 # Released on: 26 May, 2016 Branched from master on: 8 April, 2016 Language # The #[deprecated] attribute when applied to an API will generate warnings when used. The warnings may be suppressed with #[allow(deprecated)]. RFC 1270. fn item types are zero sized, and each fn names a unique type. This will break code that transmutes fns, so calling transmute on a fn type will generate a warning for a few cycles, then will be converted to an error. Field and method resolution understand visibility, so private fields and methods cannot prevent the proper use of public fields and methods. The parser considers unicode codepoints in the PATTERN_WHITE_SPACE category to be whitespace. Stabilized APIs # std::panic std::panic::catch_unwind (renamed from recover) std::panic::resume_unwind (renamed from propagate) std::panic::AssertUnwindSafe (renamed from AssertRecoverSafe) std::panic::UnwindSafe (renamed from RecoverSafe) str::is_char_boundary \u0026lt;*const T\u0026gt;::as_ref \u0026lt;*mut T\u0026gt;::as_ref \u0026lt;*mut T\u0026gt;::as_mut AsciiExt::make_ascii_uppercase AsciiExt::make_ascii_lowercase char::decode_utf16 char::DecodeUtf16 char::DecodeUtf16Error char::DecodeUtf16Error::unpaired_surrogate BTreeSet::take BTreeSet::replace BTreeSet::get HashSet::take HashSet::replace HashSet::get OsString::with_capacity OsString::clear OsString::capacity OsString::reserve OsString::reserve_exact OsStr::is_empty OsStr::len std::os::unix::thread RawPthread JoinHandleExt JoinHandleExt::as_pthread_t JoinHandleExt::into_pthread_t HashSet::hasher HashMap::hasher CommandExt::exec File::try_clone SocketAddr::set_ip SocketAddr::set_port SocketAddrV4::set_ip SocketAddrV4::set_port SocketAddrV6::set_ip SocketAddrV6::set_port SocketAddrV6::set_flowinfo SocketAddrV6::set_scope_id slice::copy_from_slice ptr::read_volatile ptr::write_volatile OpenOptions::create_new TcpStream::set_nodelay TcpStream::nodelay TcpStream::set_ttl TcpStream::ttl TcpStream::set_only_v6 TcpStream::only_v6 TcpStream::take_error TcpStream::set_nonblocking TcpListener::set_ttl TcpListener::ttl TcpListener::set_only_v6 TcpListener::only_v6 TcpListener::take_error TcpListener::set_nonblocking UdpSocket::set_broadcast UdpSocket::broadcast UdpSocket::set_multicast_loop_v4 UdpSocket::multicast_loop_v4 UdpSocket::set_multicast_ttl_v4 UdpSocket::multicast_ttl_v4 UdpSocket::set_multicast_loop_v6 UdpSocket::multicast_loop_v6 UdpSocket::set_multicast_ttl_v6 UdpSocket::multicast_ttl_v6 UdpSocket::set_ttl UdpSocket::ttl UdpSocket::set_only_v6 UdpSocket::only_v6 UdpSocket::join_multicast_v4 UdpSocket::join_multicast_v6 UdpSocket::leave_multicast_v4 UdpSocket::leave_multicast_v6 UdpSocket::take_error UdpSocket::connect UdpSocket::send UdpSocket::recv UdpSocket::set_nonblocking Libraries # std::sync::Once is poisoned if its initialization function fails. cell::Ref and cell::RefMut can contain unsized types. Most types implement fmt::Debug. The default buffer size used by BufReader and BufWriter was reduced to 8K, from 64K. This is in line with the buffer size used by other languages. Instant, SystemTime and Duration implement += and -=. Duration additionally implements *= and /=. Skip is a DoubleEndedIterator. From\u0026lt;[u8; 4]\u0026gt; is implemented for Ipv4Addr. Chain implements BufRead. HashMap, HashSet and iterators are covariant. Cargo # Cargo can now run concurrently. Top-level overrides allow specific revisions of crates to be overridden through the entire crate graph. This is intended to make upgrades easier for large projects, by allowing crates to be forked temporarily until they\u0026rsquo;ve been upgraded and republished. Cargo exports a CARGO_PKG_AUTHORS environment variable. Cargo will pass the contents of the RUSTFLAGS variable to rustc on the commandline. rustc arguments can also be specified in the build.rustflags configuration key. Performance # The time complexity of comparing variables for equivalence during type unification is reduced from O(n!) to O(n). This leads to major compilation time improvement in some scenarios. ToString is specialized for str, giving it the same performance as to_owned. Spawning processes with Command::output no longer creates extra threads. #[derive(PartialEq)] and #[derive(PartialOrd)] emit less code for C-like enums. Misc # Passing the --quiet flag to a test runner will produce much-abbreviated output. The Rust Project now publishes std binaries for the mips-unknown-linux-musl, mipsel-unknown-linux-musl, and i586-pc-windows-msvc targets. Compatibility Notes # std::sync::Once is poisoned if its initialization function fails. It is illegal to define methods with the same name in overlapping inherent impl blocks. fn item types are zero sized, and each fn names a unique type. This will break code that transmutes fns, so calling transmute on a fn type will generate a warning for a few cycles, then will be converted to an error. Improvements to const evaluation may trigger new errors when integer literals are out of range. "},{"id":95,"href":"/docs/1.8.0/","title":"1.8.0","section":"Docs","content":" 1.8.0 # Released on: 14 April, 2016 Branched from master on: 26 February, 2016 Language # Rust supports overloading of compound assignment statements like += by implementing the AddAssign, SubAssign, MulAssign, DivAssign, RemAssign, BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, or ShrAssign traits. RFC 953. Empty structs can be defined with braces, as in struct Foo { }, in addition to the non-braced form, struct Foo;. RFC 218. Libraries # Stabilized APIs: str::encode_utf16 (renamed from utf16_units) str::EncodeUtf16 (renamed from Utf16Units) Ref::map RefMut::map ptr::drop_in_place time::Instant time::SystemTime Instant::now Instant::duration_since (renamed from duration_from_earlier) Instant::elapsed SystemTime::now SystemTime::duration_since (renamed from duration_from_earlier) SystemTime::elapsed Various Add/Sub impls for Time and SystemTime SystemTimeError SystemTimeError::duration Various impls for SystemTimeError UNIX_EPOCH AddAssign, SubAssign, MulAssign, DivAssign, RemAssign, BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign. The write! and writeln! macros correctly emit errors if any of their arguments can\u0026rsquo;t be formatted. Various I/O functions support large files on 32-bit Linux. The Unix-specific raw modules, which contain a number of redefined C types are deprecated, including os::raw::unix, os::raw::macos, and os::raw::linux. These modules defined types such as ino_t and dev_t. The inconsistency of these definitions across platforms was making it difficult to implement std correctly. Those that need these definitions should use the libc crate. RFC 1415. The Unix-specific MetadataExt traits, including os::unix::fs::MetadataExt, which expose values such as inode numbers no longer return platform-specific types, but instead return widened integers. RFC 1415. btree_set::{IntoIter, Iter, Range} are covariant. Atomic loads and stores are not volatile. All types in sync::mpsc implement fmt::Debug. Performance # Inlining hash functions lead to a 3% compile-time improvement in some workloads. When using jemalloc, its symbols are unprefixed so that it overrides the libc malloc implementation. This means that for rustc, LLVM is now using jemalloc, which results in a 6% compile-time improvement on a specific workload. Avoid quadratic growth in function size due to cleanups. Misc # 32-bit MSVC builds finally implement unwinding. i686-pc-windows-msvc is now considered a tier-1 platform. The --print targets flag prints a list of supported targets. The --print cfg flag prints the cfgs defined for the current target. rustc can be built with an new Cargo-based build system, written in Rust. It will eventually replace Rust\u0026rsquo;s Makefile-based build system. To enable it configure with configure --rustbuild. Errors for non-exhaustive match patterns now list up to 3 missing variants while also indicating the total number of missing variants if more than 3. Executable stacks are disabled on Linux and BSD. The Rust Project now publishes binary releases of the standard library for a number of tier-2 targets: armv7-unknown-linux-gnueabihf, powerpc-unknown-linux-gnu, powerpc64-unknown-linux-gnu, powerpc64le-unknown-linux-gnu x86_64-rumprun-netbsd. These can be installed with tools such as multirust. Cargo # cargo init creates a new Cargo project in the current directory. It is otherwise like cargo new. Cargo has configuration keys for -v and --color. verbose and color, respectively, go in the [term] section of .cargo/config. Configuration keys that evaluate to strings or integers can be set via environment variables. For example the build.jobs key can be set via CARGO_BUILD_JOBS. Environment variables take precedence over config files. Target-specific dependencies support Rust cfg syntax for describing targets so that dependencies for multiple targets can be specified together. RFC 1361. The environment variables CARGO_TARGET_ROOT, RUSTC, and RUSTDOC take precedence over the build.target-dir, build.rustc, and build.rustdoc configuration values. The child process tree is killed on Windows when Cargo is killed. The build.target configuration value sets the target platform, like --target. Compatibility Notes # Unstable compiler flags have been further restricted. Since 1.0 -Z flags have been considered unstable, and other flags that were considered unstable additionally required passing -Z unstable-options to access. Unlike unstable language and library features though, these options have been accessible on the stable release channel. Going forward, new unstable flags will not be available on the stable release channel, and old unstable flags will warn about their usage. In the future, all unstable flags will be unavailable on the stable release channel. It is no longer possible to match on empty enum variants using the Variant(..) syntax. This has been a warning since 1.6. The Unix-specific MetadataExt traits, including os::unix::fs::MetadataExt, which expose values such as inode numbers no longer return platform-specific types, but instead return widened integers. RFC 1415. Modules sourced from the filesystem cannot appear within arbitrary blocks, but only within other modules. --cfg compiler flags are parsed strictly as identifiers. On Unix, stack overflow triggers a runtime abort instead of a SIGSEGV. Command::spawn and its equivalents return an error if any of its command-line arguments contain interior NULs. Tuple and unit enum variants from other crates are in the type namespace. On Windows rustc emits .lib files for the staticlib library type instead of .a files. Additionally, for the MSVC toolchain, rustc emits import libraries named foo.dll.lib instead of foo.lib. "},{"id":96,"href":"/docs/1.7.0/","title":"1.7.0","section":"Docs","content":" 1.7.0 # Released on: 3 March, 2016 Branched from master on: 15 January, 2016 Libraries # Stabilized APIs Path Path::strip_prefix (renamed from relative_from) path::StripPrefixError (new error type returned from strip_prefix) Ipv4Addr Ipv4Addr::is_loopback Ipv4Addr::is_private Ipv4Addr::is_link_local Ipv4Addr::is_multicast Ipv4Addr::is_broadcast Ipv4Addr::is_documentation Ipv6Addr Ipv6Addr::is_unspecified Ipv6Addr::is_loopback Ipv6Addr::is_multicast Vec Vec::as_slice Vec::as_mut_slice String String::as_str String::as_mut_str Slices \u0026lt;[T]\u0026gt;::clone_from_slice, which now requires the two slices to be the same length \u0026lt;[T]\u0026gt;::sort_by_key checked, saturated, and overflowing operations i32::checked_rem, i32::checked_neg, i32::checked_shl, i32::checked_shr i32::saturating_mul i32::overflowing_add, i32::overflowing_sub, i32::overflowing_mul, i32::overflowing_div i32::overflowing_rem, i32::overflowing_neg, i32::overflowing_shl, i32::overflowing_shr u32::checked_rem, u32::checked_neg, u32::checked_shl, u32::checked_shl u32::saturating_mul u32::overflowing_add, u32::overflowing_sub, u32::overflowing_mul, u32::overflowing_div u32::overflowing_rem, u32::overflowing_neg, u32::overflowing_shl, u32::overflowing_shr and checked, saturated, and overflowing operations for other primitive types FFI ffi::IntoStringError CString::into_string CString::into_bytes CString::into_bytes_with_nul From\u0026lt;CString\u0026gt; for Vec\u0026lt;u8\u0026gt; IntoStringError IntoStringError::into_cstring IntoStringError::utf8_error Error for IntoStringError Hashing std::hash::BuildHasher BuildHasher::Hasher BuildHasher::build_hasher std::hash::BuildHasherDefault HashMap::with_hasher HashMap::with_capacity_and_hasher HashSet::with_hasher HashSet::with_capacity_and_hasher std::collections::hash_map::RandomState RandomState::new Validating UTF-8 is faster by a factor of between 7 and 14x for ASCII input. This means that creating Strings and strs from bytes is faster. The performance of LineWriter (and thus io::stdout) was improved by using memchr to search for newlines. f32::to_degrees and f32::to_radians are stable. The f64 variants were stabilized previously. BTreeMap was rewritten to use less memory and improve the performance of insertion and iteration, the latter by as much as 5x. BTreeSet and its iterators, Iter, IntoIter, and Range are covariant over their contained type. LinkedList and its iterators, Iter and IntoIter are covariant over their contained type. str::replace now accepts a Pattern, like other string searching methods. Any is implemented for unsized types. Hash is implemented for Duration. Misc # When running tests with --test, rustdoc will pass --cfg arguments to the compiler. The compiler is built with RPATH information by default. This means that it will be possible to run rustc when installed in unusual configurations without configuring the dynamic linker search path explicitly. rustc passes --enable-new-dtags to GNU ld. This makes any RPATH entries (emitted with -C rpath) not take precedence over LD_LIBRARY_PATH. Cargo # cargo rustc accepts a --profile flag that runs rustc under any of the compilation profiles, \u0026lsquo;dev\u0026rsquo;, \u0026lsquo;bench\u0026rsquo;, or \u0026rsquo;test\u0026rsquo;. The rerun-if-changed build script directive no longer causes the build script to incorrectly run twice in certain scenarios. Compatibility Notes # Soundness fixes to the interactions between associated types and lifetimes, specified in RFC 1214, now generate errors for code that violates the new rules. This is a significant change that is known to break existing code, so it has emitted warnings for the new error cases since 1.4 to give crate authors time to adapt. The details of what is changing are subtle; read the RFC for more. Several bugs in the compiler\u0026rsquo;s visibility calculations were fixed. Since this was found to break significant amounts of code, the new errors will be emitted as warnings for several release cycles, under the private_in_public lint. Defaulted type parameters were accidentally accepted in positions that were not intended. In this release, defaulted type parameters appearing outside of type definitions will generate a warning, which will become an error in future releases. Parsing \u0026ldquo;.\u0026rdquo; as a float results in an error instead of 0. That is, \u0026quot;.\u0026quot;.parse::\u0026lt;f32\u0026gt;() returns Err, not Ok(0.0). Borrows of closure parameters may not outlive the closure. "},{"id":97,"href":"/docs/1.6.0/","title":"1.6.0","section":"Docs","content":" 1.6.0 # Released on: 21 January, 2016 Branched from master on: 4 December, 2015 Language # The #![no_std] attribute causes a crate to not be linked to the standard library, but only the core library, as described in RFC 1184. The core library defines common types and traits but has no platform dependencies whatsoever, and is the basis for Rust software in environments that cannot support a full port of the standard library, such as operating systems. Most of the core library is now stable. Libraries # Stabilized APIs: Read::read_exact, ErrorKind::UnexpectedEof (renamed from UnexpectedEOF), fs::DirBuilder, fs::DirBuilder::new, fs::DirBuilder::recursive, fs::DirBuilder::create, os::unix::fs::DirBuilderExt, os::unix::fs::DirBuilderExt::mode, vec::Drain, vec::Vec::drain, string::Drain, string::String::drain, vec_deque::Drain, vec_deque::VecDeque::drain, collections::hash_map::Drain, collections::hash_map::HashMap::drain, collections::hash_set::Drain, collections::hash_set::HashSet::drain, collections::binary_heap::Drain, collections::binary_heap::BinaryHeap::drain, Vec::extend_from_slice (renamed from push_all), Mutex::get_mut, Mutex::into_inner, RwLock::get_mut, RwLock::into_inner, Iterator::min_by_key (renamed from min_by), Iterator::max_by_key (renamed from max_by). The core library is stable, as are most of its APIs. The assert_eq! macro supports arguments that don\u0026rsquo;t implement Sized, such as arrays. In this way it behaves more like assert!. Several timer functions that take duration in milliseconds are deprecated in favor of those that take Duration. These include Condvar::wait_timeout_ms, thread::sleep_ms, and thread::park_timeout_ms. The algorithm by which Vec reserves additional elements was tweaked to not allocate excessive space while still growing exponentially. From conversions are implemented from integers to floats in cases where the conversion is lossless. Thus they are not implemented for 32-bit ints to f32, nor for 64-bit ints to f32 or f64. They are also not implemented for isize and usize because the implementations would be platform-specific. From is also implemented from f32 to f64. From\u0026lt;\u0026amp;Path\u0026gt; and From\u0026lt;PathBuf\u0026gt; are implemented for Cow\u0026lt;Path\u0026gt;. From\u0026lt;T\u0026gt; is implemented for Box\u0026lt;T\u0026gt;, Rc\u0026lt;T\u0026gt; and Arc\u0026lt;T\u0026gt;. IntoIterator is implemented for \u0026amp;PathBuf and \u0026amp;Path. BinaryHeap was refactored for modest performance improvements. Sorting slices that are already sorted is 50% faster in some cases. Cargo # Cargo will look in $CARGO_HOME/bin for subcommands by default. Cargo build scripts can specify their dependencies by emitting the rerun-if-changed key. crates.io will reject publication of crates with dependencies that have a wildcard version constraint. Crates with wildcard dependencies were seen to cause a variety of problems, as described in RFC 1241. Since 1.5 publication of such crates has emitted a warning. cargo clean accepts a --release flag to clean the release folder. A variety of artifacts that Cargo failed to clean are now correctly deleted. Misc # The unreachable_code lint warns when a function call\u0026rsquo;s argument diverges. The parser indicates failures that may be caused by confusingly-similar Unicode characters Certain macro errors are reported at definition time, not expansion. Compatibility Notes # The compiler no longer makes use of the RUST_PATH environment variable when locating crates. This was a pre-cargo feature for integrating with the package manager that was accidentally never removed. A number of bugs were fixed in the privacy checker that could cause previously-accepted code to break. Modules and unit/tuple structs may not share the same name. Bugs in pattern matching unit structs were fixed. The tuple struct pattern syntax (Foo(..)) can no longer be used to match unit structs. This is a warning now, but will become an error in future releases. Patterns that share the same name as a const are now an error. A bug was fixed that causes rustc not to apply default type parameters when resolving certain method implementations of traits defined in other crates. "},{"id":98,"href":"/docs/1.5.0/","title":"1.5.0","section":"Docs","content":" 1.5.0 # Released on: 10 December, 2015 Branched from master on: 4 December, 2015 ~700 changes, numerous bugfixes Highlights # Stabilized APIs: BinaryHeap::from, BinaryHeap::into_sorted_vec, BinaryHeap::into_vec, Condvar::wait_timeout, FileTypeExt::is_block_device, FileTypeExt::is_char_device, FileTypeExt::is_fifo, FileTypeExt::is_socket, FileTypeExt, Formatter::alternate, Formatter::fill, Formatter::precision, Formatter::sign_aware_zero_pad, Formatter::sign_minus, Formatter::sign_plus, Formatter::width, Iterator::cmp, Iterator::eq, Iterator::ge, Iterator::gt, Iterator::le, Iterator::lt, Iterator::ne, Iterator::partial_cmp, Path::canonicalize, Path::exists, Path::is_dir, Path::is_file, Path::metadata, Path::read_dir, Path::read_link, Path::symlink_metadata, Utf8Error::valid_up_to, Vec::resize, VecDeque::as_mut_slices, VecDeque::as_slices, VecDeque::insert, VecDeque::shrink_to_fit, VecDeque::swap_remove_back, VecDeque::swap_remove_front, slice::split_first_mut, slice::split_first, slice::split_last_mut, slice::split_last, char::from_u32_unchecked, fs::canonicalize, str::MatchIndices, str::RMatchIndices, str::match_indices, str::rmatch_indices, str::slice_mut_unchecked, string::ParseError. Rust applications hosted on crates.io can be installed locally to ~/.cargo/bin with the cargo install command. Among other things this makes it easier to augment Cargo with new subcommands: when a binary named e.g. cargo-foo is found in $PATH it can be invoked as cargo foo. Crates with wildcard (*) dependencies will emit warnings when published. In 1.6 it will no longer be possible to publish crates with wildcard dependencies. Breaking Changes # The rules determining when a particular lifetime must outlive a particular value (known as \u0026lsquo;dropck\u0026rsquo;) have been modified to not rely on parametricity. Implementations of AsRef and AsMut were added to Box, Rc, and Arc. Because these smart pointer types implement Deref, this causes breakage in cases where the interior type contains methods of the same name. Correct a bug in Rc/Arc that caused dropck to be unaware that they could drop their content. Soundness fix. All method invocations are properly checked for well-formedness. Soundness fix. Traits whose supertraits contain Self are not object safe. Soundness fix. Target specifications support a no_default_libraries setting that controls whether -nodefaultlibs is passed to the linker, and in turn the is_like_windows setting no longer affects the -nodefaultlibs flag. #[derive(Show)], long-deprecated, has been removed. The #[inline] and #[repr] attributes can only appear in valid locations. Native libraries linked from the local crate are passed to the linker before native libraries from upstream crates. Two rarely-used attributes, #[no_debug] and #[omit_gdb_pretty_printer_section] are feature gated. Negation of unsigned integers, which has been a warning for several releases, is now behind a feature gate and will generate errors. The parser accidentally accepted visibility modifiers on enum variants, a bug which has been fixed. A bug was fixed that allowed use statements to import unstable features. Language # When evaluating expressions at compile-time that are not compile-time constants (const-evaluating expressions in non-const contexts), incorrect code such as overlong bitshifts and arithmetic overflow will generate a warning instead of an error, delaying the error until runtime. This will allow the const-evaluator to be expanded in the future backwards-compatibly. The improper_ctypes lint no longer warns about using isize and usize in FFI. Libraries # Arc\u0026lt;T\u0026gt; and Rc\u0026lt;T\u0026gt; are covariant with respect to T instead of invariant. Default is implemented for mutable slices. FromStr is implemented for SockAddrV4 and SockAddrV6. There are now From conversions between floating point types where the conversions are lossless. There are now From conversions between integer types where the conversions are lossless. fs::Metadata implements Clone. The parse method accepts a leading \u0026ldquo;+\u0026rdquo; when parsing integers. AsMut is implemented for Vec. The clone_from implementations for String and BinaryHeap have been optimized and no longer rely on the default impl. The extern \u0026quot;Rust\u0026quot;, extern \u0026quot;C\u0026quot;, unsafe extern \u0026quot;Rust\u0026quot; and unsafe extern \u0026quot;C\u0026quot; function types now implement Clone, PartialEq, Eq, PartialOrd, Ord, Hash, fmt::Pointer, and fmt::Debug for up to 12 arguments. Dropping Vecs is much faster in unoptimized builds when the element types don\u0026rsquo;t implement Drop. A bug that caused in incorrect behavior when combining VecDeque with zero-sized types was resolved. PartialOrd for slices is faster. Miscellaneous # Crate metadata size was reduced by 20%. Improvements to code generation reduced the size of libcore by 3.3 MB and rustc\u0026rsquo;s memory usage by 18MB. Improvements to deref translation increased performance in unoptimized builds. Various errors in trait resolution are deduplicated to only be reported once. Rust has preliminary support for rumprun kernels. Rust has preliminary support for NetBSD on amd64. "},{"id":99,"href":"/docs/1.4.0/","title":"1.4.0","section":"Docs","content":" 1.4.0 # Released on: 29 October, 2015 Branched from master on: 4 December, 2015 ~1200 changes, numerous bugfixes Highlights # Windows builds targeting the 64-bit MSVC ABI and linker (instead of GNU) are now supported and recommended for use. Breaking Changes # Several changes have been made to fix type soundness and improve the behavior of associated types. See RFC 1214. Although we have mostly introduced these changes as warnings this release, to become errors next release, there are still some scenarios that will see immediate breakage. The str::lines and BufRead::lines iterators treat \\r\\n as line breaks in addition to \\n. Loans of 'static lifetime extend to the end of a function. str::parse no longer introduces avoidable rounding error when parsing floating point numbers. Together with earlier changes to float formatting/output, \u0026ldquo;round trips\u0026rdquo; like f.to_string().parse() now preserve the value of f exactly. Additionally, leading plus signs are now accepted. Language # use statements that import multiple items can now rename them, as in use foo::{bar as kitten, baz as puppy}. Binops work correctly on fat pointers. pub extern crate, which does not behave as expected, issues a warning until a better solution is found. Libraries # Many APIs were stabilized: \u0026lt;Box\u0026lt;str\u0026gt;\u0026gt;::into_string, Arc::downgrade, Arc::get_mut, Arc::make_mut, Arc::try_unwrap, Box::from_raw, Box::into_raw, CStr::to_str, CStr::to_string_lossy, CString::from_raw, CString::into_raw, IntoRawFd::into_raw_fd, IntoRawFd, IntoRawHandle::into_raw_handle, IntoRawHandle, IntoRawSocket::into_raw_socket, IntoRawSocket, Rc::downgrade, Rc::get_mut, Rc::make_mut, Rc::try_unwrap, Result::expect, String::into_boxed_str, TcpStream::read_timeout, TcpStream::set_read_timeout, TcpStream::set_write_timeout, TcpStream::write_timeout, UdpSocket::read_timeout, UdpSocket::set_read_timeout, UdpSocket::set_write_timeout, UdpSocket::write_timeout, Vec::append, Vec::split_off, VecDeque::append, VecDeque::retain, VecDeque::split_off, rc::Weak::upgrade, rc::Weak, slice::Iter::as_slice, slice::IterMut::into_slice, str::CharIndices::as_str, str::Chars::as_str, str::split_at_mut, str::split_at, sync::Weak::upgrade, sync::Weak, thread::park_timeout, thread::sleep. Some APIs were deprecated: BTreeMap::with_b, BTreeSet::with_b, Option::as_mut_slice, Option::as_slice, Result::as_mut_slice, Result::as_slice, f32::from_str_radix, f64::from_str_radix. Reverse-searching strings is faster with the \u0026rsquo;two-way' algorithm. std::io::copy allows ?Sized arguments. The Windows, Chunks, and ChunksMut iterators over slices all override count, nth and last with an O(1) implementation. Default is implemented for arrays up to [T; 32]. IntoRawFd has been added to the Unix-specific prelude, IntoRawSocket and IntoRawHandle to the Windows-specific prelude. Extend\u0026lt;String\u0026gt; and FromIterator\u0026lt;String are both implemented for String. IntoIterator is implemented for references to Option and Result. HashMap and HashSet implement Extend\u0026lt;\u0026amp;T\u0026gt; where T: Copy as part of RFC 839. This will cause type inference breakage in rare situations. BinaryHeap implements Debug. Borrow and BorrowMut are implemented for fixed-size arrays. extern fns with the \u0026ldquo;Rust\u0026rdquo; and \u0026ldquo;C\u0026rdquo; ABIs implement common traits including Eq, Ord, Debug, Hash. String comparison is faster. \u0026amp;mut T where T: std::fmt::Write also implements std::fmt::Write. A stable regression in VecDeque::push_back and other capacity-altering methods that caused panics for zero-sized types was fixed. Function pointers implement traits for up to 12 parameters. Miscellaneous # The compiler no longer uses the \u0026lsquo;morestack\u0026rsquo; feature to prevent stack overflow. Instead it uses guard pages and stack probes (though stack probes are not yet implemented on any platform but Windows). The compiler matches traits faster when projections are involved. The \u0026lsquo;improper_ctypes\u0026rsquo; lint no longer warns about use of isize and usize. Cargo now displays useful information about what its doing during cargo update. "},{"id":100,"href":"/docs/1.3.0/","title":"1.3.0","section":"Docs","content":" 1.3.0 # Released on: 17 September, 2015 Branched from master on: 4 December, 2015 ~900 changes, numerous bugfixes Highlights # The new object lifetime defaults have been turned on after a cycle of warnings about the change. Now types like \u0026amp;'a Box\u0026lt;Trait\u0026gt; (or \u0026amp;'a Rc\u0026lt;Trait\u0026gt;, etc) will change from being interpreted as \u0026amp;'a Box\u0026lt;Trait+'a\u0026gt; to \u0026amp;'a Box\u0026lt;Trait+'static\u0026gt;. The Rustonomicon is a new book in the official documentation that dives into writing unsafe Rust. The Duration API, has been stabilized. This basic unit of timekeeping is employed by other std APIs, as well as out-of-tree time crates. Breaking Changes # The new object lifetime defaults have been turned on after a cycle of warnings about the change. There is a known regression in how object lifetime elision is interpreted, the proper solution for which is undetermined. The #[prelude_import] attribute, an internal implementation detail, was accidentally stabilized previously. It has been put behind the prelude_import feature gate. This change is believed to break no existing code. The behavior of size_of_val and align_of_val is more sane for dynamically sized types. Code that relied on the previous behavior is thought to be broken. The dropck rules, which checks that destructors can\u0026rsquo;t access destroyed values, [have been updated][dropck] to match the RFC. This fixes some soundness holes, and as such will cause some previously-compiling code to no longer build. Language # The new object lifetime defaults have been turned on after a cycle of warnings about the change. Semicolons may now follow types and paths in macros. The behavior of size_of_val and align_of_val is more sane for dynamically sized types. Code that relied on the previous behavior is not known to exist, and suspected to be broken. 'static variables may now be recursive. ref bindings choose between Deref and DerefMut implementations correctly. The dropck rules, which checks that destructors can\u0026rsquo;t access destroyed values, [have been updated][dropck] to match the RFC. Libraries # The Duration API, has been stabilized, as well as the std::time module, which presently contains only Duration. Box\u0026lt;str\u0026gt; and Box\u0026lt;[T]\u0026gt; both implement Clone. The owned C string, CString, implements Borrow and the borrowed C string, CStr, implements ToOwned. The two of these allow C strings to be borrowed and cloned in generic code. CStr implements Debug. AtomicPtr implements Debug. Error trait objects can be downcast to their concrete types in many common configurations, using the is, downcast, downcast_ref and downcast_mut methods, similarly to the Any trait. Searching for substrings now employs the two-way algorithm instead of doing a naive search. This gives major speedups to a number of methods, including contains, find, rfind, split. starts_with and ends_with are also faster. The performance of PartialEq for slices is much faster. The Hash trait offers the default method, hash_slice, which is overridden and optimized by the implementations for scalars. The Hasher trait now has a number of specialized write_* methods for primitive types, for efficiency. The I/O-specific error type, std::io::Error, gained a set of methods for accessing the \u0026lsquo;inner error\u0026rsquo;, if any: get_ref, get_mut, into_inner. As well, the implementation of std::error::Error::cause also delegates to the inner error. process::Child gained the id method, which returns a u32 representing the platform-specific process identifier. The connect method on slices is deprecated, replaced by the new join method (note that both of these are on the unstable SliceConcatExt trait, but through the magic of the prelude are available to stable code anyway). The Div operator is implemented for Wrapping types. DerefMut is implemented for String. Performance of SipHash (the default hasher for HashMap) is better for long data. AtomicPtr implements Send. The read_to_end implementations for Stdin and File are now specialized to use uninitialized buffers for increased performance. Lifetime parameters of foreign functions are now resolved properly. Misc # Rust can now, with some coercion, produce programs that run on Windows XP, though XP is not considered a supported platform. Porting Rust on Windows from the GNU toolchain to MSVC continues (1, 2, 3, 4). It is still not recommended for use in 1.3, though should be fully-functional in the 64-bit 1.4 beta. On Fedora-based systems installation will properly configure the dynamic linker. The compiler gained many new extended error descriptions, which can be accessed with the --explain flag. The dropck pass, which checks that destructors can\u0026rsquo;t access destroyed values, has been rewritten. This fixes some soundness holes, and as such will cause some previously-compiling code to no longer build. rustc now uses LLVM to write archive files where possible. Eventually this will eliminate the compiler\u0026rsquo;s dependency on the ar utility. Rust has preliminary support for i686 FreeBSD (it has long supported FreeBSD on x86_64). The unused_mut, unconditional_recursion, improper_ctypes, and negate_unsigned lints are more strict. If landing pads are disabled (with -Z no-landing-pads), panic! will kill the process instead of leaking. "},{"id":101,"href":"/docs/1.2.0/","title":"1.2.0","section":"Docs","content":" 1.2.0 # Released on: 7 August, 2015 Branched from master on: 4 December, 2015 ~1200 changes, numerous bugfixes Highlights # Dynamically-sized-type coercions allow smart pointer types like Rc to contain types without a fixed size, arrays and trait objects, finally enabling use of Rc\u0026lt;[T]\u0026gt; and completing the implementation of DST. Parallel codegen is now working again, which can substantially speed up large builds in debug mode; It also gets another ~33% speedup when bootstrapping on a 4 core machine (using 8 jobs). It\u0026rsquo;s not enabled by default, but will be \u0026ldquo;in the near future\u0026rdquo;. It can be activated with the -C codegen-units=N flag to rustc. This is the first release with experimental support for linking with the MSVC linker and lib C on Windows (instead of using the GNU variants via MinGW). It is yet recommended only for the most intrepid Rustaceans. Benchmark compilations are showing a 30% improvement in bootstrapping over 1.1. Breaking Changes # The to_uppercase and to_lowercase methods on char now do unicode case mapping, which is a previously-planned change in behavior and considered a bugfix. mem::align_of now specifies the minimum alignment for T, which is usually the alignment programs are interested in, and the same value reported by clang\u0026rsquo;s alignof. mem::min_align_of is deprecated. This is not known to break real code. The #[packed] attribute is no longer silently accepted by the compiler. This attribute did nothing and code that mentioned it likely did not work as intended. Associated type defaults are now behind the associated_type_defaults feature gate. In 1.1 associated type defaults did not work, but could be mentioned syntactically. As such this breakage has minimal impact. Language # Patterns with ref mut now correctly invoke DerefMut when matching against dereferenceable values. Libraries # The Extend trait, which grows a collection from an iterator, is implemented over iterators of references, for String, Vec, LinkedList, VecDeque, EnumSet, BinaryHeap, VecMap, BTreeSet and BTreeMap. RFC. The iter::once function returns an iterator that yields a single element, and iter::empty returns an iterator that yields no elements. The matches and rmatches methods on str return iterators over substring matches. Cell and RefCell both implement Eq. A number of methods for wrapping arithmetic are added to the integral types, wrapping_div, wrapping_rem, wrapping_neg, wrapping_shl, wrapping_shr. These are in addition to the existing wrapping_add, wrapping_sub, and wrapping_mul methods, and alternatives to the Wrapping type.. It is illegal for the default arithmetic operations in Rust to overflow; the desire to wrap must be explicit. The {:#?} formatting specifier displays the alternate, pretty-printed form of the Debug formatter. This feature was actually introduced prior to 1.0 with little fanfare. fmt::Formatter implements fmt::Write, a fmt-specific trait for writing data to formatted strings, similar to io::Write. fmt::Formatter adds \u0026lsquo;debug builder\u0026rsquo; methods, debug_struct, debug_tuple, debug_list, debug_set, debug_map. These are used by code generators to emit implementations of Debug. str has new to_uppercase and to_lowercase methods that convert case, following Unicode case mapping. It is now easier to handle poisoned locks. The PoisonError type, returned by failing lock operations, exposes into_inner, get_ref, and get_mut, which all give access to the inner lock guard, and allow the poisoned lock to continue to operate. The is_poisoned method of RwLock and Mutex can poll for a poisoned lock without attempting to take the lock. On Unix the FromRawFd trait is implemented for Stdio, and AsRawFd for ChildStdin, ChildStdout, ChildStderr. On Windows the FromRawHandle trait is implemented for Stdio, and AsRawHandle for ChildStdin, ChildStdout, ChildStderr. io::ErrorKind has a new variant, InvalidData, which indicates malformed input. Misc # rustc employs smarter heuristics for guessing at typos. rustc emits more efficient code for no-op conversions between unsafe pointers. Fat pointers are now passed in pairs of immediate arguments, resulting in faster compile times and smaller code. "},{"id":102,"href":"/docs/1.1.0/","title":"1.1.0","section":"Docs","content":" 1.1.0 # Released on: 25 June, 2015 Branched from master on: 4 December, 2015 ~850 changes, numerous bugfixes Highlights # The std::fs module has been expanded to expand the set of functionality exposed: DirEntry now supports optimizations like file_type and metadata which don\u0026rsquo;t incur a syscall on some platforms. A symlink_metadata function has been added. The fs::Metadata structure now lowers to its OS counterpart, providing access to all underlying information. The compiler now contains extended explanations of many errors. When an error with an explanation occurs the compiler suggests using the --explain flag to read the explanation. Error explanations are also available online. Thanks to multiple improvements to type checking, as well as other work, the time to bootstrap the compiler decreased by 32%. Libraries # The str::split_whitespace method splits a string on unicode whitespace boundaries. On both Windows and Unix, new extension traits provide conversion of I/O types to and from the underlying system handles. On Unix, these traits are FromRawFd and AsRawFd, on Windows FromRawHandle and AsRawHandle. These are implemented for File, TcpStream, TcpListener, and UpdSocket. Further implementations for std::process will be stabilized later. On Unix, std::os::unix::symlink creates symlinks. On Windows, symlinks can be created with std::os::windows::symlink_dir and std::os::windows::symlink_file. The mpsc::Receiver type can now be converted into an iterator with into_iter on the IntoIterator trait. Ipv4Addr can be created from u32 with the From\u0026lt;u32\u0026gt; implementation of the From trait. The Debug implementation for RangeFull creates output that is more consistent with other implementations. Debug is implemented for File. The Default implementation for Arc no longer requires Sync + Send. The Iterator methods count, nth, and last have been overridden for slices to have O(1) performance instead of O(n). Incorrect handling of paths on Windows has been improved in both the compiler and the standard library. AtomicPtr gained a Default implementation. In accordance with Rust\u0026rsquo;s policy on arithmetic overflow abs now panics on overflow when debug assertions are enabled. The Cloned iterator, which was accidentally left unstable for 1.0 has been stabilized. The Incoming iterator, which iterates over incoming TCP connections, and which was accidentally unnamable in 1.0, is now properly exported. BinaryHeap no longer corrupts itself when functions called by sift_up or sift_down panic. The split_off method of LinkedList no longer corrupts the list in certain scenarios. Misc # Type checking performance has improved notably with multiple improvements. The compiler suggests code changes for more errors. rustc and it\u0026rsquo;s build system have experimental support for building toolchains against MUSL instead of glibc on Linux. The compiler defines the target_env cfg value, which is used for distinguishing toolchains that are otherwise for the same platform. Presently this is set to gnu for common GNU Linux targets and for MinGW targets, and musl for MUSL Linux targets. The cargo rustc command invokes a build with custom flags to rustc. Android executables are always position independent. The drop_with_repr_extern lint warns about mixing repr(C) with Drop. "}]