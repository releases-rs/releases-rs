<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust Changelogs</title><link>https://releases.rs/docs/</link><description>Recent content on Rust Changelogs</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://releases.rs/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://releases.rs/docs/1.87.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.87.0/</guid><description>&lt;h1 id="1870-nightly">
 1.87.0 nightly
 &lt;a class="anchor" href="#1870-nightly">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint warning">
 &lt;p>&lt;strong>Unreleased&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Will be stable on: &lt;em>15 May, 2025&lt;/em>&lt;/li>
&lt;li>Will branch from master on: &lt;em>28 March, 2025&lt;/em>&lt;/li>
&lt;/ul>
&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/136127">Allow &lt;code>*const W&amp;lt;dyn A&amp;gt; -&amp;gt; *const dyn A&lt;/code> ptr cast&lt;/a> &lt;em>(merged 2 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/137957">Remove i586-pc-windows-msvc&lt;/a> &lt;em>(merged 3 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/138183">Tracking issue for release notes of #137606: add a &amp;ldquo;future&amp;rdquo; edition&lt;/a> &lt;em>(merged 3 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/137327">Undeprecate env::home_dir&lt;/a> &lt;em>(merged 4 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/136831">Update stdarch&lt;/a> &lt;em>(merged 5 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/137569">Stabilize &lt;code>string_extend_from_within&lt;/code>&lt;/a> &lt;em>(merged 6 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135408">x86: use SSE2 to pass float and SIMD types&lt;/a> &lt;em>(merged 20 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135763">Update to LLVM 20&lt;/a> &lt;em>(merged 22 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127581">Fix crate name validation&lt;/a> &lt;em>(merged 23 days ago)&lt;/em>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.86.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.86.0/</guid><description>&lt;h1 id="1860-beta">
 1.86.0 beta
 &lt;a class="anchor" href="#1860-beta">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint warning">
 &lt;p>&lt;strong>Unreleased, branched from master&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Will be stable on: &lt;em>3 April, 2025&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>14 February, 2025&lt;/em>&lt;/li>
&lt;/ul>
&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/137037">add x86-sse2 (32bit) ABI that requires SSE2 target feature&lt;/a> &lt;em>(merged 24 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135439">Make &lt;code>-O&lt;/code> mean &lt;code>OptLevel::Aggressive&lt;/code>&lt;/a> &lt;em>(merged 25 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134633">Stabilize &lt;code>get_many_mut&lt;/code> as &lt;code>get_disjoint_mut&lt;/code>&lt;/a> &lt;em>(merged 26 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/136698">Replace i686-unknown-redox target with i586-unknown-redox&lt;/a> &lt;em>(merged 27 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/136700">i686-unknown-hurd-gnu: bump baseline CPU to Pentium 4&lt;/a> &lt;em>(merged 31 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134367">Stabilize &lt;code>feature(trait_upcasting)&lt;/code>&lt;/a> &lt;em>(merged 32 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134424">Insert null checks for pointer dereferences when debug assertions are enabled&lt;/a> &lt;em>(merged 39 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/133631">Support QNX 7.1 with &lt;code>io-sock&lt;/code>+libstd and QNX 8.0 (&lt;code>no_std&lt;/code> only)&lt;/a> &lt;em>(merged 44 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/133951">Make the wasm_c_abi future compat warning a hard error&lt;/a> &lt;em>(merged 44 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134300">remove long-deprecated no-op attributes no_start and crate_id&lt;/a> &lt;em>(merged 44 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119286">show linker output even if the linker succeeds&lt;/a> &lt;em>(merged 45 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/135689">Tracking issue for release notes of #134299: remove support for the (unstable) #[start] attribute&lt;/a> &lt;em>(merged 52 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/132397">Make missing_abi lint warn-by-default.&lt;/a> &lt;em>(merged 55 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134143">Convert &lt;code>struct FromBytesWithNulError&lt;/code> into enum&lt;/a> &lt;em>(merged 55 days ago)&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/135276">Tracking issue for release notes of #135275: Add Pin::as_deref_mut to relnotes&lt;/a> &lt;em>(merged 61 days ago)&lt;/em>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.85.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.85.0/</guid><description>&lt;h1 id="1850">
 1.85.0
 &lt;a class="anchor" href="#1850">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 February, 2025&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>3 January, 2025&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/133349">The 2024 Edition is now stable.&lt;/a>
See &lt;a href="https://doc.rust-lang.org/nightly/edition-guide/rust-2024/index.html">the edition guide&lt;/a> for more details.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/132706">Stabilize async closures&lt;/a>
See &lt;a href="https://rust-lang.github.io/rfcs/3668-async-closures.html">RFC 3668&lt;/a> for more details.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/132056">Stabilize &lt;code>#[diagnostic::do_not_recommend]&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118833">Add &lt;code>unpredictable_function_pointer_comparisons&lt;/code> lint to warn against function pointer comparisons&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/131558">Lint on combining &lt;code>#[no_mangle]&lt;/code> and &lt;code>#[export_name]&lt;/code> attributes.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.84.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.84.1/</guid><description>&lt;h1 id="1841">
 1.84.1
 &lt;a class="anchor" href="#1841">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>30 January, 2025&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/133304/">Fix ICE 132920 in duplicate-crate diagnostics.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/133828/">Fix errors for overlapping impls in incremental rebuilds.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135618/">Fix slow compilation related to the next-generation trait solver.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135643/">Fix debuginfo when LLVM&amp;rsquo;s location discriminator value limit is exceeded.&lt;/a>&lt;/li>
&lt;li>Fixes for building Rust from source:
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/134240/">Only try to distribute &lt;code>llvm-objcopy&lt;/code> if llvm tools are enabled.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135433/">Add Profile Override for Non-Git Sources.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135585/">Resolve symlinks of LLVM tool binaries before copying them.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/135722/">Make it possible to use ci-rustc on tarball sources.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.84.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.84.0/</guid><description>&lt;h1 id="1840">
 1.84.0
 &lt;a class="anchor" href="#1840">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 January, 2025&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>22 November, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/121560/">Allow &lt;code>#[deny]&lt;/code> inside &lt;code>#[forbid]&lt;/code> as a no-op&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129884">Show a warning when &lt;code>-Ctarget-feature&lt;/code> is used to toggle features that can lead to unsoundness due to ABI mismatches&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/130654">Use the next-generation trait solver in coherence&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/131857">Allow coercions to drop the principal of trait objects&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125205">Support &lt;code>/&lt;/code> as the path separator for &lt;code>include!()&lt;/code> in all cases on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129248">Taking a raw ref (&lt;code>raw (const|mut)&lt;/code>) of a deref of a pointer (&lt;code>*ptr&lt;/code>) is now safe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/131258">Stabilize s390x inline assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/131781">Stabilize Arm64EC inline assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128985">Lint against creating pointers to immediately dropped temporaries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129582">Execute drop glue when unwinding in an &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> function&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.83.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.83.0/</guid><description>&lt;h1 id="1830">
 1.83.0
 &lt;a class="anchor" href="#1830">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>28 November, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>11 October, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129195">Stabilize &lt;code>&amp;amp;mut&lt;/code>, &lt;code>*mut&lt;/code>, &lt;code>&amp;amp;Cell&lt;/code>, and &lt;code>*const Cell&lt;/code> in const.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129759">Allow creating references to statics in &lt;code>const&lt;/code> initializers.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/126452">Implement raw lifetimes and labels (&lt;code>'r#ident&lt;/code>).&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128778">Define behavior when atomic and non-atomic reads race.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128934">Non-exhaustive structs may now be empty.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129392">Disallow implicit coercions from places of type &lt;code>!&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129753">&lt;code>const extern&lt;/code> functions can now be defined for other calling conventions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129972">Stabilize &lt;code>expr_2021&lt;/code> macro fragment specifier in all editions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127117">The &lt;code>non_local_definitions&lt;/code> lint now fires on less code and warns by default.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.82.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.82.0/</guid><description>&lt;h1 id="1820">
 1.82.0
 &lt;a class="anchor" href="#1820">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>17 October, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>30 August, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120221/">Don&amp;rsquo;t make statement nonterminals match pattern nonterminals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/122792">Patterns matching empty types can now be omitted in common cases&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124336">Enforce supertrait outlives obligations when using trait impls&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125834">&lt;code>addr_of(_mut)!&lt;/code> macros and the newly stabilized &lt;code>&amp;amp;raw (const|mut)&lt;/code> are now safe to use with all static items&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/126152/">size_of_val_raw: for length 0 this is safe to call&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127054/">Reorder trait bound modifiers &lt;em>after&lt;/em> &lt;code>for&amp;lt;...&amp;gt;&lt;/code> binder in trait bounds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127672">Stabilize &lt;code>+ use&amp;lt;'lt&amp;gt;&lt;/code> opaque type precise capturing (RFC 3617)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127679">Stabilize &lt;code>&amp;amp;raw const&lt;/code> and &lt;code>&amp;amp;raw mut&lt;/code> operators (RFC 2582)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/127921">Stabilize unsafe extern blocks (RFC 3484)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128284">Stabilize nested field access in &lt;code>offset_of!&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128438">Do not require &lt;code>T&lt;/code> to be live when dropping &lt;code>[T; 0]&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128570">Stabilize &lt;code>const&lt;/code> operands in inline assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128596">Stabilize floating-point arithmetic in &lt;code>const fn&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128771">Stabilize explicit opt-in to unsafe attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/129559">Document NaN bit patterns guarantees&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.81.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.81.0/</guid><description>&lt;h1 id="1810">
 1.81.0
 &lt;a class="anchor" href="#1810">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>5 September, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>19 July, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116088/">Abort on uncaught panics in &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> functions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117967/">Fix ambiguous cases of multiple &lt;code>&amp;amp;&lt;/code> in elided self lifetimes.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120924/">Stabilize &lt;code>#[expect]&lt;/code> for lints (RFC 2383),&lt;/a> like &lt;code>#[allow]&lt;/code> with a warning if the lint is &lt;em>not&lt;/em> fulfilled.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/123962/">Change method resolution to constrain hidden types instead of rejecting method candidates.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124211/">Bump &lt;code>elided_lifetimes_in_associated_constant&lt;/code> to deny.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124921/">&lt;code>offset_from&lt;/code>: always allow pointers to point to the same address.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125447/">Allow constraining opaque types during subtyping in the trait system.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125610/">Allow constraining opaque types during various unsizing casts.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/126762/">Deny keyword lifetimes pre-expansion.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.80.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.80.1/</guid><description>&lt;h1 id="1801">
 1.80.1
 &lt;a class="anchor" href="#1801">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>8 August, 2024&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128271">Fix miscompilation in the jump threading MIR optimization when comparing floats&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/128618">Revert changes to the &lt;code>dead_code&lt;/code> lint from 1.80.0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.80.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.80.0/</guid><description>&lt;h1 id="1800">
 1.80.0
 &lt;a class="anchor" href="#1800">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 July, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>7 June, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116675/">Document maximum allocation size&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117329/">Allow zero-byte offsets and ZST read/writes on arbitrary pointers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124048/">Support C23&amp;rsquo;s variadics without a named parameter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124459/">Stabilize &lt;code>exclusive_range_pattern&lt;/code> feature&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124870">Guarantee layout and ABI of &lt;code>Result&lt;/code> in some scenarios&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124892/">Update cc crate to v1.0.97 allowing additional spectre mitigations on MSVC targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125360/">Allow field reordering on types marked &lt;code>repr(packed(1))&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/123939/">Add a lint against never type fallback affecting unsafe code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125049/">Disallow cast with trailing braced macro in let-else&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125156/">Expand &lt;code>for_loops_over_fallibles&lt;/code> lint to lint on fallibles behind references.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125417/">self-contained linker: retry linking without &lt;code>-fuse-ld=lld&lt;/code> on CCs that don&amp;rsquo;t support it&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125863/">Do not parse CVarArgs (&lt;code>...&lt;/code>) as a type in trait bounds&lt;/a>&lt;/li>
&lt;li>Improvements to LLDB formatting &lt;a href="https://github.com/rust-lang/rust/pull/124458">#124458&lt;/a> &lt;a href="https://github.com/rust-lang/rust/pull/124500">#124500&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124858/">For the wasm32-wasip2 target default to PIC and do not use &lt;code>-fuse-ld=lld&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/125023/">Add x86_64-unknown-linux-none as a tier 3 target&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/124097/">Lint on &lt;code>foo.into_iter()&lt;/code> resolving to &lt;code>&amp;amp;Box&amp;lt;[T]&amp;gt;: IntoIterator&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.79.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.79.0/</guid><description>&lt;h1 id="1790">
 1.79.0
 &lt;a class="anchor" href="#1790">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>13 June, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>26 April, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/104087/">Stabilize inline &lt;code>const {}&lt;/code> expressions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116935/">Prevent opaque types being instantiated twice with different regions within the same function.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117457/">Stabilize WebAssembly target features that are in phase 4 and 5.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118391/">Add the &lt;code>redundant_lifetimes&lt;/code> lint to detect lifetimes which are semantically redundant.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120144/">Stabilize the &lt;code>unnameable_types&lt;/code> lint for public types that can&amp;rsquo;t be named.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120845/">Enable debuginfo in macros, and stabilize &lt;code>-C collapse-macro-debuginfo&lt;/code> and &lt;code>#[collapse_debuginfo]&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/121346/">Propagate temporary lifetime extension into &lt;code>if&lt;/code> and &lt;code>match&lt;/code> expressions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/121557/">Restrict promotion of &lt;code>const fn&lt;/code> calls.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/121720/">Warn against refining impls of crate-private traits with &lt;code>refining_impl_trait&lt;/code> lint.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/122055/">Stabilize associated type bounds (RFC 2289).&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/122060/">Stabilize importing &lt;code>main&lt;/code> from other modules or crates.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115538">Check return types of function types for well-formedness&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116891/">Rework &lt;code>impl Trait&lt;/code> lifetime inference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/122791">Change inductive trait solver cycles to be ambiguous&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.78.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.78.0/</guid><description>&lt;h1 id="1780">
 1.78.0
 &lt;a class="anchor" href="#1780">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>2 May, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>15 March, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119590/">Stabilize &lt;code>#[cfg(target_abi = ...)]&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119888/">Stabilize the &lt;code>#[diagnostic]&lt;/code> namespace and &lt;code>#[diagnostic::on_unimplemented]&lt;/code> attribute&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120103/">Make async-fn-in-trait implementable with concrete signatures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116284/">Make matching on NaN a hard error, and remove the rest of &lt;code>illegal_floating_point_literal_pattern&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117614/">static mut: allow mutable reference to arbitrary types, not just slices and arrays&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118983/">Extend &lt;code>invalid_reference_casting&lt;/code> to include references casting to bigger memory layout&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118879/">Add &lt;code>non_contiguous_range_endpoints&lt;/code> lint for singleton gaps after exclusive ranges&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117918/">Add &lt;code>wasm_c_abi&lt;/code> lint for use of older wasm-bindgen versions&lt;/a>
This lint currently only works when using Cargo.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120423/">Update &lt;code>indirect_structural_match&lt;/code> and &lt;code>pointer_structural_match&lt;/code> lints to match RFC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/120805/">Make non-&lt;code>PartialEq&lt;/code>-typed consts as patterns a hard error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/121720/">Split &lt;code>refining_impl_trait&lt;/code> lint into &lt;code>_reachable&lt;/code>, &lt;code>_internal&lt;/code> variants&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119849">Remove unnecessary type inference when using associated types inside of higher ranked &lt;code>where&lt;/code>-bounds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119989">Weaken eager detection of cyclic types during type inference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119338">&lt;code>trait Trait: Auto {}&lt;/code>: allow upcasting from &lt;code>dyn Trait&lt;/code> to &lt;code>dyn Trait + Auto&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.77.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.77.2/</guid><description>&lt;h1 id="1772">
 1.77.2
 &lt;a class="anchor" href="#1772">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 April, 2024&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.rust-lang.org/2024/04/09/cve-2024-24576.html">CVE-2024-24576: fix escaping of Windows batch file arguments in &lt;code>std::process::Command&lt;/code>&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.77.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.77.1/</guid><description>&lt;h1 id="1771">
 1.77.1
 &lt;a class="anchor" href="#1771">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>28 March, 2024&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/13654">Revert stripping debuginfo by default for Windows&lt;/a>
This fixes a regression in 1.77 by reverting to the previous default.
Platforms other than Windows are not affected.&lt;/li>
&lt;li>Internal: &lt;a href="https://github.com/rust-lang/rust/pull/122693">Fix heading anchor rendering in doc pages&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.77.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.77.0/</guid><description>&lt;h1 id="1770">
 1.77.0
 &lt;a class="anchor" href="#1770">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>21 March, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>2 February, 2024&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116821/">Reveal opaque types within the defining body for exhaustiveness checking.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117472/">Stabilize C-string literals.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117673/">Stabilize THIR unsafeck.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117556/">Add lint &lt;code>static_mut_refs&lt;/code> to warn on references to mutable statics.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117703/">Support async recursive calls (as long as they have indirection).&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118639/">Undeprecate lint &lt;code>unstable_features&lt;/code> and make use of it in the compiler.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118649/">Make inductive cycles in coherence ambiguous always.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119044/">Get rid of type-driven traversal in const-eval interning&lt;/a>,
only as a &lt;a href="https://github.com/rust-lang/rust/pull/122204">future compatiblity lint&lt;/a> for now.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119062/">Deny braced macro invocations in let-else.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.76.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.76.0/</guid><description>&lt;h1 id="1760">
 1.76.0
 &lt;a class="anchor" href="#1760">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>8 February, 2024&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>22 December, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115476/">Document Rust ABI compatibility between various types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118032/">Also: guarantee that char and u32 are ABI-compatible&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/117758">Add lint &lt;code>ambiguous_wide_pointer_comparisons&lt;/code> that supersedes &lt;code>clippy::vtable_address_comparisons&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118054/">Lint pinned &lt;code>#[must_use]&lt;/code> pointers (in particular, &lt;code>Box&amp;lt;T&amp;gt;&lt;/code> where &lt;code>T&lt;/code> is &lt;code>#[must_use]&lt;/code>) in &lt;code>unused_must_use&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118540/">Soundness fix: fix computing the offset of an unsized field in a packed struct&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118538/">Soundness fix: fix dynamic size/align computation logic for packed types with dyn Trait tail&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115691/">Add &lt;code>$message_type&lt;/code> field to distinguish json diagnostic outputs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118013/">Enable Rust to use the EHCont security feature of Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118150/">Add tier 3 {x86_64,i686}-win7-windows-msvc targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/119074/">Add tier 3 aarch64-apple-watchos target&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115526/">Add tier 3 arm64e-apple-ios &amp;amp; arm64e-apple-darwin targets&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc]
for more information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.75.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.75.0/</guid><description>&lt;h1 id="1750">
 1.75.0
 &lt;a class="anchor" href="#1750">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>28 December, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>10 November, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115822/">Stabilize &lt;code>async fn&lt;/code> and return-position &lt;code>impl Trait&lt;/code> in traits.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116015/">Allow function pointer signatures containing &lt;code>&amp;amp;mut T&lt;/code> in &lt;code>const&lt;/code> contexts.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116692/">Match &lt;code>usize&lt;/code>/&lt;code>isize&lt;/code> exhaustively with half-open ranges.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116894/">Guarantee that &lt;code>char&lt;/code> has the same size and alignment as &lt;code>u32&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116988/">Document that the null pointer has the 0 address.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/103208/">Allow partially moved values in &lt;code>match&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/113053/">Add notes about non-compliant FP behavior on 32bit x86 targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116485/">Stabilize ratified RISC-V target features.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.74.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.74.1/</guid><description>&lt;h1 id="1741">
 1.74.1
 &lt;a class="anchor" href="#1741">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 December, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118464">Resolved spurious STATUS_ACCESS_VIOLATIONs in LLVM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/118006">Clarify guarantees for std::mem::discriminant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/116415">Fix some subtyping-related regressions&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.74.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.74.0/</guid><description>&lt;h1 id="1740">
 1.74.0
 &lt;a class="anchor" href="#1740">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>16 November, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>29 September, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/104299/">Codify that &lt;code>std::mem::Discriminant&amp;lt;T&amp;gt;&lt;/code> does not depend on any lifetimes in T&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/113126/">Replace &lt;code>private_in_public&lt;/code> lint with &lt;code>private_interfaces&lt;/code> and &lt;code>private_bounds&lt;/code> per RFC 2145.&lt;/a>
Read more in &lt;a href="https://rust-lang.github.io/rfcs/2145-type-privacy.html">RFC 2145&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/114201/">Allow explicit &lt;code>#[repr(Rust)]&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115315/">closure field capturing: don&amp;rsquo;t depend on alignment of packed fields&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107421/">Enable MIR-based drop-tracking for &lt;code>async&lt;/code> blocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115659">Stabilize &lt;code>impl_trait_projections&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.73.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.73.0/</guid><description>&lt;h1 id="1730">
 1.73.0
 &lt;a class="anchor" href="#1730">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>5 October, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>18 August, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111717/">Uplift &lt;code>clippy::fn_null_check&lt;/code> lint as &lt;code>useless_ptr_null_checks&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111916/">Make &lt;code>noop_method_call&lt;/code> warn by default.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/112953/">Support interpolated block for &lt;code>try&lt;/code> and &lt;code>async&lt;/code> in macros.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/113902/">Make &lt;code>unconditional_recursion&lt;/code> lint detect recursive drops.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/114023/">Future compatibility warning for some impls being incorrectly considered not overlapping.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/112431">The &lt;code>invalid_reference_casting&lt;/code> lint is now &lt;strong>deny-by-default&lt;/strong> (instead of allow-by-default)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.72.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.72.1/</guid><description>&lt;h1 id="1721">
 1.72.1
 &lt;a class="anchor" href="#1721">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>19 September, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115236">Adjust codegen change to improve LLVM codegen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115276">rustdoc: Fix self ty params in objects with lifetimes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/114948">Fix regression in compile times&lt;/a>&lt;/li>
&lt;li>Resolve some ICE regressions in the compiler:
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115215">#115215&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/115559">#115559&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.72.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.72.0/</guid><description>&lt;h1 id="1720">
 1.72.0
 &lt;a class="anchor" href="#1720">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>24 August, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>7 July, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/103877/">Replace const eval limit by a lint and add an exponential backoff warning&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/110141/">expand: Change how &lt;code>#![cfg(FALSE)]&lt;/code> behaves on crate root&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111235/">Stabilize inline asm for LoongArch64&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111530/">Uplift &lt;code>clippy::undropped_manually_drops&lt;/code> lint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111543/">Uplift &lt;code>clippy::invalid_utf8_in_unchecked&lt;/code> lint&lt;/a> as &lt;code>invalid_from_utf8_unchecked&lt;/code> and &lt;code>invalid_from_utf8&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111567/">Uplift &lt;code>clippy::cast_ref_to_mut&lt;/code> lint&lt;/a> as &lt;code>invalid_reference_casting&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111818/">Uplift &lt;code>clippy::cmp_nan&lt;/code> lint&lt;/a> as &lt;code>invalid_nan_comparisons&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/112086/">resolve: Remove artificial import ambiguity errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/112319/">Don&amp;rsquo;t require associated types with Self: Sized bounds in &lt;code>dyn Trait&lt;/code> objects&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.71.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.71.1/</guid><description>&lt;h1 id="1711">
 1.71.1
 &lt;a class="anchor" href="#1711">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>3 August, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-j3xp-wfr4-hx87">Fix CVE-2023-38497: Cargo did not respect the umask when extracting dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/113579">Fix bash completion for users of Rustup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/112517">Do not show &lt;code>suspicious_double_ref_op&lt;/code> lint when calling &lt;code>borrow()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/113802">Fix ICE: substitute types before checking inlining compatibility&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111516">Fix ICE: don&amp;rsquo;t use &lt;code>can_eq&lt;/code> in &lt;code>derive(..)&lt;/code> suggestion for missing method&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/113678">Fix building Rust 1.71.0 from the source tarball&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.71.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.71.0/</guid><description>&lt;h1 id="1710">
 1.71.0
 &lt;a class="anchor" href="#1710">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>13 July, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>26 May, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109677/">Stabilize &lt;code>raw-dylib&lt;/code>, &lt;code>link_ordinal&lt;/code>, &lt;code>import_name_type&lt;/code> and &lt;code>-Cdlltool&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109732/">Uplift &lt;code>clippy::{drop,forget}_{ref,copy}&lt;/code> lints.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/110100/">Type inference is more conservative around constrained vars.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/110577/">Use fulfillment to check &lt;code>Drop&lt;/code> impl compatibility&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/104844/">Evaluate place expression in &lt;code>PlaceMention&lt;/code>&lt;/a>,
making &lt;code>let _ =&lt;/code> patterns more consistent with respect to the borrow checker.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/105354/">Add &lt;code>--print deployment-target&lt;/code> flag for Apple targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/106075/">Stabilize &lt;code>extern &amp;quot;C-unwind&amp;quot;&lt;/code> and friends.&lt;/a>
The existing &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> etc. may change behavior for cross-language unwinding in a future release.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107129/">Update the version of musl used on &lt;code>*-linux-musl&lt;/code> targets to 1.2.3&lt;/a>,
enabling &lt;a href="https://musl.libc.org/time64.html">time64&lt;/a> on 32-bit systems.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/108668/">Stabilize &lt;code>debugger_visualizer&lt;/code>&lt;/a>
for embedding metadata like Microsoft&amp;rsquo;s Natvis.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109999/">Enable flatten-format-args by default.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/111245/">Make &lt;code>Self&lt;/code> respect tuple constructor privacy.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/108106/">Improve niche placement by trying two strategies and picking the better result.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109899/">Use &lt;code>apple-m1&lt;/code> as the target CPU for &lt;code>aarch64-apple-darwin&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/108795/">Add Tier 3 support for the &lt;code>x86_64h-apple-darwin&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/110936/">Promote &lt;code>loongarch64-unknown-linux-gnu&lt;/code> to Tier 2 with host tools.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc]
for more information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.70.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.70.0/</guid><description>&lt;h1 id="1700">
 1.70.0
 &lt;a class="anchor" href="#1700">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>1 June, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>14 April, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/105798/">Relax ordering rules for &lt;code>asm!&lt;/code> operands&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/106505/">Properly allow macro expanded &lt;code>format_args&lt;/code> invocations to uses captures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107880/">Lint ambiguous glob re-exports&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102256/">Perform const and unsafe checking for expressions in &lt;code>let _ = expr&lt;/code> position.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109808/">Extend -Cdebuginfo with new options and named aliases&lt;/a>
This provides a smaller version of debuginfo for cases that only need line number information
(&lt;code>-Cdebuginfo=line-tables-only&lt;/code>), which may eventually become the default for &lt;code>-Cdebuginfo=1&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/104363/">Make &lt;code>unused_allocation&lt;/code> lint against &lt;code>Box::new&lt;/code> too&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109435/">Detect uninhabited types early in const eval&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109721/">Switch to LLD as default linker for {arm,thumb}v4t-none-eabi&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96971">Add tier 3 target &lt;code>loongarch64-unknown-linux-gnu&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109173/">Add tier 3 target for &lt;code>i586-pc-nto-qnx700&lt;/code> (QNX Neutrino RTOS, version 7.0)&lt;/a>,&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98112">Insert alignment checks for pointer dereferences as debug assertions&lt;/a>
This catches undefined behavior at runtime, and may cause existing code to fail.&lt;/li>
&lt;/ul>
&lt;p>Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc]
for more information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.69.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.69.0/</guid><description>&lt;h1 id="1690">
 1.69.0
 &lt;a class="anchor" href="#1690">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 April, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>3 March, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/104429/">Deriving built-in traits on packed structs works with &lt;code>Copy&lt;/code> fields.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/106774/">Stabilize the &lt;code>cmpxchg16b&lt;/code> target feature on x86 and x86_64.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/103695/">Improve analysis of trait bounds for associated types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/106938/">Allow associated types to be used as union fields.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107082/">Allow &lt;code>Self: Autotrait&lt;/code> bounds on dyn-safe trait methods.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107941/">Treat &lt;code>str&lt;/code> as containing &lt;code>[u8]&lt;/code> for auto trait purposes.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.68.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.2/</guid><description>&lt;h1 id="1682">
 1.68.2
 &lt;a class="anchor" href="#1682">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>28 March, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/11883">Update the GitHub RSA host key bundled within Cargo&lt;/a>.
The key was &lt;a href="https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/">rotated by GitHub&lt;/a>
on 2023-03-24 after the old one leaked.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/11889">Mark the old GitHub RSA host key as revoked&lt;/a>.
This will prevent Cargo from accepting the leaked key even when trusted by
the system.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/11635">Add support for &lt;code>@revoked&lt;/code> and a better error message for &lt;code>@cert-authority&lt;/code> in Cargo&amp;rsquo;s SSH host key verification&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.68.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.1/</guid><description>&lt;h1 id="1681">
 1.68.1
 &lt;a class="anchor" href="#1681">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>23 March, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109094">Fix miscompilation in produced Windows MSVC artifacts&lt;/a>
This was introduced by enabling ThinLTO for the distributed rustc which led
to miscompilations in the resulting binary. Currently this is believed to be
limited to the -Zdylib-lto flag used for rustc compilation, rather than a
general bug in ThinLTO, so only rustc artifacts should be affected.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109111/">Fix &amp;ndash;enable-local-rust builds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/109156">Treat &lt;code>$prefix-clang&lt;/code> as &lt;code>clang&lt;/code> in linker detection code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/108162">Fix panic in compiler code&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.68.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.0/</guid><description>&lt;h1 id="1680">
 1.68.0
 &lt;a class="anchor" href="#1680">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 March, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>20 January, 2023&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102318/">Stabilize default_alloc_error_handler&lt;/a>
This allows usage of &lt;code>alloc&lt;/code> on stable without requiring the
definition of a handler for allocation failure. Defining custom handlers is still unstable.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/105795/">Stabilize &lt;code>efiapi&lt;/code> calling convention.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/105085/">Remove implicit promotion for types with drop glue&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.67.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.67.1/</guid><description>&lt;h1 id="1671">
 1.67.1
 &lt;a class="anchor" href="#1671">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 February, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/107360">Fix interoperability with thin archives.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/105624">Fix an internal error in the compiler build process.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10265">Downgrade &lt;code>clippy::uninlined_format_args&lt;/code> to pedantic.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.67.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.67.0/</guid><description>&lt;h1 id="1670">
 1.67.0
 &lt;a class="anchor" href="#1670">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>26 January, 2023&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>9 December, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/100386/">Make &lt;code>Sized&lt;/code> predicates coinductive, allowing cycles.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/100633/">&lt;code>#[must_use]&lt;/code> annotations on &lt;code>async fn&lt;/code> also affect the &lt;code>Future::Output&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101834/">Elaborate supertrait obligations when deducing closure signatures.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102944/">Invalid literals are no longer an error under &lt;code>cfg(FALSE)&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/103578/">Unreserve braced enum variants in value namespace.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.66.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.66.1/</guid><description>&lt;h1 id="1661">
 1.66.1
 &lt;a class="anchor" href="#1661">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 January, 2023&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Added validation of SSH host keys for git URLs in Cargo (&lt;a href="https://www.cve.org/CVERecord?id=CVE-2022-46176">CVE-2022-46176&lt;/a>)&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.66.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.66.0/</guid><description>&lt;h1 id="1660">
 1.66.0
 &lt;a class="anchor" href="#1660">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>15 December, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>28 October, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95710/">Permit specifying explicit discriminants on all &lt;code>repr(Int)&lt;/code> enums&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(u8)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A(&lt;span style="color:#66d9ef">u8&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> B(&lt;span style="color:#66d9ef">i8&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> C(&lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101520/">Allow transmutes between the same type differing only in lifetimes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102091/">Change constant evaluation errors from a deny-by-default lint to a hard error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102287/">Trigger &lt;code>must_use&lt;/code> on &lt;code>impl Trait&lt;/code> for supertraits&lt;/a>
This makes &lt;code>impl ExactSizeIterator&lt;/code> respect the existing &lt;code>#[must_use]&lt;/code> annotation on &lt;code>Iterator&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/102275/">Allow &lt;code>..=X&lt;/code> in patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99696/">Uplift &lt;code>clippy::for_loops_over_fallibles&lt;/code> lint into rustc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/103168/">Stabilize &lt;code>sym&lt;/code> operands in inline assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101912/">Update to Unicode 15&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95474/">Opaque types no longer imply lifetime bounds&lt;/a>
This is a soundness fix which may break code that was erroneously relying on this behavior.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101329/">Add armv5te-none-eabi and thumbv5te-none-eabi tier 3 targets&lt;/a>
&lt;ul>
&lt;li>Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98736">Add support for linking against macOS universal libraries&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101040/">Fix &lt;code>#[derive(Default)]&lt;/code> on a generic &lt;code>#[default]&lt;/code> enum adding unnecessary &lt;code>Default&lt;/code> bounds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101821/">Update to Unicode 15&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.source_text">&lt;code>proc_macro::Span::source_text&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/primitive.u8.html#method.checked_add_signed">&lt;code>uX::{checked_add_signed, overflowing_add_signed, saturating_add_signed, wrapping_add_signed}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_add_unsigned">&lt;code>iX::{checked_add_unsigned, overflowing_add_unsigned, saturating_add_unsigned, wrapping_add_unsigned}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_sub_unsigned">&lt;code>iX::{checked_sub_unsigned, overflowing_sub_unsigned, saturating_sub_unsigned, wrapping_sub_unsigned}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html#method.first">&lt;code>BTreeSet::{first, last, pop_first, pop_last}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.first_key_value">&lt;code>BTreeMap::{first_key_value, last_key_value, first_entry, last_entry, pop_first, pop_last}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101768/">Add &lt;code>AsFd&lt;/code> implementations for stdio lock types on WASI.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#impl-TryFrom%3CVec%3CT%2C%20Global%3E%3E-for-Box%3C%5BT%3B%20N%5D%2C%20Global%3E">&lt;code>impl TryFrom&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt; for Box&amp;lt;[T; N]&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/hint/fn.black_box.html">&lt;code>core::hint::black_box&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.try_from_secs_f32">&lt;code>Duration::try_from_secs_{f32,f64}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unzip">&lt;code>Option::unzip&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/os/fd/index.html">&lt;code>std::os::fd&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="rustdoc">
 Rustdoc
 &lt;a class="anchor" href="#rustdoc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101720/">Add Rustdoc warning for invalid HTML tags in the documentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-remove.html">Added &lt;code>cargo remove&lt;/code> to remove dependencies from Cargo.toml&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/11062">&lt;code>cargo publish&lt;/code> now waits for the new version to be downloadable before exiting&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>See &lt;a href="https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-166-2022-12-15">detailed release notes&lt;/a> for more.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.65.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.65.0/</guid><description>&lt;h1 id="1650">
 1.65.0
 &lt;a class="anchor" href="#1650">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>3 November, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>16 September, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92744/">Error on &lt;code>as&lt;/code> casts of enums with &lt;code>#[non_exhaustive]&lt;/code> variants&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93628/">Stabilize &lt;code>let else&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96709/">Stabilize generic associated types (GATs)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97739/">Add lints &lt;code>let_underscore_drop&lt;/code> and &lt;code>let_underscore_lock&lt;/code> from Clippy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99332/">Stabilize &lt;code>break&lt;/code>ing from arbitrary labeled blocks (&amp;ldquo;label-break-value&amp;rdquo;)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98919/">Uninitialized integers, floats, and raw pointers are now considered immediate UB&lt;/a>.
Usage of &lt;code>MaybeUninit&lt;/code> is the correct way to work with uninitialized memory.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99916/">Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99576/">Do not allow &lt;code>Drop&lt;/code> impl on foreign ADTs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98051/">Stabilize -Csplit-debuginfo on Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94075/">Use niche-filling optimization even when multiple variants have data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99217/#issuecomment-1209365630">Associated type projections are now verified to be well-formed prior to resolving the underlying type&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/100350/">Stringify non-shorthand visibility correctly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/101831/">Normalize struct field types when unsizing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99464/">Update to LLVM 15&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97800/">Fix aarch64 call abi to correctly zeroext when needed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98393/">debuginfo: Generalize C++-like encoding for enums&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94467/">Add &lt;code>special_module_name&lt;/code> lint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/100384/">Add support for generating unique profraw files by default when using &lt;code>-C instrument-coverage&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/100636/">Allow dynamic linking for iOS/tvOS targets&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>New targets:&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.64.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.64.0/</guid><description>&lt;h1 id="1640">
 1.64.0
 &lt;a class="anchor" href="#1640">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>22 September, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>5 August, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97995/">Unions with mutable references or tuples of allowed types are now allowed&lt;/a>&lt;/li>
&lt;li>It is now considered valid to deallocate memory pointed to by a shared reference &lt;code>&amp;amp;T&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/98017/">if every byte in &lt;code>T&lt;/code> is inside an &lt;code>UnsafeCell&lt;/code>&lt;/a>&lt;/li>
&lt;li>Unused tuple struct fields are now warned against in an allow-by-default lint, &lt;a href="https://github.com/rust-lang/rust/pull/95977/">&lt;code>unused_tuple_struct_fields&lt;/code>&lt;/a>, similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88991/">Add Nintendo Switch as tier 3 target&lt;/a>
&lt;ul>
&lt;li>Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93718/">Only compile &lt;code>#[used]&lt;/code> as llvm.compiler.used for ELF targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95635/">Add the &lt;code>--diagnostic-width&lt;/code> compiler flag to define the terminal width.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98771/">Add support for link-flavor &lt;code>rust-lld&lt;/code> for iOS, tvOS and watchOS&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98383/">Remove restrictions on compare-exchange memory ordering.&lt;/a>&lt;/li>
&lt;li>You can now &lt;code>write!&lt;/code> or &lt;code>writeln!&lt;/code> into an &lt;code>OsString&lt;/code>: &lt;a href="https://github.com/rust-lang/rust/pull/97915/">Implement &lt;code>fmt::Write&lt;/code> for &lt;code>OsString&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96820/">Make RwLockReadGuard covariant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97300/">Implement &lt;code>FusedIterator&lt;/code> for &lt;code>std::net::[Into]Incoming&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97437/">&lt;code>impl&amp;lt;T: AsRawFd&amp;gt; AsRawFd for {Arc,Box}&amp;lt;T&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97712/">&lt;code>ptr::copy&lt;/code> and &lt;code>ptr::swap&lt;/code> are doing untyped copies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97925/">Add cgroupv1 support to &lt;code>available_parallelism&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/99182/">Mitigate many incorrect uses of &lt;code>mem::uninitialized&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html">&lt;code>future::IntoFuture&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html">&lt;code>future::poll_fn&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/task/macro.ready.html">&lt;code>task::ready!&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_mul">&lt;code>num::NonZero*::checked_mul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_pow">&lt;code>num::NonZero*::checked_pow&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_mul">&lt;code>num::NonZero*::saturating_mul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_pow">&lt;code>num::NonZero*::saturating_pow&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.abs">&lt;code>num::NonZeroI*::abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.checked_abs">&lt;code>num::NonZeroI*::checked_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.overflowing_abs">&lt;code>num::NonZeroI*::overflowing_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.saturating_abs">&lt;code>num::NonZeroI*::saturating_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.unsigned_abs">&lt;code>num::NonZeroI*::unsigned_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.wrapping_abs">&lt;code>num::NonZeroI*::wrapping_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_add">&lt;code>num::NonZeroU*::checked_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_next_power_of_two">&lt;code>num::NonZeroU*::checked_next_power_of_two&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_add">&lt;code>num::NonZeroU*::saturating_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/os/unix/process/trait.CommandExt.html#tymethod.process_group">&lt;code>os::unix::process::CommandExt::process_group&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir">&lt;code>os::windows::fs::FileTypeExt::is_symlink_dir&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file">&lt;code>os::windows::fs::FileTypeExt::is_symlink_file&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These types were previously stable in &lt;code>std::ffi&lt;/code>, but are now also available in &lt;code>core&lt;/code> and &lt;code>alloc&lt;/code>:&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.63.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.63.0/</guid><description>&lt;h1 id="1630">
 1.63.0
 &lt;a class="anchor" href="#1630">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>11 August, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>24 June, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95565/">Remove migrate borrowck mode for pre-NLL errors.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95953/">Modify MIR building to drop repeat expressions with length zero.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96296/">Remove label/lifetime shadowing warnings.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96868/">Allow explicit generic arguments in the presence of &lt;code>impl Trait&lt;/code> args.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97652/">Make &lt;code>cenum_impl_drop_cast&lt;/code> warnings deny-by-default.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96959/">Prevent unwinding when &lt;code>-C panic=abort&lt;/code> is used regardless of declared ABI.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/97867/">lub: don&amp;rsquo;t bail out due to empty binders.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95818/">Stabilize the &lt;code>bundle&lt;/code> native library modifier,&lt;/a> also removing the
deprecated &lt;code>static-nobundle&lt;/code> linking kind.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95243/">Add Apple WatchOS compile targets*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96737/">Add a Windows application manifest to rustc-main.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.62.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.62.1/</guid><description>&lt;h1 id="1621">
 1.62.1
 &lt;a class="anchor" href="#1621">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>19 July, 2022&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>Rust 1.62.1 addresses a few recent regressions in the compiler and standard
library, and also mitigates a CPU vulnerability on Intel SGX.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/98608">The compiler fixed unsound function coercions involving &lt;code>impl Trait&lt;/code> return types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/98890">The compiler fixed an incremental compilation bug with &lt;code>async fn&lt;/code> lifetimes.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98950">Windows added a fallback for overlapped I/O in synchronous reads and writes.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/98126">The &lt;code>x86_64-fortanix-unknown-sgx&lt;/code> target added a mitigation for the
MMIO stale data vulnerability&lt;/a>, advisory &lt;a href="https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html">INTEL-SA-00615&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.62.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.62.0/</guid><description>&lt;h1 id="1620">
 1.62.0
 &lt;a class="anchor" href="#1620">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>30 June, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>13 May, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94457/">Stabilize &lt;code>#[derive(Default)]&lt;/code> on enums with a &lt;code>#[default]&lt;/code> variant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93313/">Teach flow sensitive checks that visibly uninhabited call expressions never return&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94775/">Fix constants not getting dropped if part of a diverging expression&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95380/">Support unit struct/enum variant in destructuring assignment&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96268/">Remove mutable_borrow_reservation_conflict lint and allow the code pattern&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95346/">&lt;code>const&lt;/code> functions may now specify &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> or &lt;code>extern &amp;quot;Rust&amp;quot;&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96436/">linker: Stop using whole-archive on dependencies of dylibs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95372/">Make &lt;code>unaligned_references&lt;/code> lint deny-by-default&lt;/a>
This lint is also a future compatibility lint, and is expected to eventually
become a hard error.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93969/">Only add codegen backend to dep info if -Zbinary-dep-depinfo is used&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95006/">Reject &lt;code>#[thread_local]&lt;/code> attribute on non-static items&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94872/">Add tier 3 &lt;code>aarch64-pc-windows-gnullvm&lt;/code> and &lt;code>x86_64-pc-windows-gnullvm&lt;/code> targets*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/96150/">Implement a lint to warn about unused macro rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95705/">Promote &lt;code>x86_64-unknown-none&lt;/code> target to Tier 2*&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.61.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.61.0/</guid><description>&lt;h1 id="1610">
 1.61.0
 &lt;a class="anchor" href="#1610">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>19 May, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>1 April, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93827/">&lt;code>const fn&lt;/code> signatures can now include generic trait bounds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93827/">&lt;code>const fn&lt;/code> signatures can now use &lt;code>impl Trait&lt;/code> in argument and return position&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93827/">Function pointers can now be created, cast, and passed around in a &lt;code>const fn&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/94081/">Recursive calls can now set the value of a function&amp;rsquo;s opaque &lt;code>impl Trait&lt;/code> return type&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93901/">Linking modifier syntax in &lt;code>#[link]&lt;/code> attributes and on the command line, as well as the &lt;code>whole-archive&lt;/code> modifier specifically, are now supported&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89887/">The &lt;code>char&lt;/code> type is now described as UTF-32 in debuginfo&lt;/a>&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute">&lt;code>#[target_feature]&lt;/code>&lt;/a> attribute &lt;a href="https://github.com/rust-lang/rust/pull/90621/">can now be used with aarch64 features&lt;/a>&lt;/li>
&lt;li>X86 &lt;a href="https://github.com/rust-lang/rust/pull/93745/">&lt;code>#[target_feature = &amp;quot;adx&amp;quot;]&lt;/code> is now stable&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88375/">&lt;code>ManuallyDrop&amp;lt;T&amp;gt;&lt;/code> is now documented to have the same layout as &lt;code>T&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92714/">&lt;code>#[ignore = &amp;quot;…&amp;quot;]&lt;/code> messages are printed when running tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93263/">Consistently show absent stdio handles on Windows as NULL handles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93965/">Make &lt;code>std::io::stdio::lock()&lt;/code> return &lt;code>'static&lt;/code> handles.&lt;/a> Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing &lt;code>let out = std::io::stdout().lock();&lt;/code> because &lt;code>out&lt;/code> would outlive the return value of &lt;code>stdout()&lt;/code>. Such code now works, eliminating a common pitfall that affected many Rust users.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/95016/">&lt;code>Vec::from_raw_parts&lt;/code> is now less restrictive about its inputs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92697/">&lt;code>std::thread::available_parallelism&lt;/code> now takes cgroup quotas into account.&lt;/a> Since &lt;code>available_parallelism&lt;/code> is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, &lt;code>available_parallelism&lt;/code> will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, &lt;code>available_parallelism&lt;/code> will return 4.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_mut">&lt;code>Pin::static_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_ref">&lt;code>Pin::static_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain_mut">&lt;code>Vec::retain_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.retain_mut">&lt;code>VecDeque::retain_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#impl-Write-4">&lt;code>Write&lt;/code> for &lt;code>Cursor&amp;lt;[u8; N]&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html#method.from_pathname">&lt;code>std::os::unix::net::SocketAddr::from_pathname&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html">&lt;code>std::process::ExitCode&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/stable/std/process/trait.Termination.html">&lt;code>std::process::Termination&lt;/code>&lt;/a>. The stabilization of these two APIs now makes it possible for programs to return errors from &lt;code>main&lt;/code> with custom exit codes.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.is_finished">&lt;code>std::thread::JoinHandle::is_finished&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These APIs are now usable in const contexts:&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.60.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.60.0/</guid><description>&lt;h1 id="1600">
 1.60.0
 &lt;a class="anchor" href="#1600">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 April, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>18 February, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93658">Stabilize &lt;code>#[cfg(panic = &amp;quot;...&amp;quot;)]&lt;/code> for either &lt;code>&amp;quot;unwind&amp;quot;&lt;/code> or &lt;code>&amp;quot;abort&amp;quot;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93824">Stabilize &lt;code>#[cfg(target_has_atomic = &amp;quot;...&amp;quot;)]&lt;/code> for each integer size and &lt;code>&amp;quot;ptr&amp;quot;&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/86374">Enable combining &lt;code>+crt-static&lt;/code> and &lt;code>relocation-model=pic&lt;/code> on &lt;code>x86_64-unknown-linux-gnu&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87487">Fixes wrong &lt;code>unreachable_pub&lt;/code> lints on nested and glob public reexport&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90132">Stabilize &lt;code>-Z instrument-coverage&lt;/code> as &lt;code>-C instrument-coverage&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91606">Stabilize &lt;code>-Z print-link-args&lt;/code> as &lt;code>--print link-args&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92300">Add new Tier 3 target &lt;code>mips64-openwrt-linux-musl&lt;/code>*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92383">Add new Tier 3 target &lt;code>armv7-unknown-linux-uclibceabi&lt;/code> (softfloat)*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92357">Fix invalid removal of newlines from doc comments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92670">Add kernel target for RustyHermit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92933">Deny mixing bin crate type with lib crate types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93566">Make rustc use &lt;code>RUST_BACKTRACE=full&lt;/code> by default&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/93577">Upgrade to LLVM 14&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.59.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.59.0/</guid><description>&lt;h1 id="1590">
 1.59.0
 &lt;a class="anchor" href="#1590">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>24 February, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>7 January, 2022&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90207/">Stabilize default arguments for const parameters and remove the ordering restriction for type and const parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90521/">Stabilize destructuring assignment&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90586/">Relax private in public lint on generic bounds and where clauses of trait impls&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91728/">Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90128/">Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90833/">Emit LLVM optimization remarks when enabled with &lt;code>-Cremark&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91003/">Fix sparc64 ABI for aggregates with floating point members&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91172/">Warn when a &lt;code>#[test]&lt;/code>-like built-in attribute macro is present multiple times.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91284/">Add support for riscv64gc-unknown-freebsd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91535/">Stabilize &lt;code>-Z emit-future-incompat&lt;/code> as &lt;code>--json future-incompat&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/94124">Soft disable incremental compilation&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This release disables incremental compilation, unless the user has explicitly
opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.
This is due to a known and relatively frequently occurring bug in incremental
compilation, which causes builds to issue internal compiler errors. This
particular bug is already fixed on nightly, but that fix has not yet rolled out
to stable and is deemed too risky for a direct stable backport.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.58.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.58.1/</guid><description>&lt;h1 id="1581">
 1.58.1
 &lt;a class="anchor" href="#1581">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 January, 2022&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>Fix race condition in &lt;code>std::fs::remove_dir_all&lt;/code> (&lt;a href="https://www.cve.org/CVERecord?id=CVE-2022-21658">CVE-2022-21658&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8295">Handle captured arguments in the &lt;code>useless_format&lt;/code> Clippy lint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8075">Move &lt;code>non_send_fields_in_send_ty&lt;/code> Clippy lint to nursery&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91254">Fix wrong error message displayed when some imports are missing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/92912">Fix rustfmt not formatting generated files from stdin&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.58.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.58.0/</guid><description>&lt;h1 id="1580">
 1.58.0
 &lt;a class="anchor" href="#1580">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>13 January, 2022&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>26 November, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90473/">Format strings can now capture arguments simply by writing &lt;code>{ident}&lt;/code> in the string.&lt;/a> This works in all macros accepting format strings. Support for this in &lt;code>panic!&lt;/code> (&lt;code>panic!(&amp;quot;{ident}&amp;quot;)&lt;/code>) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89551/">&lt;code>*const T&lt;/code> pointers can now be dereferenced in const contexts.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90417/">The rules for when a generic struct implements &lt;code>Unsize&lt;/code> have been relaxed.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89652/">Add LLVM CFI support to the Rust compiler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90058/">Stabilize -Z strip as -C strip&lt;/a>. Note that while release builds already don&amp;rsquo;t add debug symbols for the code you compile, the compiled standard library that ships with Rust includes debug symbols, so you may want to use the &lt;code>strip&lt;/code> option to remove these symbols to produce smaller release binaries. Note that this release only includes support in rustc, not directly in cargo.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/91207/">Add support for LLVM coverage mapping format versions 5 and 6&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90833/">Emit LLVM optimization remarks when enabled with &lt;code>-Cremark&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90175/">Update the minimum external LLVM to 12&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89062/">Add &lt;code>x86_64-unknown-none&lt;/code> at Tier 3*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/90733/">Build musl dist artifacts with debuginfo enabled&lt;/a>. When building release binaries using musl, you may want to use the newly stabilized strip option to remove these debug symbols, reducing the size of your binaries.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87337/">Don&amp;rsquo;t abort compilation after giving a lint error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89580/">Error messages point at the source of trait bound obligations in more places&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.57.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.57.0/</guid><description>&lt;h1 id="1570">
 1.57.0
 &lt;a class="anchor" href="#1570">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>2 December, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>15 October, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87220/">Macro attributes may follow &lt;code>#[derive]&lt;/code> and will see the original (pre-&lt;code>cfg&lt;/code>) input.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88690/">Accept curly-brace macros in expressions, like &lt;code>m!{ .. }.method()&lt;/code> and &lt;code>m!{ .. }?&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89508/">Allow panicking in constant evaluation.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/85200/">Ignore derived &lt;code>Clone&lt;/code> and &lt;code>Debug&lt;/code> implementations during dead code analysis.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/89597/">Create more accurate debuginfo for vtables.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88529/">Add &lt;code>armv6k-nintendo-3ds&lt;/code> at Tier 3*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88952/">Add &lt;code>armv7-unknown-linux-uclibceabihf&lt;/code> at Tier 3*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88321/">Add &lt;code>m68k-unknown-linux-gnu&lt;/code> at Tier 3*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/86191/">Add SOLID targets at Tier 3*:&lt;/a> &lt;code>aarch64-kmc-solid_asp3&lt;/code>, &lt;code>armv7a-kmc-solid_asp3-eabi&lt;/code>, &lt;code>armv7a-kmc-solid_asp3-eabihf&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.56.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.56.1/</guid><description>&lt;h1 id="1561">
 1.56.1
 &lt;a class="anchor" href="#1561">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>1 November, 2021&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>New lints to detect the presence of bidirectional-override Unicode
codepoints in the compiled source code (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574">CVE-2021-42574&lt;/a>)&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.56.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.56.0/</guid><description>&lt;h1 id="1560">
 1.56.0
 &lt;a class="anchor" href="#1560">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>21 October, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>3 September, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88100">The 2021 Edition is now stable.&lt;/a>
See &lt;a href="https://doc.rust-lang.org/nightly/edition-guide/rust-2021/index.html">the edition guide&lt;/a> for more details.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/85305">The pattern in &lt;code>binding @ pattern&lt;/code> can now also introduce new bindings.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/85769#issuecomment-854363720">Union field access is permitted in &lt;code>const fn&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87570">Upgrade to LLVM 13.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/88023">Support memory, address, and thread sanitizers on aarch64-unknown-freebsd.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87699">Allow specifying a deployment target version for all iOS targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87472">Warnings can be forced on with &lt;code>--force-warn&lt;/code>.&lt;/a>
This feature is primarily intended for usage by &lt;code>cargo fix&lt;/code>, rather than end users.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87760">Promote &lt;code>aarch64-apple-ios-sim&lt;/code> to Tier 2*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87370">Add &lt;code>powerpc-unknown-freebsd&lt;/code> at Tier 3*.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/87666">Add &lt;code>riscv32imc-esp-espidf&lt;/code> at Tier 3*.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.55.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.55.0/</guid><description>&lt;h1 id="1550">
 1.55.0
 &lt;a class="anchor" href="#1550">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 September, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>23 July, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83918">You can now write open &amp;ldquo;from&amp;rdquo; range patterns (&lt;code>X..&lt;/code>), which will start at &lt;code>X&lt;/code> and
will end at the maximum value of the integer.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/86294">You can now explicitly import the prelude of different editions
through &lt;code>std::prelude&lt;/code> (e.g. &lt;code>use std::prelude::rust_2021::*;&lt;/code>).&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83572">Added tier 3* support for &lt;code>powerpc64le-unknown-freebsd&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.54.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.54.0/</guid><description>&lt;h1 id="1540">
 1.54.0
 &lt;a class="anchor" href="#1540">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>29 July, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>11 June, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/83366">You can now use macros for values in some built-in attributes.&lt;/a>
This primarily allows you to call macros within the &lt;code>#[doc]&lt;/code> attribute. For
example, to include external documentation in your crate, you can now write
the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#![doc = include_str!(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;README.md&amp;#34;&lt;/span>&lt;span style="color:#75715e">)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/85078">You can now cast between unsized slice types (and types which contain
unsized slices) in &lt;code>const fn&lt;/code>.&lt;/a>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.53.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.53.0/</guid><description>&lt;h1 id="1530">
 1.53.0
 &lt;a class="anchor" href="#1530">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>17 June, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>30 April, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83799">You can now use unicode for identifiers.&lt;/a> This allows multilingual
identifiers but still doesn&amp;rsquo;t allow glyphs that are not considered characters
such as &lt;code>◆&lt;/code> or &lt;code>🦀&lt;/code>. More specifically you can now use any identifier that
matches the UAX #31 &amp;ldquo;Unicode Identifier and Pattern Syntax&amp;rdquo; standard. This
is the same standard as languages like Python, however Rust uses NFC
normalization which may be different from other languages.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79278">You can now specify &amp;ldquo;or patterns&amp;rdquo; inside pattern matches.&lt;/a>
Previously you could only use &lt;code>|&lt;/code> (OR) on complete patterns. E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> Some(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>matches!(x, Some(&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> Some(&lt;span style="color:#ae81ff">2&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Now
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>matches!(x, Some(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83386">Added the &lt;code>:pat_param&lt;/code> &lt;code>macro_rules!&lt;/code> matcher.&lt;/a> This matcher
has the same semantics as the &lt;code>:pat&lt;/code> matcher. This is to allow &lt;code>:pat&lt;/code>
to change semantics to being a pattern fragment in a future edition.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83387">Updated the minimum external LLVM version to LLVM 10.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/80525">Added Tier 3* support for the &lt;code>wasm64-unknown-unknown&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/83941">Improved debuginfo for closures and async functions on Windows MSVC.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.52.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.52.1/</guid><description>&lt;h1 id="1521">
 1.52.1
 &lt;a class="anchor" href="#1521">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 May, 2021&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;p>This release disables incremental compilation, unless the user has explicitly
opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.&lt;/p>
&lt;p>This is due to the widespread, and frequently occurring, breakage encountered by
Rust users due to newly enabled incremental verification in 1.52.0. Notably,
Rust users &lt;strong>should&lt;/strong> upgrade to 1.52.0 or 1.52.1: the bugs that are detected by
newly added incremental verification are still present in past stable versions,
and are not yet fixed on any channel. These bugs can lead to miscompilation of
Rust binaries.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.52.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.52.0/</guid><description>&lt;h1 id="1520">
 1.52.0
 &lt;a class="anchor" href="#1520">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>6 May, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>19 March, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79208">Added the &lt;code>unsafe_op_in_unsafe_fn&lt;/code> lint, which checks whether the unsafe code
in an &lt;code>unsafe fn&lt;/code> is wrapped in a &lt;code>unsafe&lt;/code> block.&lt;/a> This lint
is allowed by default, and may become a warning or hard error in a
future edition.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/81479">You can now cast mutable references to arrays to a pointer of the same type as
the element.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/81451">Upgraded the default LLVM to LLVM 12.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Added tier 3* support for the following targets.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.51.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.51.0/</guid><description>&lt;h1 id="1510">
 1.51.0
 &lt;a class="anchor" href="#1510">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 March, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>5 February, 2021&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79135">You can now parameterize items such as functions, traits, and &lt;code>struct&lt;/code>s by constant
values in addition to by types and lifetimes.&lt;/a> Also known as &amp;ldquo;const generics&amp;rdquo;
E.g. you can now write the following. Note: Only values of primitive integers,
&lt;code>bool&lt;/code>, or &lt;code>char&lt;/code> types are currently permitted.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">GenericArray&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">LENGTH&lt;/span>: &lt;span style="color:#66d9ef">usize&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inner: [T; &lt;span style="color:#66d9ef">LENGTH&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">LENGTH&lt;/span>: &lt;span style="color:#66d9ef">usize&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> GenericArray&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">LENGTH&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">last&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; Option&lt;span style="color:#f92672">&amp;lt;&amp;amp;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">LENGTH&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self.inner[&lt;span style="color:#66d9ef">LENGTH&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79570">Added the &lt;code>-Csplit-debuginfo&lt;/code> codegen option for macOS platforms.&lt;/a>
This option controls whether debug information is split across multiple files
or packed into a single file. &lt;strong>Note&lt;/strong> This option is unstable on other platforms.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/81455">Added tier 3* support for &lt;code>aarch64_be-unknown-linux-gnu&lt;/code>,
&lt;code>aarch64-unknown-linux-gnu_ilp32&lt;/code>, and &lt;code>aarch64_be-unknown-linux-gnu_ilp32&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/80662">Added tier 3 support for &lt;code>i386-unknown-linux-gnu&lt;/code> and &lt;code>i486-unknown-linux-gnu&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/80749">The &lt;code>target-cpu=native&lt;/code> option will now detect individual features of CPUs.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.50.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.50.0/</guid><description>&lt;h1 id="1500">
 1.50.0
 &lt;a class="anchor" href="#1500">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>11 February, 2021&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>25 December, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79270">You can now use &lt;code>const&lt;/code> values for &lt;code>x&lt;/code> in &lt;code>[x; N]&lt;/code> array expressions.&lt;/a>
This has been technically possible since 1.38.0, as it was unintentionally stabilized.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78068">Assignments to &lt;code>ManuallyDrop&amp;lt;T&amp;gt;&lt;/code> union fields are now considered safe.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78142">Added tier 3* support for the &lt;code>armv5te-unknown-linux-uclibceabi&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/77484">Added tier 3 support for the &lt;code>aarch64-apple-ios-macabi&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/79484">The &lt;code>x86_64-unknown-freebsd&lt;/code> is now built with the full toolset.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78439">Dropped support for all cloudabi targets.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.49.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.49.0/</guid><description>&lt;h1 id="1490">
 1.49.0
 &lt;a class="anchor" href="#1490">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>31 December, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>13 November, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/77547">Unions can now implement &lt;code>Drop&lt;/code>, and you can now have a field in a union
with &lt;code>ManuallyDrop&amp;lt;T&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/76199">You can now cast uninhabited enums to integers.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/76119">You can now bind by reference and by move in patterns.&lt;/a> This
allows you to selectively borrow individual components of a type. E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> age: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> person &lt;span style="color:#f92672">=&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: String::from(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> age: &lt;span style="color:#ae81ff">20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `name` is moved out of person, but `age` is referenced.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> Person { name, &lt;span style="color:#66d9ef">ref&lt;/span> age } &lt;span style="color:#f92672">=&lt;/span> person;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println!(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, name, age);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78228">Added tier 1* support for &lt;code>aarch64-unknown-linux-gnu&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/75991">Added tier 2 support for &lt;code>aarch64-apple-darwin&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/75914">Added tier 2 support for &lt;code>aarch64-pc-windows-msvc&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78676">Added tier 3 support for &lt;code>mipsel-unknown-none&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78848">Raised the minimum supported LLVM version to LLVM 9.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78227">Output from threads spawned in tests is now captured.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/78951">Change os and vendor values to &amp;ldquo;none&amp;rdquo; and &amp;ldquo;unknown&amp;rdquo; for some targets&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.48.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.48.0/</guid><description>&lt;h1 id="1480">
 1.48.0
 &lt;a class="anchor" href="#1480">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>19 November, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>2 October, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/75857/">The &lt;code>unsafe&lt;/code> keyword is now syntactically permitted on modules.&lt;/a> This
is still rejected &lt;em>semantically&lt;/em>, but can now be parsed by procedural macros.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/76158/">Stabilised the &lt;code>-C link-self-contained=&amp;lt;yes|no&amp;gt;&lt;/code> compiler flag.&lt;/a> This tells
&lt;code>rustc&lt;/code> whether to link its own C runtime and libraries or to rely on a external
linker to find them. (Supported only on &lt;code>windows-gnu&lt;/code>, &lt;code>linux-musl&lt;/code>, and &lt;code>wasi&lt;/code> platforms.)&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/77386/">You can now use &lt;code>-C target-feature=+crt-static&lt;/code> on &lt;code>linux-gnu&lt;/code> targets.&lt;/a>
Note: If you&amp;rsquo;re using cargo you must explicitly pass the &lt;code>--target&lt;/code> flag.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/76420/">Added tier 2* support for &lt;code>aarch64-unknown-linux-musl&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.47.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.47.0/</guid><description>&lt;h1 id="1470">
 1.47.0
 &lt;a class="anchor" href="#1470">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>8 October, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>21 August, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/74869/">Closures will now warn when not used.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73893/">Stabilized the &lt;code>-C control-flow-guard&lt;/code> codegen option&lt;/a>, which enables
&lt;a href="https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard">Control Flow Guard&lt;/a> for Windows platforms, and is ignored on other
platforms.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73526/">Upgraded to LLVM 11.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/74419/">Added tier 3* support for the &lt;code>thumbv4t-none-eabi&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/75204/">Upgrade the FreeBSD toolchain to version 11.4&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/75048/">&lt;code>RUST_BACKTRACE&lt;/code>&amp;rsquo;s output is now more compact.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.46.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.46.0/</guid><description>&lt;h1 id="1460">
 1.46.0
 &lt;a class="anchor" href="#1460">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>27 August, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>10 July, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72437/">&lt;code>if&lt;/code>, &lt;code>match&lt;/code>, and &lt;code>loop&lt;/code> expressions can now be used in const functions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73862/">Additionally you are now also able to coerce and cast to slices (&lt;code>&amp;amp;[T]&lt;/code>) in
const functions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72445/">The &lt;code>#[track_caller]&lt;/code> attribute can now be added to functions to use the
function&amp;rsquo;s caller&amp;rsquo;s location information for panic messages.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/71322/">Recursively indexing into tuples no longer needs parentheses.&lt;/a> E.g.
&lt;code>x.0.0&lt;/code> over &lt;code>(x.0).0&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72920/">&lt;code>mem::transmute&lt;/code> can now be used in statics and constants.&lt;/a> &lt;strong>Note&lt;/strong>
You currently can&amp;rsquo;t use &lt;code>mem::transmute&lt;/code> in constant functions.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73516/">You can now use the &lt;code>cdylib&lt;/code> target on Apple iOS and tvOS platforms.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/70740/">Enabled static &amp;ldquo;Position Independent Executables&amp;rdquo; by default
for &lt;code>x86_64-unknown-linux-musl&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73887/">&lt;code>mem::forget&lt;/code> is now a &lt;code>const fn&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73466/">&lt;code>String&lt;/code> now implements &lt;code>From&amp;lt;char&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73032/">The &lt;code>leading_ones&lt;/code>, and &lt;code>trailing_ones&lt;/code> methods have been stabilised for all
integer types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72583/">&lt;code>vec::IntoIter&amp;lt;T&amp;gt;&lt;/code> now implements &lt;code>AsRef&amp;lt;[T]&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72717/">All non-zero integer types (&lt;code>NonZeroU8&lt;/code>) now implement &lt;code>TryFrom&lt;/code> for their
zero-able equivalent (e.g. &lt;code>TryFrom&amp;lt;u8&amp;gt;&lt;/code>).&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/71660/">&lt;code>&amp;amp;[T]&lt;/code> and &lt;code>&amp;amp;mut [T]&lt;/code> now implement &lt;code>PartialEq&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73007/">&lt;code>(String, u16)&lt;/code> now implements &lt;code>ToSocketAddrs&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72584/">&lt;code>vec::Drain&amp;lt;'_, T&amp;gt;&lt;/code> now implements &lt;code>AsRef&amp;lt;[T]&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.zip">&lt;code>Option::zip&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/vec/struct.Drain.html#method.as_slice">&lt;code>vec::Drain::as_slice&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;p>Added a number of new environment variables that are now available when
compiling your crate.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.45.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.2/</guid><description>&lt;h1 id="1452">
 1.45.2
 &lt;a class="anchor" href="#1452">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>3 August, 2020&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/74954">Fix bindings in tuple struct patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/74784">Fix track_caller integration with trait objects&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.45.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.1/</guid><description>&lt;h1 id="1451">
 1.45.1
 &lt;a class="anchor" href="#1451">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>30 July, 2020&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/73613">Fix const propagation with references.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/73078">rustfmt accepts rustfmt_skip in cfg_attr again.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/74509">Avoid spurious implicit region bound.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/74457">Install clippy on x.py install&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.45.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.0/</guid><description>&lt;h1 id="1450">
 1.45.0
 &lt;a class="anchor" href="#1450">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>16 July, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>29 May, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/71269/">Out of range float to int conversions using &lt;code>as&lt;/code> has been defined as a saturating
conversion.&lt;/a> This was previously undefined behaviour, but you can use the
&lt;code>{f64, f32}::to_int_unchecked&lt;/code> methods to continue using the current behaviour, which
may be desirable in rare performance sensitive situations.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/70705/">&lt;code>mem::Discriminant&amp;lt;T&amp;gt;&lt;/code> now uses &lt;code>T&lt;/code>&amp;rsquo;s discriminant type instead of always
using &lt;code>u64&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/68717/">Function like procedural macros can now be used in expression, pattern, and statement
positions.&lt;/a> This means you can now use a function-like procedural macro
anywhere you can use a declarative (&lt;code>macro_rules!&lt;/code>) macro.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72094/">You can now override individual target features through the &lt;code>target-feature&lt;/code>
flag.&lt;/a> E.g. &lt;code>-C target-feature=+avx2 -C target-feature=+fma&lt;/code> is now
equivalent to &lt;code>-C target-feature=+avx2,+fma&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69984/">Added the &lt;code>force-unwind-tables&lt;/code> flag.&lt;/a> This option allows
rustc to always generate unwind tables regardless of panic strategy.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/71716/">Added the &lt;code>embed-bitcode&lt;/code> flag.&lt;/a> This codegen flag allows rustc
to include LLVM bitcode into generated &lt;code>rlib&lt;/code>s (this is on by default).&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72397/">Added the &lt;code>tiny&lt;/code> value to the &lt;code>code-model&lt;/code> codegen flag.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72062/">Added tier 3 support* for the &lt;code>mipsel-sony-psp&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/72133/">Added tier 3 support for the &lt;code>thumbv7a-uwp-windows-msvc&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/67759/">Upgraded to LLVM 10.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.44.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.44.1/</guid><description>&lt;h1 id="1441">
 1.44.1
 &lt;a class="anchor" href="#1441">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>18 June, 2020&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/73078">rustfmt accepts rustfmt_skip in cfg_attr again.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/8329">Don&amp;rsquo;t hash executable filenames on apple platforms, fixing backtraces.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/71397">Fix crashes when finding backtrace on macOS.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/issues/5356">Clippy applies lint levels into different files.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.44.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.44.0/</guid><description>&lt;h1 id="1440">
 1.44.0
 &lt;a class="anchor" href="#1440">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>4 June, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>17 April, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69033/">You can now use &lt;code>async/.await&lt;/code> with &lt;code>#[no_std]&lt;/code> enabled.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/70081/">Added the &lt;code>unused_braces&lt;/code> lint.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Syntax-only changes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69838/">Expansion-driven outline module parsing&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[cfg(FALSE)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">mod&lt;/span> foo {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">mod&lt;/span> bar {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">mod&lt;/span> baz; &lt;span style="color:#75715e">// `foo/bar/baz.rs` doesn&amp;#39;t exist, but no error!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These are still rejected semantically, so you will likely receive an error but
these changes can be seen and parsed by macros and conditional compilation.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.43.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.43.1/</guid><description>&lt;h1 id="1431">
 1.43.1
 &lt;a class="anchor" href="#1431">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 May, 2020&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/71430">Updated openssl-src to 1.1.1g for CVE-2020-1967.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/71473">Fixed the stabilization of AVX-512 features.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/issues/8151">Fixed &lt;code>cargo package --list&lt;/code> not working with unpublished dependencies.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.43.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.43.0/</guid><description>&lt;h1 id="1430">
 1.43.0
 &lt;a class="anchor" href="#1430">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>23 April, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>6 March, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/68129/">Fixed using binary operations with &lt;code>&amp;amp;{number}&lt;/code> (e.g. &lt;code>&amp;amp;1.0&lt;/code>) not having
the type inferred correctly.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69201/">Attributes such as &lt;code>#[cfg()]&lt;/code> can now be used on &lt;code>if&lt;/code> expressions.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Syntax only changes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69361/">Allow &lt;code>type Foo: Ord&lt;/code> syntactically.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69194/">Fuse associated and extern items up to defaultness.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/68764/">Syntactically allow &lt;code>self&lt;/code> in all &lt;code>fn&lt;/code> contexts.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/68728/">Merge &lt;code>fn&lt;/code> syntax + cleanup item parsing.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69366/">&lt;code>item&lt;/code> macro fragments can be interpolated into &lt;code>trait&lt;/code>s, &lt;code>impl&lt;/code>s, and &lt;code>extern&lt;/code> blocks.&lt;/a>
For example, you may now write:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>macro_rules&lt;span style="color:#f92672">!&lt;/span> mac_trait {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#75715e">$i&lt;/span>:&lt;span style="color:#a6e22e">item&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">trait&lt;/span> T { &lt;span style="color:#75715e">$i&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mac_trait! {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>These are still rejected &lt;em>semantically&lt;/em>, so you will likely receive an error but
these changes can be seen and parsed by macros and
conditional compilation.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.42.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.42.0/</guid><description>&lt;h1 id="1420">
 1.42.0
 &lt;a class="anchor" href="#1420">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>12 March, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>24 January, 2020&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/67712/">You can now use the slice pattern syntax with subslices.&lt;/a> e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>(words: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>[&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> words {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>, &lt;span style="color:#f92672">..&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">&amp;#34;Foo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bar&amp;#34;&lt;/span>, &lt;span style="color:#f92672">..&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;Baz&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rest &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{:?}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, rest),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/68122/">You can now use &lt;code>#[repr(transparent)]&lt;/code> on univariant &lt;code>enum&lt;/code>s.&lt;/a> Meaning
that you can create an enum that has the exact layout and ABI of the type
it contains.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.41.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.41.1/</guid><description>&lt;h1 id="1411">
 1.41.1
 &lt;a class="anchor" href="#1411">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>27 February, 2020&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69145">Always check types of static items&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/69145">Always check lifetime bounds of &lt;code>Copy&lt;/code> impls&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/69225">Fix miscompilation in callers of &lt;code>Layout::repeat&lt;/code>&lt;/a>&lt;/li>
&lt;li>[Rust 1.41.0 was announced as the last Rust release with tier 1 or tier 2 support for 32-bit Apple targets][apple-32bit-drop].
That announcement did not expect a patch release. 1.41.1 also includes release binaries for these targets.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.41.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.41.0/</guid><description>&lt;h1 id="1410">
 1.41.0
 &lt;a class="anchor" href="#1410">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>30 January, 2020&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>13 December, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/65879/">You can now pass type parameters to foreign items when implementing
traits.&lt;/a> E.g. You can now write &lt;code>impl&amp;lt;T&amp;gt; From&amp;lt;Foo&amp;gt; for Vec&amp;lt;T&amp;gt; {}&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/64325/">You can now arbitrarily nest receiver types in the &lt;code>self&lt;/code> position.&lt;/a> E.g. you can
now write &lt;code>fn foo(self: Box&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt;) {}&lt;/code>. Previously only &lt;code>Self&lt;/code>, &lt;code>&amp;amp;Self&lt;/code>,
&lt;code>&amp;amp;mut Self&lt;/code>, &lt;code>Arc&amp;lt;Self&amp;gt;&lt;/code>, &lt;code>Rc&amp;lt;Self&amp;gt;&lt;/code>, and &lt;code>Box&amp;lt;Self&amp;gt;&lt;/code> were allowed.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/66847/">You can now use any valid identifier in a &lt;code>format_args&lt;/code> macro.&lt;/a>
Previously identifiers starting with an underscore were not allowed.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/66183/">Visibility modifiers (e.g. &lt;code>pub&lt;/code>) are now syntactically allowed on trait items and
enum variants.&lt;/a> These are still rejected semantically, but
can be seen and parsed by procedural macros and conditional compilation.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62514/">You can now define a Rust &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> function with &lt;code>Box&amp;lt;T&amp;gt;&lt;/code> and use &lt;code>T*&lt;/code> as the corresponding
type on the C side.&lt;/a> Please see &lt;a href="https://doc.rust-lang.org/std/boxed/index.html#memory-layout">the documentation&lt;/a> for more information,
including the important caveat about preferring to avoid &lt;code>Box&amp;lt;T&amp;gt;&lt;/code> in Rust signatures for functions defined in C.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/66325/">Rustc will now warn if you have unused loop &lt;code>'label&lt;/code>s.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/67255/">Removed support for the &lt;code>i686-unknown-dragonfly&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/66661/">Added tier 3 support* for the &lt;code>riscv64gc-unknown-linux-gnu&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/66172/">You can now pass an arguments file passing the &lt;code>@path&lt;/code> syntax
to rustc.&lt;/a> Note that the format differs somewhat from what is
found in other tooling; please see &lt;a href="https://doc.rust-lang.org/nightly/rustc/command-line-arguments.html#path-load-command-line-flags-from-a-path">the documentation&lt;/a> for
more information.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/64882/">You can now provide &lt;code>--extern&lt;/code> flag without a path, indicating that it is
available from the search path or specified with an &lt;code>-L&lt;/code> flag.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.40.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.40.0/</guid><description>&lt;h1 id="1400">
 1.40.0
 &lt;a class="anchor" href="#1400">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>19 December, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>1 November, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/65188/">You can now use tuple &lt;code>struct&lt;/code>s and tuple &lt;code>enum&lt;/code> variant&amp;rsquo;s constructors in
&lt;code>const&lt;/code> contexts.&lt;/a> e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>(&lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">ORIGIN&lt;/span>: &lt;span style="color:#a6e22e">Point&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> constructor &lt;span style="color:#f92672">=&lt;/span> Point;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> constructor(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/64639/">You can now mark &lt;code>struct&lt;/code>s, &lt;code>enum&lt;/code>s, and &lt;code>enum&lt;/code> variants with the &lt;code>#[non_exhaustive]&lt;/code> attribute to
indicate that there may be variants or fields added in the future.&lt;/a>
For example this requires adding a wild-card branch (&lt;code>_ =&amp;gt; {}&lt;/code>) to any match
statements on a non-exhaustive &lt;code>enum&lt;/code>. &lt;a href="https://rust-lang.github.io/rfcs/2008-non-exhaustive.html">(RFC 2008)&lt;/a>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.39.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.39.0/</guid><description>&lt;h1 id="1390">
 1.39.0
 &lt;a class="anchor" href="#1390">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 November, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>20 September, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/63209/">You can now create &lt;code>async&lt;/code> functions and blocks with &lt;code>async fn&lt;/code>, &lt;code>async move {}&lt;/code>, and
&lt;code>async {}&lt;/code> respectively, and you can now call &lt;code>.await&lt;/code> on async expressions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/64010/">You can now use certain attributes on function, closure, and function pointer
parameters.&lt;/a> These attributes include &lt;code>cfg&lt;/code>, &lt;code>cfg_attr&lt;/code>, &lt;code>allow&lt;/code>, &lt;code>warn&lt;/code>,
&lt;code>deny&lt;/code>, &lt;code>forbid&lt;/code> as well as inert helper attributes used by procedural macro
attributes applied to items. e.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">len&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[cfg(windows)]&lt;/span> slice: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>[&lt;span style="color:#66d9ef">u16&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[cfg(not(windows))]&lt;/span> slice: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>[&lt;span style="color:#66d9ef">u8&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#66d9ef">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slice.len()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/63118/">You can now take shared references to bind-by-move patterns in the &lt;code>if&lt;/code> guards
of &lt;code>match&lt;/code> arms.&lt;/a> e.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> array: Box&lt;span style="color:#f92672">&amp;lt;&lt;/span>[&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Box::new([&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> array {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nums
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ---- `nums` is bound by move.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> nums.iter().sum::&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ^------ `.iter()` implicitly takes a reference to `nums`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drop(nums);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ----------- Legal as `nums` was bound by move and so we have ownership.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/64334/">Added tier 3* support for the &lt;code>i686-unknown-uefi&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/63595/">Added tier 3 support for the &lt;code>sparc64-unknown-openbsd&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/63402/">rustc will now trim code snippets in diagnostics to fit in your terminal.&lt;/a>
&lt;strong>Note&lt;/strong> Cargo currently doesn&amp;rsquo;t use this feature. Refer to
&lt;a href="https://github.com/rust-lang/cargo/pull/7315/">cargo#7315&lt;/a> to track this feature&amp;rsquo;s progress.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62600/">You can now pass &lt;code>--show-output&lt;/code> argument to test binaries to print the
output of successful tests.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.38.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.38.0/</guid><description>&lt;h1 id="1380">
 1.38.0
 &lt;a class="anchor" href="#1380">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>26 September, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>9 August, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62735/">The &lt;code>#[global_allocator]&lt;/code> attribute can now be used in submodules.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62042/">The &lt;code>#[deprecated]&lt;/code> attribute can now be used on macros.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62766/">Added pipelined compilation support to &lt;code>rustc&lt;/code>.&lt;/a> This will
improve compilation times in some cases. For further information please refer
to the &lt;a href="https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199">&lt;em>&amp;ldquo;Evaluating pipelined rustc compilation&amp;rdquo;&lt;/em>&lt;/a> thread.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60260/">Added tier 3* support for the &lt;code>aarch64-uwp-windows-msvc&lt;/code>, &lt;code>i686-uwp-windows-gnu&lt;/code>,
&lt;code>i686-uwp-windows-msvc&lt;/code>, &lt;code>x86_64-uwp-windows-gnu&lt;/code>, and
&lt;code>x86_64-uwp-windows-msvc&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/63107/">Added tier 3 support for the &lt;code>armv7-unknown-linux-gnueabi&lt;/code> and
&lt;code>armv7-unknown-linux-musleabi&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62814/">Added tier 3 support for the &lt;code>hexagon-unknown-linux-musl&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62784/">Added tier 3 support for the &lt;code>riscv32i-unknown-none-elf&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/62592/">Upgraded to LLVM 9.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>* Refer to Rust&amp;rsquo;s &lt;a href="https://doc.rust-lang.org/nightly/rustc/platform-support.html">platform support page&lt;/a> for more
information on Rust&amp;rsquo;s tiered platform support.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.37.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.37.0/</guid><description>&lt;h1 id="1370">
 1.37.0
 &lt;a class="anchor" href="#1370">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>15 August, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>28 June, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>#[must_use]&lt;/code> will now warn if the type is contained in a &lt;a href="https://github.com/rust-lang/rust/pull/61100/">tuple&lt;/a>,
&lt;a href="https://github.com/rust-lang/rust/pull/62228/">&lt;code>Box&lt;/code>&lt;/a>, or an &lt;a href="https://github.com/rust-lang/rust/pull/62235/">array&lt;/a> and unused.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61547/">You can now use the &lt;code>cfg&lt;/code> and &lt;code>cfg_attr&lt;/code> attributes on
generic parameters.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61682/">You can now use enum variants through type alias.&lt;/a> e.g. You can
write the following:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyOption&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">increment_or_zero&lt;/span>(x: &lt;span style="color:#a6e22e">MyOption&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">u8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> x {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyOption::Some(y) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> y &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyOption::None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61347/">You can now use &lt;code>_&lt;/code> as an identifier for consts.&lt;/a> e.g. You can write
&lt;code>const _: u32 = 5;&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61229/">You can now use &lt;code>#[repr(align(X)]&lt;/code> on enums.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60932/">The &lt;code>?&lt;/code> Kleene macro operator is now available in the
2015 edition.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61268/">You can now enable Profile-Guided Optimization with the &lt;code>-C profile-generate&lt;/code>
and &lt;code>-C profile-use&lt;/code> flags.&lt;/a> For more information on how to use profile
guided optimization, please refer to the &lt;a href="https://doc.rust-lang.org/rustc/profile-guided-optimization.html">rustc book&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61827/">The &lt;code>rust-lldb&lt;/code> wrapper script should now work again.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61802/">&lt;code>mem::MaybeUninit&amp;lt;T&amp;gt;&lt;/code> is now ABI-compatible with &lt;code>T&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.BufReader.html#method.buffer">&lt;code>BufReader::buffer&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.buffer">&lt;code>BufWriter::buffer&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.from_mut">&lt;code>Cell::from_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells">&lt;code>Cell&amp;lt;[T]&amp;gt;::as_slice_of_cells&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.nth_back">&lt;code>DoubleEndedIterator::nth_back&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.xor">&lt;code>Option::xor&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.Wrapping.html#method.reverse_bits">&lt;code>Wrapping::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i128.html#method.reverse_bits">&lt;code>i128::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i16.html#method.reverse_bits">&lt;code>i16::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i32.html#method.reverse_bits">&lt;code>i32::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i64.html#method.reverse_bits">&lt;code>i64::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i8.html#method.reverse_bits">&lt;code>i8::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.isize.html#method.reverse_bits">&lt;code>isize::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within">&lt;code>slice::copy_within&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.u128.html#method.reverse_bits">&lt;code>u128::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.u16.html#method.reverse_bits">&lt;code>u16::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.u32.html#method.reverse_bits">&lt;code>u32::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.u64.html#method.reverse_bits">&lt;code>u64::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.u8.html#method.reverse_bits">&lt;code>u8::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.usize.html#method.reverse_bits">&lt;code>usize::reverse_bits&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/7026/">&lt;code>Cargo.lock&lt;/code> files are now included by default when publishing executable crates
with executables.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/7056/">You can now specify &lt;code>default-run=&amp;quot;foo&amp;quot;&lt;/code> in &lt;code>[package]&lt;/code> to specify the
default executable to use for &lt;code>cargo run&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61342/">Using &lt;code>...&lt;/code> for inclusive range patterns will now warn by default.&lt;/a>
Please transition your code to using the &lt;code>..=&lt;/code> syntax for inclusive
ranges instead.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/61203/">Using a trait object without the &lt;code>dyn&lt;/code> will now warn by default.&lt;/a>
Please transition your code to use &lt;code>dyn Trait&lt;/code> for trait objects instead.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.36.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.36.0/</guid><description>&lt;h1 id="1360">
 1.36.0
 &lt;a class="anchor" href="#1360">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>4 July, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>17 May, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59114/">Non-Lexical Lifetimes are now enabled on the 2015 edition.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59445/">The order of traits in trait objects no longer affects the semantics of that
object.&lt;/a> e.g. &lt;code>dyn Send + fmt::Debug&lt;/code> is now equivalent to
&lt;code>dyn fmt::Debug + Send&lt;/code>, where this was previously not the case.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58623/">&lt;code>HashMap&lt;/code>&amp;rsquo;s implementation has been replaced with &lt;code>hashbrown::HashMap&lt;/code> implementation.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60318/">&lt;code>TryFromSliceError&lt;/code> now implements &lt;code>From&amp;lt;Infallible&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60364/">&lt;code>mem::needs_drop&lt;/code> is now available as a const fn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60370/">&lt;code>alloc::Layout::from_size_align_unchecked&lt;/code> is now available as a const fn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60404/">&lt;code>String&lt;/code> now implements &lt;code>BorrowMut&amp;lt;str&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60234/">&lt;code>io::Cursor&lt;/code> now implements &lt;code>Default&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60244/">Both &lt;code>NonNull::{dangling, cast}&lt;/code> are now const fns.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59675/">The &lt;code>alloc&lt;/code> crate is now stable.&lt;/a> &lt;code>alloc&lt;/code> allows you to use a subset
of &lt;code>std&lt;/code> (e.g. &lt;code>Vec&lt;/code>, &lt;code>Box&lt;/code>, &lt;code>Arc&lt;/code>) in &lt;code>#![no_std]&lt;/code> environments if the
environment has access to heap memory allocation.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59825/">&lt;code>String&lt;/code> now implements &lt;code>From&amp;lt;&amp;amp;String&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59826/">You can now pass multiple arguments to the &lt;code>dbg!&lt;/code> macro.&lt;/a> &lt;code>dbg!&lt;/code> will
return a tuple of each argument when there is multiple arguments.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59648/">&lt;code>Result::{is_err, is_ok}&lt;/code> are now &lt;code>#[must_use]&lt;/code> and will produce a warning if
not used.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.rotate_left">&lt;code>VecDeque::rotate_left&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.rotate_right">&lt;code>VecDeque::rotate_right&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.copied">&lt;code>Iterator::copied&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.IoSlice.html">&lt;code>io::IoSlice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.IoSliceMut.html">&lt;code>io::IoSliceMut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/trait.Read.html#method.read_vectored">&lt;code>Read::read_vectored&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/trait.Write.html#method.write_vectored">&lt;code>Write::write_vectored&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.as_mut_ptr">&lt;code>str::as_mut_ptr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/mem/union.MaybeUninit.html">&lt;code>mem::MaybeUninit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset">&lt;code>pointer::align_offset&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/future/trait.Future.html">&lt;code>future::Future&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/beta/std/task/struct.Context.html">&lt;code>task::Context&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/beta/std/task/struct.RawWaker.html">&lt;code>task::RawWaker&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/beta/std/task/struct.RawWakerVTable.html">&lt;code>task::RawWakerVTable&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/beta/std/task/struct.Waker.html">&lt;code>task::Waker&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/beta/std/task/enum.Poll.html">&lt;code>task::Poll&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6860/">Cargo will now produce an error if you attempt to use the name of a required dependency as a feature.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6934/">You can now pass the &lt;code>--offline&lt;/code> flag to run cargo without accessing the network.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You can find further change&amp;rsquo;s in &lt;a href="https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-136-2019-07-04">Cargo&amp;rsquo;s 1.36.0 release notes&lt;/a>.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.35.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.35.0/</guid><description>&lt;h1 id="1350">
 1.35.0
 &lt;a class="anchor" href="#1350">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>23 May, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>5 April, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59500/">&lt;code>FnOnce&lt;/code>, &lt;code>FnMut&lt;/code>, and the &lt;code>Fn&lt;/code> traits are now implemented for &lt;code>Box&amp;lt;FnOnce&amp;gt;&lt;/code>,
&lt;code>Box&amp;lt;FnMut&amp;gt;&lt;/code>, and &lt;code>Box&amp;lt;Fn&amp;gt;&lt;/code> respectively.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59580/">You can now coerce closures into unsafe function pointers.&lt;/a> e.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsafe&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">call_unsafe&lt;/span>(func: &lt;span style="color:#a6e22e">unsafe&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { call_unsafe(&lt;span style="color:#f92672">||&lt;/span> {}); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58080/">Added the &lt;code>armv6-unknown-freebsd-gnueabihf&lt;/code> and
&lt;code>armv7-unknown-freebsd-gnueabihf&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59464/">Added the &lt;code>wasm32-unknown-wasi&lt;/code> target.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59460/">&lt;code>Thread&lt;/code> will now show its ID in &lt;code>Debug&lt;/code> output.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59512/">&lt;code>StdinLock&lt;/code>, &lt;code>StdoutLock&lt;/code>, and &lt;code>StderrLock&lt;/code> now implement &lt;code>AsRawFd&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59451/">&lt;code>alloc::System&lt;/code> now implements &lt;code>Default&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59076/">Expanded &lt;code>Debug&lt;/code> output (&lt;code>{:#?}&lt;/code>) for structs now has a trailing comma on the
last field.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58778/">&lt;code>char::{ToLowercase, ToUppercase}&lt;/code> now
implement &lt;code>ExactSizeIterator&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58717/">All &lt;code>NonZero&lt;/code> numeric types now implement &lt;code>FromStr&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58423/">Removed the &lt;code>Read&lt;/code> trait bounds
on the &lt;code>BufReader::{get_ref, get_mut, into_inner}&lt;/code> methods.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57847/">You can now call the &lt;code>dbg!&lt;/code> macro without any parameters to print the file
and line where it is called.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/59283/">In place ASCII case conversions are now up to 4× faster.&lt;/a>
e.g. &lt;code>str::make_ascii_lowercase&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58369/">&lt;code>hash_map::{OccupiedEntry, VacantEntry}&lt;/code> now implement &lt;code>Sync&lt;/code>
and &lt;code>Send&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/primitive.f32.html#method.copysign">&lt;code>f32::copysign&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/primitive.f64.html#method.copysign">&lt;code>f64::copysign&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.replace_with">&lt;code>RefCell::replace_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.map_split">&lt;code>RefCell::map_split&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/ptr/fn.hash.html">&lt;code>ptr::hash&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains">&lt;code>Range::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeFrom.html#method.contains">&lt;code>RangeFrom::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeTo.html#method.contains">&lt;code>RangeTo::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.contains">&lt;code>RangeInclusive::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html#method.contains">&lt;code>RangeToInclusive::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.copied">&lt;code>Option::copied&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6298/">You can now set &lt;code>cargo:rustc-cdylib-link-arg&lt;/code> at build time to pass custom
linker arguments when building a &lt;code>cdylib&lt;/code>.&lt;/a> Its usage is highly
platform specific.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58575">The Rust toolchain is now available natively for musl based distros.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.34.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.2/</guid><description>&lt;h1 id="1342">
 1.34.2
 &lt;a class="anchor" href="#1342">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>14 May, 2019&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/60785">Destabilize the &lt;code>Error::type_id&lt;/code> function due to a security
vulnerability&lt;/a> (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12083">CVE-2019-12083&lt;/a>)&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.34.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.1/</guid><description>&lt;h1 id="1341">
 1.34.1
 &lt;a class="anchor" href="#1341">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 April, 2019&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/3821">Fix false positives for the &lt;code>redundant_closure&lt;/code> Clippy lint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/3844">Fix false positives for the &lt;code>missing_const_for_fn&lt;/code> Clippy lint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-clippy/pull/3805">Fix Clippy panic when checking some macros&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.34.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.0/</guid><description>&lt;h1 id="1340">
 1.34.0
 &lt;a class="anchor" href="#1340">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>11 April, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>22 February, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58166/">You can now use &lt;code>#[deprecated = &amp;quot;reason&amp;quot;]&lt;/code>&lt;/a> as a shorthand for
&lt;code>#[deprecated(note = &amp;quot;reason&amp;quot;)]&lt;/code>. This was previously allowed by mistake
but had no effect.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57367/">You can now accept token streams in &lt;code>#[attr()]&lt;/code>,&lt;code>#[attr[]]&lt;/code>, and
&lt;code>#[attr{}]&lt;/code> procedural macros.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57407/">You can now write &lt;code>extern crate self as foo;&lt;/code>&lt;/a> to import your
crate&amp;rsquo;s root into the extern prelude.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58406/">You can now target &lt;code>riscv64imac-unknown-none-elf&lt;/code> and
&lt;code>riscv64gc-unknown-none-elf&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58057/">You can now enable linker plugin LTO optimisations with
&lt;code>-C linker-plugin-lto&lt;/code>.&lt;/a> This allows rustc to compile your Rust code
into LLVM bitcode allowing LLVM to perform LTO optimisations across C/C++ FFI
boundaries.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57809/">You can now target &lt;code>powerpc64-unknown-freebsd&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58370/">The trait bounds have been removed on some of &lt;code>HashMap&amp;lt;K, V, S&amp;gt;&lt;/code>&amp;rsquo;s and
&lt;code>HashSet&amp;lt;T, S&amp;gt;&lt;/code>&amp;rsquo;s basic methods.&lt;/a> Most notably you no longer require
the &lt;code>Hash&lt;/code> trait to create an iterator.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58421/">The &lt;code>Ord&lt;/code> trait bounds have been removed on some of &lt;code>BinaryHeap&amp;lt;T&amp;gt;&lt;/code>&amp;rsquo;s basic
methods.&lt;/a> Most notably you no longer require the &lt;code>Ord&lt;/code> trait to create
an iterator.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58044/">The methods &lt;code>overflowing_neg&lt;/code> and &lt;code>wrapping_neg&lt;/code> are now &lt;code>const&lt;/code> functions
for all numeric types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57604/">Indexing a &lt;code>str&lt;/code> is now generic over all types that
implement &lt;code>SliceIndex&amp;lt;str&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57106/">&lt;code>str::trim&lt;/code>, &lt;code>str::trim_matches&lt;/code>, &lt;code>str::trim_{start, end}&lt;/code>, and
&lt;code>str::trim_{start, end}_matches&lt;/code> are now &lt;code>#[must_use]&lt;/code>&lt;/a> and will
produce a warning if their returning type is unused.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57873/">The methods &lt;code>checked_pow&lt;/code>, &lt;code>saturating_pow&lt;/code>, &lt;code>wrapping_pow&lt;/code>, and
&lt;code>overflowing_pow&lt;/code> are now available for all numeric types.&lt;/a> These are
equivalent to methods such as &lt;code>wrapping_add&lt;/code> for the &lt;code>pow&lt;/code> operation.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;h4 id="std--core">
 std &amp;amp; core
 &lt;a class="anchor" href="#std--core">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/any/trait.Any.html#tymethod.type_id">&lt;code>Any::type_id&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/error/trait.Error.html#method.type_id">&lt;code>Error::type_id&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI16.html">&lt;code>atomic::AtomicI16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI32.html">&lt;code>atomic::AtomicI32&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI64.html">&lt;code>atomic::AtomicI64&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI8.html">&lt;code>atomic::AtomicI8&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU16.html">&lt;code>atomic::AtomicU16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html">&lt;code>atomic::AtomicU32&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU64.html">&lt;code>atomic::AtomicU64&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html">&lt;code>atomic::AtomicU8&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/convert/enum.Infallible.html">&lt;code>convert::Infallible&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/convert/trait.TryFrom.html">&lt;code>convert::TryFrom&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/convert/trait.TryInto.html">&lt;code>convert::TryInto&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/fn.from_fn.html">&lt;code>iter::from_fn&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/fn.successors.html">&lt;code>iter::successors&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroI128.html">&lt;code>num::NonZeroI128&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroI16.html">&lt;code>num::NonZeroI16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroI32.html">&lt;code>num::NonZeroI32&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroI64.html">&lt;code>num::NonZeroI64&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroI8.html">&lt;code>num::NonZeroI8&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroIsize.html">&lt;code>num::NonZeroIsize&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key">&lt;code>slice::sort_by_cached_key&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.escape_debug">&lt;code>str::escape_debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.escape_default">&lt;code>str::escape_default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.escape_unicode">&lt;code>str::escape_unicode&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.split_ascii_whitespace">&lt;code>str::split_ascii_whitespace&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="std">
 std
 &lt;a class="anchor" href="#std">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Instant.html#method.checked_add">&lt;code>Instant::checked_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Instant.html#method.checked_sub">&lt;code>Instant::checked_sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.SystemTime.html#method.checked_add">&lt;code>SystemTime::checked_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.SystemTime.html#method.checked_sub">&lt;code>SystemTime::checked_sub&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6654/">You can now use alternative registries to crates.io.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56470/">You can now use the &lt;code>?&lt;/code> operator in your documentation tests without manually
adding &lt;code>fn main() -&amp;gt; Result&amp;lt;(), _&amp;gt; {}&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/58059/">&lt;code>Command::before_exec&lt;/code> is being replaced by the unsafe method
&lt;code>Command::pre_exec&lt;/code>&lt;/a> and will be deprecated with Rust 1.37.0.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57425/">Use of &lt;code>ATOMIC_{BOOL, ISIZE, USIZE}_INIT&lt;/code> is now deprecated&lt;/a> as you
can now use &lt;code>const&lt;/code> functions in &lt;code>static&lt;/code> variables.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.33.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.33.0/</guid><description>&lt;h1 id="1330">
 1.33.0
 &lt;a class="anchor" href="#1330">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>28 February, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>11 January, 2019&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57465/">You can now use the &lt;code>cfg(target_vendor)&lt;/code> attribute.&lt;/a> E.g.
&lt;code>#[cfg(target_vendor=&amp;quot;apple&amp;quot;)] fn main() { println!(&amp;quot;Hello Apple!&amp;quot;); }&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56362">Integer patterns such as in a match expression can now be exhaustive.&lt;/a>
E.g. You can have match statement on a &lt;code>u8&lt;/code> that covers &lt;code>0..=255&lt;/code> and
you would no longer be required to have a &lt;code>_ =&amp;gt; unreachable!()&lt;/code> case.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57532/">You can now have multiple patterns in &lt;code>if let&lt;/code> and &lt;code>while let&lt;/code>
expressions.&lt;/a> You can do this with the same syntax as a &lt;code>match&lt;/code>
expression. E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Crab(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lobster(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> Creature::Crab(&lt;span style="color:#e6db74">&amp;#34;Ferris&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Creature::Crab(name) &lt;span style="color:#f92672">|&lt;/span> Creature::Person(name) &lt;span style="color:#f92672">=&lt;/span> state {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;This creature&amp;#39;s name is: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57535/">You can now have irrefutable &lt;code>if let&lt;/code> and &lt;code>while let&lt;/code> patterns.&lt;/a> Using
this feature will by default produce a warning as this behaviour can be
unintuitive. E.g. &lt;code>if let _ = 5 {}&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57175/">You can now use &lt;code>let&lt;/code> bindings, assignments, expression statements,
and irrefutable pattern destructuring in const functions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57067/">You can now call unsafe const functions.&lt;/a> E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>() -&amp;gt; &lt;span style="color:#66d9ef">i32&lt;/span> { &lt;span style="color:#ae81ff">5&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>() -&amp;gt; &lt;span style="color:#66d9ef">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { foo() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57332/">You can now specify multiple attributes in a &lt;code>cfg_attr&lt;/code> attribute.&lt;/a>
E.g. &lt;code>#[cfg_attr(all(), must_use, optimize)]&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57049/">You can now specify a specific alignment with the &lt;code>#[repr(packed)]&lt;/code>
attribute.&lt;/a> E.g. &lt;code>#[repr(packed(2))] struct Foo(i16, i32);&lt;/code> is a struct
with an alignment of 2 bytes and a size of 6 bytes.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56303/">You can now import an item from a module as an &lt;code>_&lt;/code>.&lt;/a> This allows you to
import a trait&amp;rsquo;s impls, and not have the name in the namespace. E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::io::Read &lt;span style="color:#66d9ef">as&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Allowed as there is only one `Read` in the module.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">trait&lt;/span> Read {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56805">You may now use &lt;code>Rc&lt;/code>, &lt;code>Arc&lt;/code>, and &lt;code>Pin&lt;/code> as method receivers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56351/">You can now set a linker flavor for &lt;code>rustc&lt;/code> with the &lt;code>-Clinker-flavor&lt;/code>
command line argument.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56642/">The minimum required LLVM version has been bumped to 6.0.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57615/">Added support for the PowerPC64 architecture on FreeBSD.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57130/">The &lt;code>x86_64-fortanix-unknown-sgx&lt;/code> target support has been upgraded to
tier 2 support.&lt;/a> Visit the &lt;a href="https://forge.rust-lang.org/platform-support.html">platform support&lt;/a> page for
information on Rust&amp;rsquo;s platform support.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56947/">Added support for the &lt;code>thumbv7neon-linux-androideabi&lt;/code> and
&lt;code>thumbv7neon-unknown-linux-gnueabihf&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56769/">Added support for the &lt;code>x86_64-unknown-uefi&lt;/code> target.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57566/">The methods &lt;code>overflowing_{add, sub, mul, shl, shr}&lt;/code> are now &lt;code>const&lt;/code>
functions for all numeric types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57105">The methods &lt;code>rotate_left&lt;/code>, &lt;code>rotate_right&lt;/code>, and &lt;code>wrapping_{add, sub, mul, shl, shr}&lt;/code>
are now &lt;code>const&lt;/code> functions for all numeric types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57105">The methods &lt;code>is_positive&lt;/code> and &lt;code>is_negative&lt;/code> are now &lt;code>const&lt;/code> functions for
all signed numeric types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57167/">The &lt;code>get&lt;/code> method for all &lt;code>NonZero&lt;/code> types is now &lt;code>const&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57234/">The methods &lt;code>count_ones&lt;/code>, &lt;code>count_zeros&lt;/code>, &lt;code>leading_zeros&lt;/code>, &lt;code>trailing_zeros&lt;/code>,
&lt;code>swap_bytes&lt;/code>, &lt;code>from_be&lt;/code>, &lt;code>from_le&lt;/code>, &lt;code>to_be&lt;/code>, &lt;code>to_le&lt;/code> are now &lt;code>const&lt;/code> for all
numeric types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/57234/">&lt;code>Ipv4Addr::new&lt;/code> is now a &lt;code>const&lt;/code> function&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.read_exact_at">&lt;code>unix::FileExt::read_exact_at&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.write_all_at">&lt;code>unix::FileExt::write_all_at&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose">&lt;code>Option::transpose&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose">&lt;code>Result::transpose&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/convert/fn.identity.html">&lt;code>convert::identity&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/pin/struct.Pin.html">&lt;code>pin::Pin&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/std/marker/trait.Unpin.html">&lt;code>marker::Unpin&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/marker/struct.PhantomPinned.html">&lt;code>marker::PhantomPinned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize_with">&lt;code>Vec::resize_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.resize_with">&lt;code>VecDeque::resize_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_millis">&lt;code>Duration::as_millis&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_micros">&lt;code>Duration::as_micros&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_nanos">&lt;code>Duration::as_nanos&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6453/">You can now publish crates that require a feature flag to compile with
&lt;code>cargo publish --features&lt;/code> or &lt;code>cargo publish --all-features&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6484/">Cargo should now rebuild a crate if a file was modified during the initial
build.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The methods &lt;code>str::{trim_left, trim_right, trim_left_matches, trim_right_matches}&lt;/code>
are now deprecated in the standard library, and their usage will now produce a warning.
Please use the &lt;code>str::{trim_start, trim_end, trim_start_matches, trim_end_matches}&lt;/code>
methods instead.&lt;/li>
&lt;li>The &lt;code>Error::cause&lt;/code> method has been deprecated in favor of &lt;code>Error::source&lt;/code> which supports
downcasting.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56243">Libtest no longer creates a new thread for each test when
&lt;code>--test-threads=1&lt;/code>. It also runs the tests in deterministic order&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.32.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.32.0/</guid><description>&lt;h1 id="1320">
 1.32.0
 &lt;a class="anchor" href="#1320">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>17 January, 2019&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>30 November, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;h4 id="2018-edition">
 2018 edition
 &lt;a class="anchor" href="#2018-edition">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56245/">You can now use the &lt;code>?&lt;/code> operator in macro definitions.&lt;/a> The &lt;code>?&lt;/code>
operator allows you to specify zero or one repetitions similar to the &lt;code>*&lt;/code> and
&lt;code>+&lt;/code> operators.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56759/">Module paths with no leading keyword like &lt;code>super&lt;/code>, &lt;code>self&lt;/code>, or &lt;code>crate&lt;/code>, will
now always resolve to the item (&lt;code>enum&lt;/code>, &lt;code>struct&lt;/code>, etc.) available in the
module if present, before resolving to a external crate or an item the prelude.&lt;/a>
E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> { Red, Green, Blue }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> Color::&lt;span style="color:#f92672">*&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="all-editions">
 All editions
 &lt;a class="anchor" href="#all-editions">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55837/">You can now match against &lt;code>PhantomData&amp;lt;T&amp;gt;&lt;/code> types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56072/">You can now match against literals in macros with the &lt;code>literal&lt;/code>
specifier.&lt;/a> This will match against a literal of any type.
E.g. &lt;code>1&lt;/code>, &lt;code>'A'&lt;/code>, &lt;code>&amp;quot;Hello World&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56365/">Self can now be used as a constructor and pattern for unit and tuple structs.&lt;/a> E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>(&lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Point {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">new&lt;/span>(x: &lt;span style="color:#66d9ef">i32&lt;/span>, y: &lt;span style="color:#66d9ef">i32&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self(x, y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_origin&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56366/">Self can also now be used in type definitions.&lt;/a> E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self: PartialOrd&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e">// can write `Self` instead of `List&amp;lt;T&amp;gt;`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Nil,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cons(T, Box&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self&lt;span style="color:#f92672">&amp;gt;&lt;/span>) &lt;span style="color:#75715e">// likewise here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55663/">You can now mark traits with &lt;code>#[must_use]&lt;/code>.&lt;/a> This provides a warning if
a &lt;code>impl Trait&lt;/code> or &lt;code>dyn Trait&lt;/code> is returned and unused in the program.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55238/">The default allocator has changed from jemalloc to the default allocator on
your system.&lt;/a> The compiler itself on Linux &amp;amp; macOS will still use
jemalloc, but programs compiled with it will use the system allocator.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55702/">Added the &lt;code>aarch64-pc-windows-msvc&lt;/code> target.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55148/">&lt;code>PathBuf&lt;/code> now implements &lt;code>FromStr&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/55843/">&lt;code>Box&amp;lt;[T]&amp;gt;&lt;/code> now implements &lt;code>FromIterator&amp;lt;T&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56395/">The &lt;code>dbg!&lt;/code> macro has been stabilized.&lt;/a> This macro enables you to
easily debug expressions in your rust program. E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> dbg!(a &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ^-- prints: [src/main.rs:4] a * 2 = 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>assert_eq!(b, &lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>The following APIs are now &lt;code>const&lt;/code> functions and can be used in a
&lt;code>const&lt;/code> context.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.31.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.31.1/</guid><description>&lt;h1 id="1311">
 1.31.1
 &lt;a class="anchor" href="#1311">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 December, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/56562">Fix Rust failing to build on &lt;code>powerpc-unknown-netbsd&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rls/issues/1171">Fix broken go-to-definition in RLS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rls/pull/1170">Fix infinite loop on hover in RLS&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.31.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.31.0/</guid><description>&lt;h1 id="1310">
 1.31.0
 &lt;a class="anchor" href="#1310">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>6 December, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>19 October, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>🎉 &lt;a href="https://github.com/rust-lang/rust/pull/54057/">This version marks the release of the 2018 edition of Rust.&lt;/a> 🎉&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54778/">New lifetime elision rules now allow for eliding lifetimes in functions and
impl headers.&lt;/a> E.g. &lt;code>impl&amp;lt;'a&amp;gt; Reader for BufReader&amp;lt;'a&amp;gt; {}&lt;/code> can now be
&lt;code>impl Reader for BufReader&amp;lt;'_&amp;gt; {}&lt;/code>. Lifetimes are still required to be defined
in structs.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54835/">You can now define and use &lt;code>const&lt;/code> functions.&lt;/a> These are currently
a strict minimal subset of the &lt;a href="https://github.com/rust-lang/rfcs/pull/911">const fn RFC&lt;/a>. Refer to the
&lt;a href="https://doc.rust-lang.org/reference/items/functions.html#const-functions">language reference&lt;/a> for what exactly is available.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54870/">You can now use tool lints, which allow you to scope lints from external
tools using attributes.&lt;/a> E.g. &lt;code>#[allow(clippy::filter_map)]&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54451/">&lt;code>#[no_mangle]&lt;/code> and &lt;code>#[export_name]&lt;/code> attributes can now be located anywhere in
a crate, not just in exported functions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54497/">You can now use parentheses in pattern matches.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54430/">Updated musl to 1.1.20&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54240/">You can now convert &lt;code>num::NonZero*&lt;/code> types to their raw equivalents using the
&lt;code>From&lt;/code> trait.&lt;/a> E.g. &lt;code>u8&lt;/code> now implements &lt;code>From&amp;lt;NonZeroU8&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53218/">You can now convert a &lt;code>&amp;amp;Option&amp;lt;T&amp;gt;&lt;/code> into &lt;code>Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code> and &lt;code>&amp;amp;mut Option&amp;lt;T&amp;gt;&lt;/code>
into &lt;code>Option&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code> using the &lt;code>From&lt;/code> trait.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52813/">You can now multiply (&lt;code>*&lt;/code>) a &lt;code>time::Duration&lt;/code> by a &lt;code>u32&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.align_to">&lt;code>slice::align_to&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.align_to_mut">&lt;code>slice::align_to_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact">&lt;code>slice::chunks_exact&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut">&lt;code>slice::chunks_exact_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks">&lt;code>slice::rchunks&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut">&lt;code>slice::rchunks_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact">&lt;code>slice::rchunks_exact&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut">&lt;code>slice::rchunks_exact_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.replace">&lt;code>Option::replace&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6005/">Cargo will now download crates in parallel using HTTP/2.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6319/">You can now rename packages in your Cargo.toml&lt;/a> We have a guide
on &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml">how to use the &lt;code>package&lt;/code> key in your dependencies.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.30.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.30.1/</guid><description>&lt;h1 id="1301">
 1.30.1
 &lt;a class="anchor" href="#1301">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>8 November, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54199">Fixed overflow ICE in rustdoc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/6122">Cap Cargo progress bar width at 60 in MSYS terminals&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.30.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.30.0/</guid><description>&lt;h1 id="1300">
 1.30.0
 &lt;a class="anchor" href="#1300">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 October, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>7 September, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52081/">Procedural macros are now available.&lt;/a> These kinds of macros allow for
more powerful code generation. There is a &lt;a href="https://doc.rust-lang.org/nightly/book/2018-edition/ch19-06-macros.html">new chapter available&lt;/a>
in the Rust Programming Language book that goes further in depth.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53236/">You can now use keywords as identifiers using the raw identifiers
syntax (&lt;code>r#&lt;/code>),&lt;/a> e.g. &lt;code>let r#for = true;&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53272/">Using anonymous parameters in traits is now deprecated with a warning and
will be a hard error in the 2018 edition.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54404/">You can now use &lt;code>crate&lt;/code> in paths.&lt;/a> This allows you to refer to the
crate root in the path, e.g. &lt;code>use crate::foo;&lt;/code> refers to &lt;code>foo&lt;/code> in &lt;code>src/lib.rs&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54404/">Using a external crate no longer requires being prefixed with &lt;code>::&lt;/code>.&lt;/a>
Previously, using a external crate in a module without a use statement
required &lt;code>let json = ::serde_json::from_str(foo);&lt;/code> but can now be written
as &lt;code>let json = serde_json::from_str(foo);&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51363/">You can now apply the &lt;code>#[used]&lt;/code> attribute to static items to prevent the
compiler from optimising them away, even if they appear to be unused,&lt;/a>
e.g. &lt;code>#[used] static FOO: u32 = 1;&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50911/">You can now import and reexport macros from other crates with the &lt;code>use&lt;/code>
syntax.&lt;/a> Macros exported with &lt;code>#[macro_export]&lt;/code> are now placed into
the root module of the crate. If your macro relies on calling other local
macros, it is recommended to export with the
&lt;code>#[macro_export(local_inner_macros)]&lt;/code> attribute so users won&amp;rsquo;t have to import
those macros.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53370/">You can now catch visibility keywords (e.g. &lt;code>pub&lt;/code>, &lt;code>pub(crate)&lt;/code>) in macros
using the &lt;code>vis&lt;/code> specifier.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53044/">Non-macro attributes now allow all forms of literals, not just
strings.&lt;/a> Previously, you would write &lt;code>#[attr(&amp;quot;true&amp;quot;)]&lt;/code>, and you can now
write &lt;code>#[attr(true)]&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51366/">You can now specify a function to handle a panic in the Rust runtime with the
&lt;code>#[panic_handler]&lt;/code> attribute.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53822/">Added the &lt;code>riscv32imc-unknown-none-elf&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53165/">Added the &lt;code>aarch64-unknown-netbsd&lt;/code> target&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53611/">Upgraded to LLVM 8.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53033/">&lt;code>ManuallyDrop&lt;/code> now allows the inner type to be unsized.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.BROADCAST">&lt;code>Ipv4Addr::BROADCAST&lt;/code>&lt;/a>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.29.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.2/</guid><description>&lt;h1 id="1292">
 1.29.2
 &lt;a class="anchor" href="#1292">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>11 October, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/54639">Workaround for an aliasing-related LLVM bug, which caused miscompilation.&lt;/a>&lt;/li>
&lt;li>The &lt;code>rls-preview&lt;/code> component on the windows-gnu targets has been restored.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.29.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.1/</guid><description>&lt;h1 id="1291">
 1.29.1
 &lt;a class="anchor" href="#1291">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 September, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="security-notes">
 Security Notes
 &lt;a class="anchor" href="#security-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>The standard library&amp;rsquo;s &lt;code>str::repeat&lt;/code> function contained an out of bounds write
caused by an integer overflow. This has been fixed by deterministically
panicking when an overflow happens.&lt;/p>
&lt;p>Thank you to Scott McMurray for responsibly disclosing this vulnerability to
us.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.29.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.0/</guid><description>&lt;h1 id="1290">
 1.29.0
 &lt;a class="anchor" href="#1290">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>13 September, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>27 July, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51899/">Bumped minimum LLVM version to 5.0.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51619/">Added &lt;code>powerpc64le-unknown-linux-musl&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52861/">Added &lt;code>aarch64-unknown-hermit&lt;/code> and &lt;code>x86_64-unknown-hermit&lt;/code> targets.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51966/">Upgraded to LLVM 7.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52239/">&lt;code>Once::call_once&lt;/code> no longer requires &lt;code>Once&lt;/code> to be &lt;code>'static&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52402/">&lt;code>BuildHasherDefault&lt;/code> now implements &lt;code>PartialEq&lt;/code> and &lt;code>Eq&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51912/">&lt;code>Box&amp;lt;CStr&amp;gt;&lt;/code>, &lt;code>Box&amp;lt;OsStr&amp;gt;&lt;/code>, and &lt;code>Box&amp;lt;Path&amp;gt;&lt;/code> now implement &lt;code>Clone&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51178/">Implemented &lt;code>PartialEq&amp;lt;&amp;amp;str&amp;gt;&lt;/code> for &lt;code>OsString&lt;/code> and &lt;code>PartialEq&amp;lt;OsString&amp;gt;&lt;/code>
for &lt;code>&amp;amp;str&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50494/">&lt;code>Cell&amp;lt;T&amp;gt;&lt;/code> now allows &lt;code>T&lt;/code> to be unsized.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52656/">&lt;code>SocketAddr&lt;/code> is now stable on Redox.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.downcast">&lt;code>Arc::downcast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flatten">&lt;code>Iterator::flatten&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.downcast">&lt;code>Rc::downcast&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5831/">Cargo can silently fix some bad lockfiles.&lt;/a> You can use
&lt;code>--locked&lt;/code> to disable this behavior.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5614/">&lt;code>cargo-install&lt;/code> will now allow you to cross compile an install
using &lt;code>--target&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5723/">Added the &lt;code>cargo-fix&lt;/code> subcommand to automatically move project code from
2015 edition to 2018.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5543">&lt;code>cargo doc&lt;/code> can now optionally document private types using the
&lt;code>--document-private-items&lt;/code> flag.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52354/">&lt;code>rustdoc&lt;/code> now has the &lt;code>--cap-lints&lt;/code> option which demotes all lints above
the specified level to that level.&lt;/a> For example &lt;code>--cap-lints warn&lt;/code>
will demote &lt;code>deny&lt;/code> and &lt;code>forbid&lt;/code> lints to &lt;code>warn&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52197/">&lt;code>rustc&lt;/code> and &lt;code>rustdoc&lt;/code> will now have the exit code of &lt;code>1&lt;/code> if compilation
fails and &lt;code>101&lt;/code> if there is a panic.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51122">A preview of clippy has been made available through rustup.&lt;/a>
You can install the preview with &lt;code>rustup component add clippy-preview&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51807/">&lt;code>str::{slice_unchecked, slice_unchecked_mut}&lt;/code> are now deprecated.&lt;/a>
Use &lt;code>str::get_unchecked(begin..end)&lt;/code> instead.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51656/">&lt;code>std::env::home_dir&lt;/code> is now deprecated for its unintuitive behavior.&lt;/a>
Consider using the &lt;code>home_dir&lt;/code> function from
&lt;a href="https://crates.io/crates/dirs">https://crates.io/crates/dirs&lt;/a> instead.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/52330/">&lt;code>rustc&lt;/code> will no longer silently ignore invalid data in target spec.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/53893/">&lt;code>cfg&lt;/code> attributes and &lt;code>--cfg&lt;/code> command line flags are now more
strictly validated.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.28.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.28.0/</guid><description>&lt;h1 id="1280">
 1.28.0
 &lt;a class="anchor" href="#1280">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>2 August, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>15 June, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51562/">The &lt;code>#[repr(transparent)]&lt;/code> attribute is now stable.&lt;/a> This attribute
allows a Rust newtype wrapper (&lt;code>struct NewType&amp;lt;T&amp;gt;(T);&lt;/code>) to be represented as
the inner type across Foreign Function Interface (FFI) boundaries.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51196/">The keywords &lt;code>pure&lt;/code>, &lt;code>sizeof&lt;/code>, &lt;code>alignof&lt;/code>, and &lt;code>offsetof&lt;/code> have been unreserved
and can now be used as identifiers.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51241/">The &lt;code>GlobalAlloc&lt;/code> trait and &lt;code>#[global_allocator]&lt;/code> attribute are now
stable.&lt;/a> This will allow users to specify a global allocator for
their program.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51298/">Unit test functions marked with the &lt;code>#[test]&lt;/code> attribute can now return
&lt;code>Result&amp;lt;(), E: Debug&amp;gt;&lt;/code> in addition to &lt;code>()&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50385/">The &lt;code>lifetime&lt;/code> specifier for &lt;code>macro_rules!&lt;/code> is now stable.&lt;/a> This
allows macros to easily target lifetimes.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50265/">The &lt;code>s&lt;/code> and &lt;code>z&lt;/code> optimisation levels are now stable.&lt;/a> These optimisations
prioritise making smaller binary sizes. &lt;code>z&lt;/code> is the same as &lt;code>s&lt;/code> with the
exception that it does not vectorise loops, which typically results in an even
smaller binary.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49546/">The short error format is now stable.&lt;/a> Specified with
&lt;code>--error-format=short&lt;/code> this option will provide a more compressed output of
rust error messages.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50143/">Added a lint warning when you have duplicated &lt;code>macro_export&lt;/code>s.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50855/">Reduced the number of allocations in the macro parser.&lt;/a> This can
improve compile times of macro heavy crates on average by 5%.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51306/">Implemented &lt;code>Default&lt;/code> for &lt;code>&amp;amp;mut str&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50554/">Implemented &lt;code>From&amp;lt;bool&amp;gt;&lt;/code> for all integer and unsigned number types.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50234/">Implemented &lt;code>Extend&lt;/code> for &lt;code>()&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50364/">The &lt;code>Debug&lt;/code> implementation of &lt;code>time::Duration&lt;/code> should now be more easily
human readable.&lt;/a> Previously a &lt;code>Duration&lt;/code> of one second would printed as
&lt;code>Duration { secs: 1, nanos: 0 }&lt;/code> and will now be printed as &lt;code>1s&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50170/">Implemented &lt;code>From&amp;lt;&amp;amp;String&amp;gt;&lt;/code> for &lt;code>Cow&amp;lt;str&amp;gt;&lt;/code>, &lt;code>From&amp;lt;&amp;amp;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code> for &lt;code>Cow&amp;lt;[T]&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;Cow&amp;lt;CStr&amp;gt;&amp;gt;&lt;/code> for &lt;code>CString&lt;/code>, &lt;code>From&amp;lt;CString&amp;gt;, From&amp;lt;CStr&amp;gt;, From&amp;lt;&amp;amp;CString&amp;gt;&lt;/code>
for &lt;code>Cow&amp;lt;CStr&amp;gt;&lt;/code>, &lt;code>From&amp;lt;OsString&amp;gt;, From&amp;lt;OsStr&amp;gt;, From&amp;lt;&amp;amp;OsString&amp;gt;&lt;/code> for
&lt;code>Cow&amp;lt;OsStr&amp;gt;&lt;/code>, &lt;code>From&amp;lt;&amp;amp;PathBuf&amp;gt;&lt;/code> for &lt;code>Cow&amp;lt;Path&amp;gt;&lt;/code>, and &lt;code>From&amp;lt;Cow&amp;lt;Path&amp;gt;&amp;gt;&lt;/code>
for &lt;code>PathBuf&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50465/">Implemented &lt;code>Shl&lt;/code> and &lt;code>Shr&lt;/code> for &lt;code>Wrapping&amp;lt;u128&amp;gt;&lt;/code>
and &lt;code>Wrapping&amp;lt;i128&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51050/">&lt;code>DirEntry::metadata&lt;/code> now uses &lt;code>fstatat&lt;/code> instead of &lt;code>lstat&lt;/code> when
possible.&lt;/a> This can provide up to a 40% speed increase.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50610/">Improved error messages when using &lt;code>format!&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by">&lt;code>Iterator::step_by&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/path/struct.Path.html#method.ancestors">&lt;code>Path::ancestors&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.SystemTime.html#associatedconstant.UNIX_EPOCH">&lt;code>SystemTime::UNIX_EPOCH&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html">&lt;code>alloc::GlobalAlloc&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/struct.Layout.html">&lt;code>alloc::Layout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/struct.LayoutErr.html">&lt;code>alloc::LayoutErr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/struct.System.html">&lt;code>alloc::System&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/fn.alloc.html">&lt;code>alloc::alloc&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/fn.alloc_zeroed.html">&lt;code>alloc::alloc_zeroed&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/fn.dealloc.html">&lt;code>alloc::dealloc&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/fn.realloc.html">&lt;code>alloc::realloc&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/alloc/fn.handle_alloc_error.html">&lt;code>alloc::handle_alloc_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default">&lt;code>btree_map::Entry::or_default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/fmt/enum.Alignment.html">&lt;code>fmt::Alignment&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_default">&lt;code>hash_map::Entry::or_default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/fn.repeat_with.html">&lt;code>iter::repeat_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroUsize.html">&lt;code>num::NonZeroUsize&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroU128.html">&lt;code>num::NonZeroU128&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroU16.html">&lt;code>num::NonZeroU16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroU32.html">&lt;code>num::NonZeroU32&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroU64.html">&lt;code>num::NonZeroU64&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/num/struct.NonZeroU8.html">&lt;code>num::NonZeroU8&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/trait.RangeBounds.html">&lt;code>ops::RangeBounds&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/slice/trait.SliceIndex.html">&lt;code>slice::SliceIndex&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/slice/fn.from_mut.html">&lt;code>slice::from_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/slice/fn.from_ref.html">&lt;code>slice::from_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut-2">&lt;code>{Any + Send + Sync}::downcast_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-2">&lt;code>{Any + Send + Sync}::downcast_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/any/trait.Any.html#method.is-2">&lt;code>{Any + Send + Sync}::is&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5584/">Cargo will now no longer allow you to publish crates with build scripts that
modify the &lt;code>src&lt;/code> directory.&lt;/a> The &lt;code>src&lt;/code> directory in a crate should be
considered to be immutable.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50486/">The &lt;code>suggestion_applicability&lt;/code> field in &lt;code>rustc&lt;/code>&amp;rsquo;s json output is now
stable.&lt;/a> This will allow dev tools to check whether a code suggestion
would apply to them.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/51276/">Rust will consider trait objects with duplicated constraints to be the same
type as without the duplicated constraint.&lt;/a> For example the below code will
now fail to compile.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">trait&lt;/span> Trait {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Trait &lt;span style="color:#f92672">+&lt;/span> Send {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) { println!(&lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>); } &lt;span style="color:#75715e">//~ ERROR duplicate definitions with name `test`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Trait &lt;span style="color:#f92672">+&lt;/span> Send &lt;span style="color:#f92672">+&lt;/span> Send {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) { println!(&lt;span style="color:#e6db74">&amp;#34;two&amp;#34;&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.27.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.2/</guid><description>&lt;h1 id="1272">
 1.27.2
 &lt;a class="anchor" href="#1272">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 July, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The borrow checker was fixed to avoid potential unsoundness when using
match ergonomics: &lt;a href="https://github.com/rust-lang/rust/issues/52213">#52213&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.27.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.1/</guid><description>&lt;h1 id="1271">
 1.27.1
 &lt;a class="anchor" href="#1271">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 July, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="security-notes">
 Security Notes
 &lt;a class="anchor" href="#security-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>rustdoc would execute plugins in the /tmp/rustdoc/plugins directory
when running, which enabled executing code as some other user on a
given machine. This release fixes that vulnerability; you can read
more about this on the &lt;a href="https://blog.rust-lang.org/2018/07/06/security-advisory-for-rustdoc.html">blog&lt;/a>. The associated CVE is &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=%20CVE-2018-1000622">CVE-2018-1000622&lt;/a>.&lt;/p>
&lt;p>Thank you to Red Hat for responsibly disclosing this vulnerability to us.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The borrow checker was fixed to avoid an additional potential unsoundness when using
match ergonomics: &lt;a href="https://github.com/rust-lang/rust/issues/51415">#51415&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/issues/49534">#49534&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.27.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.0/</guid><description>&lt;h1 id="1270">
 1.27.0
 &lt;a class="anchor" href="#1270">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>21 June, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 May, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49699/">Removed &amp;lsquo;proc&amp;rsquo; from the reserved keywords list.&lt;/a> This allows &lt;code>proc&lt;/code> to
be used as an identifier.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49968/">The dyn syntax is now available.&lt;/a> This syntax is equivalent to the
bare &lt;code>Trait&lt;/code> syntax, and should make it clearer when being used in tandem with
&lt;code>impl Trait&lt;/code> because it is equivalent to the following syntax:
&lt;code>&amp;amp;Trait == &amp;amp;dyn Trait&lt;/code>, &lt;code>&amp;amp;mut Trait == &amp;amp;mut dyn Trait&lt;/code>, and
&lt;code>Box&amp;lt;Trait&amp;gt; == Box&amp;lt;dyn Trait&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48851/">Attributes on generic parameters such as types and lifetimes are
now stable.&lt;/a> e.g.
&lt;code>fn foo&amp;lt;#[lifetime_attr] 'a, #[type_attr] T: 'a&amp;gt;() {}&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48925/">The &lt;code>#[must_use]&lt;/code> attribute can now also be used on functions as well as
types.&lt;/a> It provides a lint that by default warns users when the
value returned by a function has not been used.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50423/">Added the &lt;code>armv5te-unknown-linux-musleabi&lt;/code> target.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49664/">SIMD (Single Instruction Multiple Data) on x86/x86_64 is now stable.&lt;/a>
This includes &lt;a href="https://doc.rust-lang.org/std/arch/x86/index.html">&lt;code>arch::x86&lt;/code>&lt;/a> &amp;amp; &lt;a href="https://doc.rust-lang.org/std/arch/x86_64/index.html">&lt;code>arch::x86_64&lt;/code>&lt;/a> modules which contain
SIMD intrinsics, a new macro called &lt;code>is_x86_feature_detected!&lt;/code>, the
&lt;code>#[target_feature(enable=&amp;quot;&amp;quot;)]&lt;/code> attribute, and adding &lt;code>target_feature = &amp;quot;&amp;quot;&lt;/code> to
the &lt;code>cfg&lt;/code> attribute.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49896/">A lot of methods for &lt;code>[u8]&lt;/code>, &lt;code>f32&lt;/code>, and &lt;code>f64&lt;/code> previously only available in
std are now available in core.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49630/">The generic &lt;code>Rhs&lt;/code> type parameter on &lt;code>ops::{Shl, ShlAssign, Shr}&lt;/code> now defaults
to &lt;code>Self&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50177/">&lt;code>std::str::replace&lt;/code> now has the &lt;code>#[must_use]&lt;/code> attribute&lt;/a> to clarify
that the operation isn&amp;rsquo;t done in place.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49533/">&lt;code>Clone::clone&lt;/code>, &lt;code>Iterator::collect&lt;/code>, and &lt;code>ToOwned::to_owned&lt;/code> now have
the &lt;code>#[must_use]&lt;/code> attribute&lt;/a> to warn about unused potentially
expensive allocations.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfind">&lt;code>DoubleEndedIterator::rfind&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfold">&lt;code>DoubleEndedIterator::rfold&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.try_rfold">&lt;code>DoubleEndedIterator::try_rfold&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_micros">&lt;code>Duration::from_micros&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_nanos">&lt;code>Duration::from_nanos&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros">&lt;code>Duration::subsec_micros&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis">&lt;code>Duration::subsec_millis&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.remove_entry">&lt;code>HashMap::remove_entry&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold">&lt;code>Iterator::try_fold&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_for_each">&lt;code>Iterator::try_for_each&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.cast">&lt;code>NonNull::cast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.filter">&lt;code>Option::filter&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range">&lt;code>String::replace_range&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Take.html#method.set_limit">&lt;code>Take::set_limit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/hint/fn.unreachable_unchecked.html">&lt;code>hint::unreachable_unchecked&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/process/fn.parent_id.html">&lt;code>os::unix::process::parent_id&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ptr/fn.swap_nonoverlapping.html">&lt;code>ptr::swap_nonoverlapping&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut">&lt;code>slice::rsplit_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit">&lt;code>slice::rsplit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice">&lt;code>slice::swap_with_slice&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5386/">&lt;code>cargo-metadata&lt;/code> now includes &lt;code>authors&lt;/code>, &lt;code>categories&lt;/code>, &lt;code>keywords&lt;/code>,
&lt;code>readme&lt;/code>, and &lt;code>repository&lt;/code> fields.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5360/">&lt;code>cargo-metadata&lt;/code> now includes a package&amp;rsquo;s &lt;code>metadata&lt;/code> table.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5393/">Added the &lt;code>--target-dir&lt;/code> optional argument.&lt;/a> This allows you to specify
a different directory than &lt;code>target&lt;/code> for placing compilation artifacts.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5335/">Cargo will be adding automatic target inference for binaries, benchmarks,
examples, and tests in the Rust 2018 edition.&lt;/a> If your project specifies
specific targets, e.g. using &lt;code>[[bin]]&lt;/code>, and have other binaries in locations
where cargo would infer a binary, Cargo will produce a warning. You can
disable this feature ahead of time by setting any of the following to false:
&lt;code>autobins&lt;/code>, &lt;code>autobenches&lt;/code>, &lt;code>autoexamples&lt;/code>, &lt;code>autotests&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5359/">Cargo will now cache compiler information.&lt;/a> This can be disabled by
setting &lt;code>CARGO_CACHE_RUSTC_INFO=0&lt;/code> in your environment.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49707/">Added “The Rustc book” into the official documentation.&lt;/a>
&lt;a href="https://doc.rust-lang.org/rustc">“The Rustc book”&lt;/a> documents and teaches how to use the rustc compiler.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49623/">All books available on &lt;code>doc.rust-lang.org&lt;/code> are now searchable.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49896/">Calling a &lt;code>CharExt&lt;/code> or &lt;code>StrExt&lt;/code> method directly on core will no longer
work.&lt;/a> e.g. &lt;code>::core::prelude::v1::StrExt::is_empty(&amp;quot;&amp;quot;)&lt;/code> will not
compile, &lt;code>&amp;quot;&amp;quot;.is_empty()&lt;/code> will still compile.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48553/">&lt;code>Debug&lt;/code> output on &lt;code>atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize}&lt;/code>
will only print the inner type.&lt;/a> E.g.
&lt;code>print!(&amp;quot;{:?}&amp;quot;, AtomicBool::new(true))&lt;/code> will print &lt;code>true&lt;/code>,
not &lt;code>AtomicBool(true)&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50378/">The maximum number for &lt;code>repr(align(N))&lt;/code> is now 2²⁹.&lt;/a> Previously you
could enter higher numbers but they were not supported by LLVM. Up to 512MB
alignment should cover all use cases.&lt;/li>
&lt;li>The &lt;code>.description()&lt;/code> method on the &lt;code>std::error::Error&lt;/code> trait
&lt;a href="https://github.com/rust-lang/rust/pull/50163">has been soft-deprecated&lt;/a>. It is no longer required to implement it.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.26.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.2/</guid><description>&lt;h1 id="1262">
 1.26.2
 &lt;a class="anchor" href="#1262">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>5 June, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/51117">The borrow checker was fixed to avoid unsoundness when using match ergonomics.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.26.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.1/</guid><description>&lt;h1 id="1261">
 1.26.1
 &lt;a class="anchor" href="#1261">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>29 May, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/50646">RLS now works on Windows.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang-nursery/rustfmt/issues/2695">Rustfmt stopped badly formatting text in some cases.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50656">&lt;code>fn main() -&amp;gt; impl Trait&lt;/code> no longer works for non-Termination
trait.&lt;/a>
This reverts an accidental stabilization.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/50812">&lt;code>NaN &amp;gt; NaN&lt;/code> no longer returns true in const-fn contexts.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/50950">Prohibit using turbofish for &lt;code>impl Trait&lt;/code> in method arguments.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.26.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.0/</guid><description>&lt;h1 id="1260">
 1.26.0
 &lt;a class="anchor" href="#1260">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 May, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>23 March, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49299">Closures now implement &lt;code>Copy&lt;/code> and/or &lt;code>Clone&lt;/code> if all captured variables
implement either or both traits.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47813">The inclusive range syntax e.g. &lt;code>for x in 0..=10&lt;/code> is now stable.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49458">The &lt;code>'_&lt;/code> lifetime is now stable. The underscore lifetime can be used anywhere a
lifetime can be elided.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49255">&lt;code>impl Trait&lt;/code> is now stable allowing you to have abstract types in returns
or in function parameters.&lt;/a> E.g. &lt;code>fn foo() -&amp;gt; impl Iterator&amp;lt;Item=u8&amp;gt;&lt;/code> or
&lt;code>fn open(path: impl AsRef&amp;lt;Path&amp;gt;)&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49394">Pattern matching will now automatically apply dereferences.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49101">128-bit integers in the form of &lt;code>u128&lt;/code> and &lt;code>i128&lt;/code> are now stable.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49162">&lt;code>main&lt;/code> can now return &lt;code>Result&amp;lt;(), E: Debug&amp;gt;&lt;/code>&lt;/a> in addition to &lt;code>()&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46882">A lot of operations are now available in a const context.&lt;/a> E.g. You
can now index into constant arrays, reference and dereference into constants,
and use tuple struct constructors.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48516">Fixed entry slice patterns are now stable.&lt;/a> E.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> points &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">match&lt;/span> points {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;All points were sequential.&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;Not all points were sequential.&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48125">LLD is now used as the default linker for &lt;code>wasm32-unknown-unknown&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48296">Fixed exponential projection complexity on nested types.&lt;/a>
This can provide up to a ~12% reduction in compile times for certain crates.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48359">Added the &lt;code>--remap-path-prefix&lt;/code> option to rustc.&lt;/a> Allowing you
to remap path prefixes outputted by the compiler.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48281">Added &lt;code>powerpc-unknown-netbsd&lt;/code> target.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49305">Implemented &lt;code>From&amp;lt;u16&amp;gt; for usize&lt;/code> &amp;amp; &lt;code>From&amp;lt;{u8, i16}&amp;gt; for isize&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48978">Added hexadecimal formatting for integers with fmt::Debug&lt;/a>
e.g. &lt;code>assert!(format!(&amp;quot;{:02x?}&amp;quot;, b&amp;quot;Foo\0&amp;quot;) == &amp;quot;[46, 6f, 6f, 00]&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48628">Implemented &lt;code>Default, Hash&lt;/code> for &lt;code>cmp::Reverse&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48657">Optimized &lt;code>str::repeat&lt;/code> being 8x faster in large cases.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48735">&lt;code>ascii::escape_default&lt;/code> is now available in libcore.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48056">Trailing commas are now supported in std and core macros.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47379">Implemented &lt;code>Copy, Clone&lt;/code> for &lt;code>cmp::Reverse&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48629">Implemented &lt;code>Clone&lt;/code> for &lt;code>char::{ToLowercase, ToUppercase}&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.add">&lt;code>*const T::add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping">&lt;code>*const T::copy_to_nonoverlapping&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to">&lt;code>*const T::copy_to&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned">&lt;code>*const T::read_unaligned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile">&lt;code>*const T::read_volatile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read">&lt;code>*const T::read&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.sub">&lt;code>*const T::sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add">&lt;code>*const T::wrapping_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub">&lt;code>*const T::wrapping_sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.add-1">&lt;code>*mut T::add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping-1">&lt;code>*mut T::copy_to_nonoverlapping&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to-1">&lt;code>*mut T::copy_to&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned-1">&lt;code>*mut T::read_unaligned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile-1">&lt;code>*mut T::read_volatile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read-1">&lt;code>*mut T::read&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.replace">&lt;code>*mut T::replace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.sub-1">&lt;code>*mut T::sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.swap">&lt;code>*mut T::swap&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add-1">&lt;code>*mut T::wrapping_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub-1">&lt;code>*mut T::wrapping_sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.write_bytes">&lt;code>*mut T::write_bytes&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.write_unaligned">&lt;code>*mut T::write_unaligned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile">&lt;code>*mut T::write_volatile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.write">&lt;code>*mut T::write&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak">&lt;code>Box::leak&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/string/struct.FromUtf8Error.html#method.as_bytes">&lt;code>FromUtf8Error::as_bytes&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/thread/struct.LocalKey.html#method.try_with">&lt;code>LocalKey::try_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned">&lt;code>Option::cloned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.and_modify">&lt;code>btree_map::Entry::and_modify&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/fs/fn.read_to_string.html">&lt;code>fs::read_to_string&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/fs/fn.read.html">&lt;code>fs::read&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/fs/fn.write.html">&lt;code>fs::write&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.and_modify">&lt;code>hash_map::Entry::and_modify&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.FusedIterator.html">&lt;code>iter::FusedIterator&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html">&lt;code>ops::RangeInclusive&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html">&lt;code>ops::RangeToInclusive&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/process/fn.id.html">&lt;code>process::id&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_left">&lt;code>slice::rotate_left&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_right">&lt;code>slice::rotate_right&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/string/struct.String.html#method.retain">&lt;code>String::retain&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5041">Cargo will now output path to custom commands when &lt;code>-v&lt;/code> is
passed with &lt;code>--list&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5083">The Cargo binary version is now the same as the Rust version&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48404">The second edition of &amp;ldquo;The Rust Programming Language&amp;rdquo; book is now recommended
over the first.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48481">aliasing a &lt;code>Fn&lt;/code> trait as &lt;code>dyn&lt;/code> no longer works.&lt;/a> E.g. the following
syntax is now invalid.
&lt;pre tabindex="0">&lt;code>use std::ops::Fn as dyn;
fn g(_: Box&amp;lt;dyn(std::fmt::Debug)&amp;gt;) {}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47408">The result of dereferences are no longer promoted to &lt;code>'static&lt;/code>.&lt;/a>
e.g.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">PAIR&lt;/span>: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>(&lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> _reversed_pair: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&amp;#39;static &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>(&lt;span style="color:#66d9ef">PAIR&lt;/span>.&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">PAIR&lt;/span>.&lt;span style="color:#ae81ff">0&lt;/span>); &lt;span style="color:#75715e">// Doesn&amp;#39;t work
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/49109">Deprecate &lt;code>AsciiExt&lt;/code> trait in favor of inherent methods.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48235">&lt;code>&amp;quot;.e0&amp;quot;&lt;/code> will now no longer parse as &lt;code>0.0&lt;/code> and will instead cause
an error.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48274">Removed hoedown from rustdoc.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/48326">Bounds on higher-kinded lifetimes a hard error.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.25.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.25.0/</guid><description>&lt;h1 id="1250">
 1.25.0
 &lt;a class="anchor" href="#1250">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>29 March, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>9 February, 2018&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47006">The &lt;code>#[repr(align(x))]&lt;/code> attribute is now stable.&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1358">RFC 1358&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47948">You can now use nested groups of imports.&lt;/a>
e.g. &lt;code>use std::{fs::File, io::Read, path::{Path, PathBuf}};&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47947">You can now have &lt;code>|&lt;/code> at the start of a match arm.&lt;/a> e.g.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> { A, B, C }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> Foo::A;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> x {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> Foo::A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> Foo::B &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;AB&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&lt;/span> Foo::C &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47828">Upgraded to LLVM 6.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47521">Added &lt;code>-C lto=val&lt;/code> option.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47282">Added &lt;code>i586-unknown-linux-musl&lt;/code> target&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47760">Impl Send for &lt;code>process::Command&lt;/code> on Unix.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47790">Impl PartialEq and Eq for &lt;code>ParseCharError&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47204">&lt;code>UnsafeCell::into_inner&lt;/code> is now safe.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47268">Implement libstd for CloudABI.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46931">&lt;code>Float::{from_bits, to_bits}&lt;/code> is now available in libcore.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46985">Implement &lt;code>AsRef&amp;lt;Path&amp;gt;&lt;/code> for Component&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46830">Implemented &lt;code>Write&lt;/code> for &lt;code>Cursor&amp;lt;&amp;amp;mut Vec&amp;lt;u8&amp;gt;&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46666">Moved &lt;code>Duration&lt;/code> to libcore.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/panic/struct.Location.html#method.column">&lt;code>Location::column&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ptr/struct.NonNull.html">&lt;code>ptr::NonNull&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The following functions can now be used in a constant expression.
eg. &lt;code>static MINUTE: Duration = Duration::from_secs(60);&lt;/code>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.24.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.24.1/</guid><description>&lt;h1 id="1241">
 1.24.1
 &lt;a class="anchor" href="#1241">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>1 March, 2018&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/48251">Do not abort when unwinding through FFI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/48318">Emit UTF-16 files for linker arguments on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/48308">Make the error index generator work again&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/5069">Cargo will warn on Windows 7 if an update is needed&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.24.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.24.0/</guid><description>&lt;h1 id="1240">
 1.24.0
 &lt;a class="anchor" href="#1240">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>15 February, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>29 December, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46528">External &lt;code>sysv64&lt;/code> ffi is now available.&lt;/a>
eg. &lt;code>extern &amp;quot;sysv64&amp;quot; fn foo () {}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46910">rustc now uses 16 codegen units by default for release builds.&lt;/a>
For the fastest builds, utilize &lt;code>codegen-units=1&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47018">Added &lt;code>armv4t-unknown-linux-gnueabi&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46760">Add &lt;code>aarch64-unknown-openbsd&lt;/code> support&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46735">&lt;code>str::find::&amp;lt;char&amp;gt;&lt;/code> now uses memchr.&lt;/a> This should lead to a 10x
improvement in performance in the majority of cases.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46798">&lt;code>OsStr&lt;/code>&amp;rsquo;s &lt;code>Debug&lt;/code> implementation is now lossless and consistent
with Windows.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46828">&lt;code>time::{SystemTime, Instant}&lt;/code> now implement &lt;code>Hash&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46293">impl &lt;code>From&amp;lt;bool&amp;gt;&lt;/code> for &lt;code>AtomicBool&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45990">impl &lt;code>From&amp;lt;{CString, &amp;amp;CStr}&amp;gt;&lt;/code> for &lt;code>{Arc&amp;lt;CStr&amp;gt;, Rc&amp;lt;CStr&amp;gt;}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45990">impl &lt;code>From&amp;lt;{OsString, &amp;amp;OsStr}&amp;gt;&lt;/code> for &lt;code>{Arc&amp;lt;OsStr&amp;gt;, Rc&amp;lt;OsStr&amp;gt;}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45990">impl &lt;code>From&amp;lt;{PathBuf, &amp;amp;Path}&amp;gt;&lt;/code> for &lt;code>{Arc&amp;lt;Path&amp;gt;, Rc&amp;lt;Path&amp;gt;}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46012">float::from_bits now just uses transmute.&lt;/a> This provides
some optimisations from LLVM.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46077">Copied &lt;code>AsciiExt&lt;/code> methods onto &lt;code>char&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46094">Remove &lt;code>T: Sized&lt;/code> requirement on &lt;code>ptr::is_null()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45506">impl &lt;code>From&amp;lt;RecvError&amp;gt;&lt;/code> for &lt;code>{TryRecvError, RecvTimeoutError}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/47080">Optimised &lt;code>f32::{min, max}&lt;/code> to generate more efficient x86 assembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46713">&lt;code>[u8]::contains&lt;/code> now uses memchr which provides a 3x speed improvement&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.replace">&lt;code>RefCell::replace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.swap">&lt;code>RefCell::swap&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/fn.spin_loop_hint.html">&lt;code>atomic::spin_loop_hint&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The following functions can now be used in a constant expression.
eg. &lt;code>let buffer: [u8; size_of::&amp;lt;usize&amp;gt;()];&lt;/code>, &lt;code>static COUNTER: AtomicUsize = AtomicUsize::new(1);&lt;/code>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.23.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.23.0/</guid><description>&lt;h1 id="1230">
 1.23.0
 &lt;a class="anchor" href="#1230">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>4 January, 2018&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>17 November, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45772">Arbitrary &lt;code>auto&lt;/code> traits are now permitted in trait objects.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45435">rustc now uses subtyping on the left hand side of binary operations.&lt;/a>
Which should fix some confusing errors in some operations.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45920">Enabled &lt;code>TrapUnreachable&lt;/code> in LLVM which should mitigate the impact of
undefined behavior.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45660">rustc now suggests renaming import if names clash.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45711">Display errors/warnings correctly when there are zero-width or
wide characters.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45380">rustc now avoids unnecessary copies of arguments that are
simple bindings&lt;/a> This should improve memory usage on average by 5-10%.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45393">Updated musl used to build musl rustc to 1.1.17&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45887">Allow a trailing comma in &lt;code>assert_eq/ne&lt;/code> macro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45483">Implement Hash for raw pointers to unsized types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45610">impl &lt;code>From&amp;lt;*mut T&amp;gt;&lt;/code> for &lt;code>AtomicPtr&amp;lt;T&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45610">impl &lt;code>From&amp;lt;usize/isize&amp;gt;&lt;/code> for &lt;code>AtomicUsize/AtomicIsize&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45267">Removed the &lt;code>T: Sync&lt;/code> requirement for &lt;code>RwLock&amp;lt;T&amp;gt;: Send&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44932">Removed &lt;code>T: Sized&lt;/code> requirement for &lt;code>{&amp;lt;*const T&amp;gt;, &amp;lt;*mut T&amp;gt;}::as_ref&lt;/code>
and &lt;code>&amp;lt;*mut T&amp;gt;::as_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45524">Optimized &lt;code>Thread::{park, unpark}&lt;/code> implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45333">Improved &lt;code>SliceExt::binary_search&lt;/code> performance.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45379">impl &lt;code>FromIterator&amp;lt;()&amp;gt;&lt;/code> for &lt;code>()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44042">Copied &lt;code>AsciiExt&lt;/code> trait methods to primitive types.&lt;/a> Use of &lt;code>AsciiExt&lt;/code>
is now deprecated.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4561">Cargo now supports uninstallation of multiple packages&lt;/a>
eg. &lt;code>cargo uninstall foo bar&lt;/code> uninstalls &lt;code>foo&lt;/code> and &lt;code>bar&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4592">Added unit test checking to &lt;code>cargo check&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4637">Cargo now lets you install a specific version
using &lt;code>cargo install --version&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45692">Releases now ship with the Cargo book documentation.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45324">rustdoc now prints rendering warnings on every run.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45853">Changes have been made to type equality to make it more correct,
in rare cases this could break some code.&lt;/a> &lt;a href="https://github.com/rust-lang/rust/issues/45852">Tracking issue for
further information&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45571">&lt;code>char::escape_debug&lt;/code> now uses Unicode 10 over 9.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45580">Upgraded Android SDK to 27, and NDK to r15c.&lt;/a> This drops support for
Android 9, the minimum supported version is Android 14.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45326">Bumped the minimum LLVM to 3.9&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.22.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.22.1/</guid><description>&lt;h1 id="1221">
 1.22.1
 &lt;a class="anchor" href="#1221">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>22 November, 2017&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="changes">
 Changes
 &lt;a class="anchor" href="#changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/46183">Update Cargo to fix an issue with macOS 10.13 &amp;ldquo;High Sierra&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.22.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.22.0/</guid><description>&lt;h1 id="1220">
 1.22.0
 &lt;a class="anchor" href="#1220">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>22 November, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>6 October, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44966">&lt;code>non_snake_case&lt;/code> lint now allows extern no-mangle functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43716">Now accepts underscores in unicode escapes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44287">&lt;code>T op= &amp;amp;T&lt;/code> now works for numeric types.&lt;/a> eg. &lt;code>let mut x = 2; x += &amp;amp;8;&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44456">types that impl &lt;code>Drop&lt;/code> are now allowed in &lt;code>const&lt;/code> and &lt;code>static&lt;/code> types&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45064">rustc now defaults to having 16 codegen units at debug on supported platforms.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45075">rustc will no longer inline in codegen units when compiling for debug&lt;/a>
This should decrease compile times for debug builds.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45094">strict memory alignment now enabled on ARMv6&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45041">Remove support for the PNaCl target &lt;code>le32-unknown-nacl&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44978">Allow atomic operations up to 32 bits
on &lt;code>armv5te_unknown_linux_gnueabi&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44466">&lt;code>Box&amp;lt;Error&amp;gt;&lt;/code> now impls &lt;code>From&amp;lt;Cow&amp;lt;str&amp;gt;&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45095">&lt;code>std::mem::Discriminant&lt;/code> is now guaranteed to be &lt;code>Send + Sync&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44895">&lt;code>fs::copy&lt;/code> now returns the length of the main stream on NTFS.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44220">Properly detect overflow in &lt;code>Instant += Duration&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44015">impl &lt;code>Hasher&lt;/code> for &lt;code>{&amp;amp;mut Hasher, Box&amp;lt;Hasher&amp;gt;}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44303">impl &lt;code>fmt::Debug&lt;/code> for &lt;code>SplitWhitespace&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42526">&lt;code>Option&amp;lt;T&amp;gt;&lt;/code> now impls &lt;code>Try&lt;/code>&lt;/a> This allows for using &lt;code>?&lt;/code> with &lt;code>Option&lt;/code> types.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4496">Cargo will now build multi file examples in subdirectories of the &lt;code>examples&lt;/code>
folder that have a &lt;code>main.rs&lt;/code> file.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4571">Changed &lt;code>[root]&lt;/code> to &lt;code>[package]&lt;/code> in &lt;code>Cargo.lock&lt;/code>&lt;/a> Packages with
the old format will continue to work and can be updated with &lt;code>cargo update&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3992">Now supports vendoring git repositories&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/44251">&lt;code>libbacktrace&lt;/code> is now available on Apple platforms.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43949">Stabilised the &lt;code>compile_fail&lt;/code> attribute for code fences in doc-comments.&lt;/a>
This now lets you specify that a given code example will fail to compile.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/45656">The minimum Android version that rustc can build for has been bumped
to &lt;code>4.0&lt;/code> from &lt;code>2.3&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/45480">Allowing &lt;code>T op= &amp;amp;T&lt;/code> for numeric types has broken some type
inference cases&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.21.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.21.0/</guid><description>&lt;h1 id="1210">
 1.21.0
 &lt;a class="anchor" href="#1210">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>12 October, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>25 August, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43838">You can now use static references for literals.&lt;/a>
Example:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> x: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&amp;#39;static &lt;span style="color:#66d9ef">u32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43540">Relaxed path syntax. Optional &lt;code>::&lt;/code> before &lt;code>&amp;lt;&lt;/code> is now allowed in all contexts.&lt;/a>
Example:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>my_macro!(Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>::new); &lt;span style="color:#75715e">// Always worked
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>my_macro!(Vec::&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>::new); &lt;span style="color:#75715e">// Now works
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43911">Upgraded jemalloc to 4.5.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43917">Enabled unwinding panics on Redox&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43506">Now runs LLVM in parallel during translation phase.&lt;/a>
This should reduce peak memory usage.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43690">Generate builtin impls for &lt;code>Clone&lt;/code> for all arrays and tuples that
are &lt;code>T: Clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43459">&lt;code>Stdin&lt;/code>, &lt;code>Stdout&lt;/code>, and &lt;code>Stderr&lt;/code> now implement &lt;code>AsRawFd&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42565">&lt;code>Rc&lt;/code> and &lt;code>Arc&lt;/code> now implement &lt;code>From&amp;lt;&amp;amp;[T]&amp;gt; where T: Clone&lt;/code>, &lt;code>From&amp;lt;str&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;String&amp;gt;&lt;/code>, &lt;code>From&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt; where T: ?Sized&lt;/code>, and &lt;code>From&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code>.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://doc.rust-lang.org/std/mem/fn.discriminant.html">&lt;code>std::mem::discriminant&lt;/code>&lt;/a>&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.20.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.20.0/</guid><description>&lt;h1 id="1200">
 1.20.0
 &lt;a class="anchor" href="#1200">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>31 August, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>14 July, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42809">Associated constants are now stabilised.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42913">A lot of macro bugs are now fixed.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42807">Struct fields are now properly coerced to the expected field type.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42571">Enabled wasm LLVM backend&lt;/a> WASM can now be built with the
&lt;code>wasm32-experimental-emscripten&lt;/code> target.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42033">Changed some of the error messages to be more helpful.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43170">Add support for RELRO(RELocation Read-Only) for platforms that support
it.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43015">rustc now reports the total number of errors on compilation failure&lt;/a>
previously this was only the number of errors in the pass that failed.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42533">Expansion in rustc has been sped up 29x.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43099">added &lt;code>msp430-none-elf&lt;/code> target.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43178">rustc will now suggest one-argument enum variant to fix type mismatch when
applicable&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43228">Fixes backtraces on Redox&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42826">rustc now identifies different versions of same crate when absolute paths of
different types match in an error message.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42854">Relaxed Debug constraints on &lt;code>{HashMap,BTreeMap}::{Keys,Values}&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43011">Impl &lt;code>PartialEq&lt;/code>, &lt;code>Eq&lt;/code>, &lt;code>PartialOrd&lt;/code>, &lt;code>Ord&lt;/code>, &lt;code>Debug&lt;/code>, &lt;code>Hash&lt;/code> for unsized
tuples.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42822">Impl &lt;code>fmt::{Display, Debug}&lt;/code> for &lt;code>Ref&lt;/code>, &lt;code>RefMut&lt;/code>, &lt;code>MutexGuard&lt;/code>,
&lt;code>RwLockReadGuard&lt;/code>, &lt;code>RwLockWriteGuard&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42799">Impl &lt;code>Clone&lt;/code> for &lt;code>DefaultHasher&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42397">Impl &lt;code>Sync&lt;/code> for &lt;code>SyncSender&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42271">Impl &lt;code>FromStr&lt;/code> for &lt;code>char&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42431">Fixed how &lt;code>{f32, f64}::{is_sign_negative, is_sign_positive}&lt;/code> handles
NaN.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42155">allow messages in the &lt;code>unimplemented!()&lt;/code> macro.&lt;/a>
ie. &lt;code>unimplemented!(&amp;quot;Waiting for 1.21 to be stable&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43185">&lt;code>pub(restricted)&lt;/code> is now supported in the &lt;code>thread_local!&lt;/code> macro.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42999">Upgrade to Unicode 10.0.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42430">Reimplemented &lt;code>{f32, f64}::{min, max}&lt;/code> in Rust instead of using CMath.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43072">Skip the main thread&amp;rsquo;s manual stack guard on Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43077">Iterator::nth for &lt;code>ops::{Range, RangeFrom}&lt;/code> is now done in &lt;em>O&lt;/em>(1) time&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/43097">&lt;code>#[repr(align(N))]&lt;/code> attribute max number is now 2^31 - 1.&lt;/a> This was
previously 2^15.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42613">&lt;code>{OsStr, Path}::Display&lt;/code> now avoids allocations where possible&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.into_c_string">&lt;code>CStr::into_c_string&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_c_str">&lt;code>CString::as_c_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_boxed_c_str">&lt;code>CString::into_boxed_c_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Chain.html#method.get_mut">&lt;code>Chain::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Chain.html#method.get_ref">&lt;code>Chain::get_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Chain.html#method.into_inner">&lt;code>Chain::into_inner&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert_with">&lt;code>Option::get_or_insert_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert">&lt;code>Option::get_or_insert&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.into_os_string">&lt;code>OsStr::into_os_string&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.into_boxed_os_str">&lt;code>OsString::into_boxed_os_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Take.html#method.get_mut">&lt;code>Take::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Take.html#method.get_ref">&lt;code>Take::get_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/str/struct.Utf8Error.html#method.error_len">&lt;code>Utf8Error::error_len&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/char/struct.EscapeDebug.html">&lt;code>char::EscapeDebug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.char.html#method.escape_debug">&lt;code>char::escape_debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/macro.compile_error.html">&lt;code>compile_error!&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f32.html#method.from_bits">&lt;code>f32::from_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f32.html#method.to_bits">&lt;code>f32::to_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f64.html#method.from_bits">&lt;code>f64::from_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f64.html#method.to_bits">&lt;code>f64::to_bits&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/mem/union.ManuallyDrop.html">&lt;code>mem::ManuallyDrop&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by_key">&lt;code>slice::sort_unstable_by_key&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by">&lt;code>slice::sort_unstable_by&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable">&lt;code>slice::sort_unstable&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/str/fn.from_boxed_utf8_unchecked.html">&lt;code>str::from_boxed_utf8_unchecked&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut">&lt;code>str::as_bytes_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut">&lt;code>str::as_bytes_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/str/fn.from_utf8_mut.html">&lt;code>str::from_utf8_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked_mut.html">&lt;code>str::from_utf8_unchecked_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.get_mut">&lt;code>str::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.get_unchecked_mut">&lt;code>str::get_unchecked_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.get_unchecked">&lt;code>str::get_unchecked&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.get">&lt;code>str::get&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.into_boxed_bytes">&lt;code>str::into_boxed_bytes&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3978">Cargo API token location moved from &lt;code>~/.cargo/config&lt;/code> to
&lt;code>~/.cargo/credentials&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4214">Cargo will now build &lt;code>main.rs&lt;/code> binaries that are in sub-directories of
&lt;code>src/bin&lt;/code>.&lt;/a> ie. Having &lt;code>src/bin/server/main.rs&lt;/code> and
&lt;code>src/bin/client/main.rs&lt;/code> generates &lt;code>target/debug/server&lt;/code> and &lt;code>target/debug/client&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4229">You can now specify version of a binary when installed through
&lt;code>cargo install&lt;/code> using &lt;code>--vers&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4248">Added &lt;code>--no-fail-fast&lt;/code> flag to cargo to run all benchmarks regardless of
failure.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4259">Changed the convention around which file is the crate root.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42417">Functions with &lt;code>'static&lt;/code> in their return types will now not be as usable as
if they were using lifetime parameters instead.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42430">The reimplementation of &lt;code>{f32, f64}::is_sign_{negative, positive}&lt;/code> now
takes the sign of NaN into account where previously didn&amp;rsquo;t.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.19.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.19.0/</guid><description>&lt;h1 id="1190">
 1.19.0
 &lt;a class="anchor" href="#1190">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 July, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>2 June, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41145">Numeric fields can now be used for creating tuple structs.&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1506">RFC 1506&lt;/a>
For example &lt;code>struct Point(u32, u32); let x = Point { 0: 7, 1: 0 };&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41676">Macro recursion limit increased to 1024 from 64.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41907">Added lint for detecting unused macros.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42016">&lt;code>loop&lt;/code> can now return a value with &lt;code>break&lt;/code>.&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1624">RFC 1624&lt;/a>
For example: &lt;code>let x = loop { break 7; };&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42068">C compatible &lt;code>union&lt;/code>s are now available.&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1444">RFC 1444&lt;/a> They can only
contain &lt;code>Copy&lt;/code> types and cannot have a &lt;code>Drop&lt;/code> implementation.
Example: &lt;code>union Foo { bar: u8, baz: usize }&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42162">Non capturing closures can now be coerced into &lt;code>fn&lt;/code>s,&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1558">RFC 1558&lt;/a>
Example: &lt;code>let foo: fn(u8) -&amp;gt; u8 = |v: u8| { v };&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41370">Add support for bootstrapping the Rust compiler toolchain on Android.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41656">Change &lt;code>arm-linux-androideabi&lt;/code> to correspond to the &lt;code>armeabi&lt;/code>
official ABI.&lt;/a> If you wish to continue targeting the &lt;code>armeabi-v7a&lt;/code> ABI
you should use &lt;code>--target armv7-linux-androideabi&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41873">Fixed ICE when removing a source file between compilation sessions.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42037">Minor optimisation of string operations.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42150">Compiler error message is now &lt;code>aborting due to previous error(s)&lt;/code> instead of
&lt;code>aborting due to N previous errors&lt;/code>&lt;/a> This was previously inaccurate and
would only count certain kinds of errors.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42225">The compiler now supports Visual Studio 2017&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42948">The compiler is now built against LLVM 4.0.1 by default&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42264">Added a lot&lt;/a> of &lt;a href="https://github.com/rust-lang/rust/pull/42302">new error codes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/37406">Added &lt;code>target-feature=+crt-static&lt;/code> option&lt;/a> &lt;a href="https://github.com/rust-lang/rfcs/pull/1721">RFC 1721&lt;/a> Which allows
libraries with C Run-time Libraries(CRT) to be statically linked.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/42740">Fixed various ARM codegen bugs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41449">&lt;code>String&lt;/code> now implements &lt;code>FromIterator&amp;lt;Cow&amp;lt;'a, str&amp;gt;&amp;gt;&lt;/code> and
&lt;code>Extend&amp;lt;Cow&amp;lt;'a, str&amp;gt;&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41530">&lt;code>Vec&lt;/code> now implements &lt;code>From&amp;lt;&amp;amp;mut [T]&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41258">&lt;code>Box&amp;lt;[u8]&amp;gt;&lt;/code> now implements &lt;code>From&amp;lt;Box&amp;lt;str&amp;gt;&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41659">&lt;code>SplitWhitespace&lt;/code> now implements &lt;code>Clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41764">&lt;code>[u8]::reverse&lt;/code> is now 5x faster and &lt;code>[u16]::reverse&lt;/code> is now
1.5x faster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41192">&lt;code>eprint!&lt;/code> and &lt;code>eprintln!&lt;/code> macros added to prelude.&lt;/a> Same as the &lt;code>print!&lt;/code>
macros, but for printing to stderr.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.shrink_to_fit">&lt;code>OsString::shrink_to_fit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cmp/struct.Reverse.html">&lt;code>cmp::Reverse&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/process/struct.Command.html#method.envs">&lt;code>Command::envs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/thread/struct.ThreadId.html">&lt;code>thread::ThreadId&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3929">Build scripts can now add environment variables to the environment
the crate is being compiled in.
Example: &lt;code>println!(&amp;quot;cargo:rustc-env=FOO=bar&amp;quot;);&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3970">Subcommands now replace the current process rather than spawning a new
child process&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3979">Workspace members can now accept glob file patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3988">Added &lt;code>--all&lt;/code> flag to the &lt;code>cargo bench&lt;/code> subcommand to run benchmarks of all
the members in a given workspace.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4008">Updated &lt;code>libssh2-sys&lt;/code> to 0.2.6&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4022">Target directory path is now in the cargo metadata&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4026">Cargo no longer checks out a local working directory for the
crates.io index&lt;/a> This should provide smaller file size for the
registry, and improve cloning times, especially on Windows machines.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4031">Added an &lt;code>--exclude&lt;/code> option for excluding certain packages when using the
&lt;code>--all&lt;/code> option&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4032">Cargo will now automatically retry when receiving a 5xx error
from crates.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/4084">The &lt;code>--features&lt;/code> option now accepts multiple comma or space
delimited values.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3954">Added support for custom target specific runners&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39983">Added &lt;code>rust-windbg.cmd&lt;/code>&lt;/a> for loading rust &lt;code>.natvis&lt;/code> files in the
Windows Debugger.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust-installer/pull/57">Rust will now release XZ compressed packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang-nursery/rustup.rs/pull/1100">rustup will now prefer to download rust packages with
XZ compression&lt;/a> over GZip packages.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41785">Added the ability to escape &lt;code>#&lt;/code> in rust documentation&lt;/a> By adding
additional &lt;code>#&lt;/code>&amp;rsquo;s ie. &lt;code>##&lt;/code> is now &lt;code>#&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41624">&lt;code>MutexGuard&amp;lt;T&amp;gt;&lt;/code> may only be &lt;code>Sync&lt;/code> if &lt;code>T&lt;/code> is &lt;code>Sync&lt;/code>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41751">&lt;code>-Z&lt;/code> flags are now no longer allowed to be used on the stable
compiler.&lt;/a> This has been a warning for a year previous to this.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/42844">As a result of the &lt;code>-Z&lt;/code> flag change, the &lt;code>cargo-check&lt;/code> plugin no
longer works&lt;/a>. Users should migrate to the built-in &lt;code>check&lt;/code>
command, which has been available since 1.16.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41946">Ending a float literal with &lt;code>._&lt;/code> is now a hard error.
Example: &lt;code>42._&lt;/code> .&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36886">Any use of a private &lt;code>extern crate&lt;/code> outside of its module is now a
hard error.&lt;/a> This was previously a warning.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36888">&lt;code>use ::self::foo;&lt;/code> is now a hard error.&lt;/a> &lt;code>self&lt;/code> paths are always
relative while the &lt;code>::&lt;/code> prefix makes a path absolute, but was ignored and the
path was relative regardless.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36890">Floating point constants in match patterns is now a hard error&lt;/a>
This was previously a warning.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36891">Struct or enum constants that don&amp;rsquo;t derive &lt;code>PartialEq&lt;/code> &amp;amp; &lt;code>Eq&lt;/code> used
match patterns is now a hard error&lt;/a> This was previously a warning.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36892">Lifetimes named &lt;code>'_&lt;/code> are no longer allowed.&lt;/a> This was previously
a warning.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41785">From the pound escape, lines consisting of multiple &lt;code>#&lt;/code>s are
now visible&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/42460">It is an error to re-export private enum variants&lt;/a>. This is
known to break a number of crates that depend on an older version of
mustache.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/42607">On Windows, if &lt;code>VCINSTALLDIR&lt;/code> is set incorrectly, &lt;code>rustc&lt;/code> will try
to use it to find the linker, and the build will fail where it did
not previously&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.18.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.18.0/</guid><description>&lt;h1 id="1180">
 1.18.0
 &lt;a class="anchor" href="#1180">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>8 June, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>21 April, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40556">Stabilize pub(restricted)&lt;/a> &lt;code>pub&lt;/code> can now accept a module path to
make the item visible to just that module tree. Also accepts the keyword
&lt;code>crate&lt;/code> to make something public to the whole crate but not users of the
library. Example: &lt;code>pub(crate) mod utils;&lt;/code>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md">RFC 1422&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40870">Stabilize &lt;code>#![windows_subsystem]&lt;/code> attribute&lt;/a> conservative exposure of the
&lt;code>/SUBSYSTEM&lt;/code> linker flag on Windows platforms. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1665-windows-subsystem.md">RFC 1665&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40043">Refactor of trait object type parsing&lt;/a> Now &lt;code>ty&lt;/code> in macros can accept
types like &lt;code>Write + Send&lt;/code>, trailing &lt;code>+&lt;/code> are now supported in trait objects,
and better error reporting for trait objects starting with &lt;code>?Sized&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40589">0e+10 is now a valid floating point literal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40734">Now warns if you bind a lifetime parameter to &amp;lsquo;static&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40377">Tuples, Enum variant fields, and structs with no &lt;code>repr&lt;/code> attribute or with
&lt;code>#[repr(Rust)]&lt;/code> are reordered to minimize padding and produce a smaller
representation in some cases.&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39891">rustc can now emit mir with &lt;code>--emit mir&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40367">Improved LLVM IR for trivial functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40723">Added explanation for E0090(Wrong number of lifetimes are supplied)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41469">rustc compilation is now 15%-20% faster&lt;/a> Thanks to optimisation
opportunities found through profiling&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38165">Improved backtrace formatting when panicking&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40731">Specialized &lt;code>Vec::from_iter&lt;/code> being passed &lt;code>vec::IntoIter&lt;/code>&lt;/a> if the
iterator hasn&amp;rsquo;t been advanced the original &lt;code>Vec&lt;/code> is reassembled with no actual
iteration or reallocation.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40561">Simplified HashMap Bucket interface&lt;/a> provides performance
improvements for iterating and cloning.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40409">Specialize Vec::from_elem to use calloc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39799">Fixed Race condition in fs::create_dir_all&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40516">No longer caching stdio on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40807">Optimized insertion sort in slice&lt;/a> insertion sort in some cases
2.50%~ faster and in one case now 12.50% faster.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41143">Optimized &lt;code>AtomicBool::fetch_nand&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait">&lt;code>Child::try_wait&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.retain">&lt;code>HashMap::retain&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.retain">&lt;code>HashSet::retain&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html#method.pop">&lt;code>PeekMut::pop&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.peek">&lt;code>TcpStream::peek&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peek">&lt;code>UdpSocket::peek&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peek_from">&lt;code>UdpSocket::peek_from&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3842">Added partial Pijul support&lt;/a> Pijul is a version control system in Rust.
You can now create new cargo projects with Pijul using &lt;code>cargo new --vcs pijul&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3847">Now always emits build script warnings for crates that fail to build&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3885">Added Android build support&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3901">Added &lt;code>--bins&lt;/code> and &lt;code>--tests&lt;/code> flags&lt;/a> now you can build all programs
of a certain type, for example &lt;code>cargo build --bins&lt;/code> will build all
binaries.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3952">Added support for haiku&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40338">rustdoc can now use pulldown-cmark with the &lt;code>--enable-commonmark&lt;/code> flag&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40612">Rust now uses the official cross compiler for NetBSD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40828">rustdoc now accepts &lt;code>#&lt;/code> at the start of files&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/41168">Fixed jemalloc support for musl&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/rust-lang/rust/pull/40241">Changes to how the &lt;code>0&lt;/code> flag works in format!&lt;/a> Padding zeroes are now
always placed after the sign if it exists and before the digits. With the &lt;code>#&lt;/code>
flag the zeroes are placed after the prefix and before the digits.&lt;/p></description></item><item><title/><link>https://releases.rs/docs/1.17.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.17.0/</guid><description>&lt;h1 id="1170">
 1.17.0
 &lt;a class="anchor" href="#1170">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>27 April, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>10 March, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39265">The lifetime of statics and consts defaults to &lt;code>'static&lt;/code>&lt;/a>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md">RFC 1623&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39761">Fields of structs may be initialized without duplicating the field/variable
names&lt;/a>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md">RFC 1682&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/38864">&lt;code>Self&lt;/code> may be included in the &lt;code>where&lt;/code> clause of &lt;code>impls&lt;/code>&lt;/a>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md">RFC 1647&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40319">When coercing to an unsized type lifetimes must be equal&lt;/a>. That is,
there is no subtyping between &lt;code>T&lt;/code> and &lt;code>U&lt;/code> when &lt;code>T: Unsize&amp;lt;U&amp;gt;&lt;/code>. For example,
coercing &lt;code>&amp;amp;mut [&amp;amp;'a X; N]&lt;/code> to &lt;code>&amp;amp;mut [&amp;amp;'b X]&lt;/code> requires &lt;code>'a&lt;/code> be equal to
&lt;code>'b&lt;/code>. Soundness fix.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40166">Values passed to the indexing operator, &lt;code>[]&lt;/code>, automatically coerce&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40027">Static variables may contain references to other statics&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40336">Exit quickly on only &lt;code>--emit dep-info&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40245">Make &lt;code>-C relocation-model&lt;/code> more correctly determine whether the linker
creates a position-independent executable&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40037">Add &lt;code>-C overflow-checks&lt;/code> to directly control whether integer overflow
panics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40008">The rustc type checker now checks items on demand instead of in a single
in-order pass&lt;/a>. This is mostly an internal refactoring in support of
future work, including incremental type checking, but also resolves &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md">RFC
1647&lt;/a>, allowing &lt;code>Self&lt;/code> to appear in &lt;code>impl&lt;/code> &lt;code>where&lt;/code> clauses.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39995">Optimize vtable loads&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39990">Turn off vectorization for Emscripten targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39953">Provide suggestions for unknown macros imported with &lt;code>use&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39939">Fix ICEs in path resolution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39193">Strip exception handling code on Emscripten when &lt;code>panic=abort&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39116">Add clearer error message using &lt;code>&amp;amp;str + &amp;amp;str&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.into_raw">&lt;code>Arc::into_raw&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.from_raw">&lt;code>Arc::from_raw&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.ptr_eq">&lt;code>Arc::ptr_eq&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.into_raw">&lt;code>Rc::into_raw&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.from_raw">&lt;code>Rc::from_raw&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.ptr_eq">&lt;code>Rc::ptr_eq&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then">&lt;code>Ordering::then&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then_with">&lt;code>Ordering::then_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range">&lt;code>BTreeMap::range&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range_mut">&lt;code>BTreeMap::range_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/enum.Bound.html">&lt;code>collections::Bound&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/process/fn.abort.html">&lt;code>process::abort&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ptr/fn.read_unaligned.html">&lt;code>ptr::read_unaligned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html">&lt;code>ptr::write_unaligned&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err">&lt;code>Result::expect_err&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.swap">&lt;code>Cell::swap&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.replace">&lt;code>Cell::replace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.into_inner">&lt;code>Cell::into_inner&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.take">&lt;code>Cell::take&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/27787">&lt;code>BTreeMap&lt;/code> and &lt;code>BTreeSet&lt;/code> can iterate over ranges&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39793">&lt;code>Cell&lt;/code> can store non-&lt;code>Copy&lt;/code> types&lt;/a>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1651-movecell.md">RFC 1651&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40028">&lt;code>String&lt;/code> implements &lt;code>FromIterator&amp;lt;&amp;amp;char&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>Box&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/40009">implements&lt;/a> a number of new conversions:
&lt;code>From&amp;lt;Box&amp;lt;str&amp;gt;&amp;gt; for String&lt;/code>,
&lt;code>From&amp;lt;Box&amp;lt;[T]&amp;gt;&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;Box&amp;lt;CStr&amp;gt;&amp;gt; for CString&lt;/code>,
&lt;code>From&amp;lt;Box&amp;lt;OsStr&amp;gt;&amp;gt; for OsString&lt;/code>,
&lt;code>From&amp;lt;Box&amp;lt;Path&amp;gt;&amp;gt; for PathBuf&lt;/code>,
&lt;code>Into&amp;lt;Box&amp;lt;str&amp;gt;&amp;gt; for String&lt;/code>,
&lt;code>Into&amp;lt;Box&amp;lt;[T]&amp;gt;&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code>,
&lt;code>Into&amp;lt;Box&amp;lt;CStr&amp;gt;&amp;gt; for CString&lt;/code>,
&lt;code>Into&amp;lt;Box&amp;lt;OsStr&amp;gt;&amp;gt; for OsString&lt;/code>,
&lt;code>Into&amp;lt;Box&amp;lt;Path&amp;gt;&amp;gt; for PathBuf&lt;/code>,
&lt;code>Default for Box&amp;lt;str&amp;gt;&lt;/code>,
&lt;code>Default for Box&amp;lt;CStr&amp;gt;&lt;/code>,
&lt;code>Default for Box&amp;lt;OsStr&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;&amp;amp;CStr&amp;gt; for Box&amp;lt;CStr&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;&amp;amp;OsStr&amp;gt; for Box&amp;lt;OsStr&amp;gt;&lt;/code>,
&lt;code>From&amp;lt;&amp;amp;Path&amp;gt; for Box&amp;lt;Path&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39960">&lt;code>ffi::FromBytesWithNulError&lt;/code> implements &lt;code>Error&lt;/code> and &lt;code>Display&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39642">Specialize &lt;code>PartialOrd&amp;lt;A&amp;gt; for [A] where A: Ord&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39538">Slightly optimize &lt;code>slice::sort&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39440">Add &lt;code>ToString&lt;/code> trait specialization for &lt;code>Cow&amp;lt;'a, str&amp;gt;&lt;/code> and &lt;code>String&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39438">&lt;code>Box&amp;lt;[T]&amp;gt;&lt;/code> implements &lt;code>From&amp;lt;&amp;amp;[T]&amp;gt; where T: Copy&lt;/code>,
&lt;code>Box&amp;lt;str&amp;gt;&lt;/code> implements &lt;code>From&amp;lt;&amp;amp;str&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39372">&lt;code>IpAddr&lt;/code> implements &lt;code>From&lt;/code> for various arrays. &lt;code>SocketAddr&lt;/code> implements
&lt;code>From&amp;lt;(I, u16)&amp;gt; where I: Into&amp;lt;IpAddr&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39356">&lt;code>format!&lt;/code> estimates the needed capacity before writing a string&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38921">Support unprivileged symlink creation in Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38764">&lt;code>PathBuf&lt;/code> implements &lt;code>Default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38661">Implement &lt;code>PartialEq&amp;lt;[A]&amp;gt;&lt;/code> for &lt;code>VecDeque&amp;lt;A&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38368">&lt;code>HashMap&lt;/code> resizes adaptively&lt;/a> to guard against DOS attacks
and poor hash functions.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3731">Add &lt;code>cargo check --all&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3699">Add an option to ignore SSL revocation checking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3691">Add &lt;code>cargo run --package&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3667">Add &lt;code>required_features&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3664">Assume &lt;code>build.rs&lt;/code> is a build script&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3562">Find workspace via &lt;code>workspace_root&lt;/code> link in containing member&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39633">Documentation is rendered with mdbook instead of the obsolete, in-tree
&lt;code>rustbook&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/unstable-book/">The &amp;ldquo;Unstable Book&amp;rdquo; documents nightly-only features&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40265">Improve the style of the sidebar in rustdoc output&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40261">Configure build correctly on 64-bit CPU&amp;rsquo;s with the armhf ABI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40257">Fix MSP430 breakage due to &lt;code>i128&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39903">Preliminary Solaris/SPARCv9 support&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39837">&lt;code>rustc&lt;/code> is linked statically on Windows MSVC targets&lt;/a>, allowing it to
run without installing the MSVC runtime.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39788">&lt;code>rustdoc --test&lt;/code> includes file names in test names&lt;/a>&lt;/li>
&lt;li>This release includes builds of &lt;code>std&lt;/code> for &lt;code>sparc64-unknown-linux-gnu&lt;/code>,
&lt;code>aarch64-unknown-linux-fuchsia&lt;/code>, and &lt;code>x86_64-unknown-linux-fuchsia&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39491">Initial support for &lt;code>aarch64-unknown-freebsd&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39426">Initial support for &lt;code>i686-unknown-netbsd&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39431">This release no longer includes the old makefile build system&lt;/a>. Rust
is built with a custom build system, written in Rust, and with Cargo.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39002">Add Debug implementations for libcollection structs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38981">&lt;code>TypeId&lt;/code> implements &lt;code>PartialOrd&lt;/code> and &lt;code>Ord&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38945">&lt;code>--test-threads=0&lt;/code> produces an error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40526">&lt;code>rustup&lt;/code> installs documentation by default&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39843">The Rust source includes NatVis visualizations&lt;/a>. These can be used by
WinDbg and Visual Studio to improve the debugging experience.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/38584">Rust 1.17 does not correctly detect the MSVC 2017 linker&lt;/a>. As a
workaround, either use MSVC 2015 or run vcvars.bat.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40319">When coercing to an unsized type lifetimes must be equal&lt;/a>. That is,
disallow subtyping between &lt;code>T&lt;/code> and &lt;code>U&lt;/code> when &lt;code>T: Unsize&amp;lt;U&amp;gt;&lt;/code>, e.g. coercing
&lt;code>&amp;amp;mut [&amp;amp;'a X; N]&lt;/code> to &lt;code>&amp;amp;mut [&amp;amp;'b X]&lt;/code> requires &lt;code>'a&lt;/code> be equal to &lt;code>'b&lt;/code>. Soundness
fix.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/40117">&lt;code>format!&lt;/code> and &lt;code>Display::to_string&lt;/code> panic if an underlying formatting
implementation returns an error&lt;/a>. Previously the error was silently
ignored. It is incorrect for &lt;code>write_fmt&lt;/code> to return an error when writing
to a string.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39851">In-tree crates are verified to be unstable&lt;/a>. Previously, some minor
crates were marked stable and could be accessed from the stable toolchain.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39728">Rust git source no longer includes vendored crates&lt;/a>. Those that need
to build with vendored crates should build from release tarballs.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39572">Fix inert attributes from &lt;code>proc_macro_derives&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39518">During crate resolution, rustc prefers a crate in the sysroot if two crates
are otherwise identical&lt;/a>. Unlikely to be encountered outside the Rust
build system.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39485">Fixed bugs around how type inference interacts with dead-code&lt;/a>. The
existing code generally ignores the type of dead-code unless a type-hint is
provided; this can cause surprising inference interactions particularly around
defaulting. The new code uniformly ignores the result type of dead-code.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38932">Tuple-struct constructors with private fields are no longer visible&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38897">Lifetime parameters that do not appear in the arguments are now considered
early-bound&lt;/a>, resolving a soundness bug (#&lt;a href="https://github.com/rust-lang/rust/issues/32330">32330&lt;/a>). The
&lt;code>hr_lifetime_in_assoc_type&lt;/code> future-compatibility lint has been in effect since
April of 2016.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38161">rustdoc: fix doctests with non-feature crate attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34198">Make transmuting from fn item types to pointer-sized types a hard
error&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.16.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.16.0/</guid><description>&lt;h1 id="1160">
 1.16.0
 &lt;a class="anchor" href="#1160">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>16 March, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>27 January, 2017&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38051">The compiler&amp;rsquo;s &lt;code>dead_code&lt;/code> lint now accounts for type aliases&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38069">Uninhabitable enums (those without any variants) no longer permit wildcard
match patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38313">Clean up semantics of &lt;code>self&lt;/code> in an import list&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38920">&lt;code>Self&lt;/code> may appear in &lt;code>impl&lt;/code> headers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39282">&lt;code>Self&lt;/code> may appear in struct expressions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38571">&lt;code>rustc&lt;/code> now supports &lt;code>--emit=metadata&lt;/code>, which causes rustc to emit
a &lt;code>.rmeta&lt;/code> file containing only crate metadata&lt;/a>. This can be
used by tools like the Rust Language Service to perform
metadata-only builds.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38927">Levenshtein based typo suggestions now work in most places, while
previously they worked only for fields and sometimes for local
variables&lt;/a>. Together with the overhaul of &amp;ldquo;no
resolution&amp;rdquo;/&amp;ldquo;unexpected resolution&amp;rdquo; errors (#&lt;a href="https://github.com/rust-lang/rust/pull/38154">38154&lt;/a>) they result in
large and systematic improvement in resolution diagnostics.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38670">Fix &lt;code>transmute::&amp;lt;T, U&amp;gt;&lt;/code> where &lt;code>T&lt;/code> requires a bigger alignment than
&lt;code>U&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38798">rustc: use -Xlinker when specifying an rpath with &amp;lsquo;,&amp;rsquo; in it&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37057">&lt;code>rustc&lt;/code> no longer attempts to provide &amp;ldquo;consider using an explicit
lifetime&amp;rdquo; suggestions&lt;/a>. They were inaccurate.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.truncate">&lt;code>VecDeque::truncate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.resize">&lt;code>VecDeque::resize&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/string/struct.String.html#method.insert_str">&lt;code>String::insert_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_add">&lt;code>Duration::checked_add&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_sub">&lt;code>Duration::checked_sub&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_div">&lt;code>Duration::checked_div&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_mul">&lt;code>Duration::checked_mul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.replacen">&lt;code>str::replacen&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.repeat">&lt;code>str::repeat&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.is_ipv4">&lt;code>SocketAddr::is_ipv4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.is_ipv6">&lt;code>SocketAddr::is_ipv6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_ipv4">&lt;code>IpAddr::is_ipv4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_ipv6">&lt;code>IpAddr::is_ipv6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by">&lt;code>Vec::dedup_by&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by_key">&lt;code>Vec::dedup_by_key&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_default">&lt;code>Result::unwrap_or_default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset">&lt;code>&amp;lt;*const T&amp;gt;::wrapping_offset&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset-1">&lt;code>&amp;lt;*mut T&amp;gt;::wrapping_offset&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>CommandExt::creation_flags&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/fs/struct.File.html#method.set_permissions">&lt;code>File::set_permissions&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/string/struct.String.html#method.split_off">&lt;code>String::split_off&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37761">&lt;code>[T]::binary_search&lt;/code> and &lt;code>[T]::binary_search_by_key&lt;/code> now take
their argument by &lt;code>Borrow&lt;/code> parameter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38006">All public types in std implement &lt;code>Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38327">&lt;code>IpAddr&lt;/code> implements &lt;code>From&amp;lt;Ipv4Addr&amp;gt;&lt;/code> and &lt;code>From&amp;lt;Ipv6Addr&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38131">&lt;code>Ipv6Addr&lt;/code> implements &lt;code>From&amp;lt;[u16; 8]&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38274">Ctrl-Z returns from &lt;code>Stdin.read()&lt;/code> when reading from the console on
Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38062">std: Fix partial writes in &lt;code>LineWriter&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38622">std: Clamp max read/write sizes on Unix&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38066">Use more specific panic message for &lt;code>&amp;amp;str&lt;/code> slicing errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38304">&lt;code>TcpListener::set_only_v6&lt;/code> is deprecated&lt;/a>. This
functionality cannot be achieved in std currently.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38469">&lt;code>writeln!&lt;/code>, like &lt;code>println!&lt;/code>, now accepts a form with no string
or formatting arguments, to just print a newline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38580">Implement &lt;code>iter::Sum&lt;/code> and &lt;code>iter::Product&lt;/code> for &lt;code>Result&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38781">Reduce the size of static data in &lt;code>std_unicode::tables&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38909">&lt;code>char::EscapeDebug&lt;/code>, &lt;code>EscapeDefault&lt;/code>, &lt;code>EscapeUnicode&lt;/code>,
&lt;code>CaseMappingIter&lt;/code>, &lt;code>ToLowercase&lt;/code>, &lt;code>ToUppercase&lt;/code>, implement
&lt;code>Display&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38712">&lt;code>Duration&lt;/code> implements &lt;code>Sum&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39048">&lt;code>String&lt;/code> implements &lt;code>ToSocketAddrs&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3296">The &lt;code>cargo check&lt;/code> command does a type check of a project without
building it&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3546">crates.io will display CI badges from Travis and AppVeyor, if
specified in Cargo.toml&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3301">crates.io will display categories listed in Cargo.toml&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3534">Compilation profiles accept integer values for &lt;code>debug&lt;/code>, in addition
to &lt;code>true&lt;/code> and &lt;code>false&lt;/code>. These are passed to &lt;code>rustc&lt;/code> as the value to
&lt;code>-C debuginfo&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3604">Implement &lt;code>cargo --version --verbose&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3557">All builds now output &amp;lsquo;dep-info&amp;rsquo; build dependencies compatible with
make and ninja&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3511">Build all workspace members with &lt;code>build --all&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3515">Document all workspace members with &lt;code>doc --all&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3443">Path deps outside workspace are not members&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38589">&lt;code>rustdoc&lt;/code> has a &lt;code>--sysroot&lt;/code> argument that, like &lt;code>rustc&lt;/code>, specifies
the path to the Rust implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38413">The &lt;code>armv7-linux-androideabi&lt;/code> target no longer enables NEON
extensions, per Google&amp;rsquo;s ABI guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38401">The stock standard library can be compiled for Redox OS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38726">Rust has initial SPARC support&lt;/a>. Tier 3. No builds
available.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38559">Rust has experimental support for Nvidia PTX&lt;/a>. Tier 3. No
builds available.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39379">Fix backtraces on i686-pc-windows-gnu by disabling FPO&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38069">Uninhabitable enums (those without any variants) no longer permit wildcard
match patterns&lt;/a>&lt;/li>
&lt;li>In this release, references to uninhabited types can not be
pattern-matched. This was accidentally allowed in 1.15.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38051">The compiler&amp;rsquo;s &lt;code>dead_code&lt;/code> lint now accounts for type aliases&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38274">Ctrl-Z returns from &lt;code>Stdin.read()&lt;/code> when reading from the console on
Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38313">Clean up semantics of &lt;code>self&lt;/code> in an import list&lt;/a>&lt;/li>
&lt;li>Reimplemented lifetime elision. This change was almost entirely compatible
with existing code, but it did close a number of small bugs and loopholes,
as well as being more accepting in some other &lt;a href="https://github.com/rust-lang/rust/issues/41105">cases&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.15.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.15.1/</guid><description>&lt;h1 id="1151">
 1.15.1
 &lt;a class="anchor" href="#1151">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>9 February, 2017&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39466">Fix IntoIter::as_mut_slice&amp;rsquo;s signature&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/39523">Compile compiler builtins with &lt;code>-fPIC&lt;/code> on 32-bit platforms&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.15.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.15.0/</guid><description>&lt;h1 id="1150">
 1.15.0
 &lt;a class="anchor" href="#1150">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>2 February, 2017&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>16 December, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Basic procedural macros allowing custom &lt;code>#[derive]&lt;/code>, aka &amp;ldquo;macros 1.1&amp;rdquo;, are
stable. This allows popular code-generating crates like Serde and Diesel to
work ergonomically. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md">RFC 1681&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36868">Tuple structs may be empty. Unary and empty tuple structs may be instantiated
with curly braces&lt;/a>. Part of &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md">RFC 1506&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37127">A number of minor changes to name resolution have been activated&lt;/a>.
They add up to more consistent semantics, allowing for future evolution of
Rust macros. Specified in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md">RFC 1560&lt;/a>, see its section on &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md#changes-to-name-resolution-rules">&amp;ldquo;changes&amp;rdquo;&lt;/a> for
details of what is different. The breaking changes here have been transitioned
through the &lt;a href="https://github.com/rust-lang/rust/pull/38271">&lt;code>legacy_imports&lt;/code>&lt;/a> lint since 1.14, with no known regressions.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38279">In &lt;code>macro_rules&lt;/code>, &lt;code>path&lt;/code> fragments can now be parsed as type parameter
bounds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37791">&lt;code>?Sized&lt;/code> can be used in &lt;code>where&lt;/code> clauses&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37789">There is now a limit on the size of monomorphized types and it can be
modified with the &lt;code>#![type_size_limit]&lt;/code> crate attribute, similarly to
the &lt;code>#![recursion_limit]&lt;/code> attribute&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37973">On Windows, the compiler will apply dllimport attributes when linking to
extern functions&lt;/a>. Additional attributes and flags can control which
library kind is linked and its name. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1717-dllimport.md">RFC 1717&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38117">Rust-ABI symbols are no longer exported from cdylibs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38107">The &lt;code>--test&lt;/code> flag works with procedural macro crates&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37814">Fix &lt;code>extern &amp;quot;aapcs&amp;quot; fn&lt;/code> ABI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37636">The &lt;code>-C no-stack-check&lt;/code> flag is deprecated&lt;/a>. It does nothing.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37613">The &lt;code>format!&lt;/code> expander recognizes incorrect &lt;code>printf&lt;/code> and shell-style
formatting directives and suggests the correct format&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37456">Only report one error for all unused imports in an import list&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler-performance">
 Compiler Performance
 &lt;a class="anchor" href="#compiler-performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37705">Avoid unnecessary &lt;code>mk_ty&lt;/code> calls in &lt;code>Ty::super_fold_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37979">Avoid more unnecessary &lt;code>mk_ty&lt;/code> calls in &lt;code>Ty::super_fold_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37848">Don&amp;rsquo;t clone in &lt;code>UnificationTable::probe&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37764">Remove &lt;code>scope_auxiliary&lt;/code> to cut RSS by 10%&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37760">Use small vectors in type walker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37701">Macro expansion performance was improved&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37642">Change &lt;code>HirVec&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code> to &lt;code>HirVec&amp;lt;T&amp;gt;&lt;/code> in &lt;code>hir::Expr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37229">Replace FNV with a faster hash function&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by">&lt;code>std::iter::Iterator::min_by&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by">&lt;code>std::iter::Iterator::max_by&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html">&lt;code>std::os::*::fs::FileExt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.get_mut">&lt;code>std::sync::atomic::Atomic*::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.into_inner">&lt;code>std::sync::atomic::Atomic*::into_inner&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_slice">&lt;code>std::vec::IntoIter::as_slice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_mut_slice">&lt;code>std::vec::IntoIter::as_mut_slice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_iter">&lt;code>std::sync::mpsc::Receiver::try_iter&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html#tymethod.before_exec">&lt;code>std::os::unix::process::CommandExt::before_exec&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.strong_count">&lt;code>std::rc::Rc::strong_count&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.weak_count">&lt;code>std::rc::Rc::weak_count&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.strong_count">&lt;code>std::sync::Arc::strong_count&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html#method.weak_count">&lt;code>std::sync::Arc::weak_count&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8">&lt;code>std::char::encode_utf8&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf16">&lt;code>std::char::encode_utf16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Ref.html#method.clone">&lt;code>std::cell::Ref::clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/io/struct.Take.html#method.into_inner">&lt;code>std::io::Take::into_inner&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38192">The standard sorting algorithm has been rewritten for dramatic performance
improvements&lt;/a>. It is a hybrid merge sort, drawing influences from
Timsort. Previously it was a naive merge sort.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38134">&lt;code>Iterator::nth&lt;/code> no longer has a &lt;code>Sized&lt;/code> bound&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38182">&lt;code>Extend&amp;lt;&amp;amp;T&amp;gt;&lt;/code> is specialized for &lt;code>Vec&lt;/code> where &lt;code>T: Copy&lt;/code>&lt;/a> to improve
performance.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37888">&lt;code>chars().count()&lt;/code> is much faster&lt;/a> and so are &lt;a href="https://github.com/rust-lang/rust/pull/37882">&lt;code>chars().last()&lt;/code>
and &lt;code>char_indices().last()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38146">Fix ARM Objective-C ABI in &lt;code>std::env::args&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37855">Chinese characters display correctly in &lt;code>fmt::Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37699">Derive &lt;code>Default&lt;/code> for &lt;code>Duration&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37677">Support creation of anonymous pipes on WinXP/2k&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37527">&lt;code>mpsc::RecvTimeoutError&lt;/code> implements &lt;code>Error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38835">Don&amp;rsquo;t pass overlapped handles to processes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/issues/3368">In this release, Cargo build scripts no longer have access to the &lt;code>OUT_DIR&lt;/code>
environment variable at build time via &lt;code>env!(&amp;quot;OUT_DIR&amp;quot;)&lt;/code>&lt;/a>. They
should instead check the variable at runtime with &lt;code>std::env&lt;/code>. That the value
was set at build time was a bug, and incorrect when cross-compiling. This
change is known to cause breakage.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3221">Add &lt;code>--all&lt;/code> flag to &lt;code>cargo test&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3363">Compile statically against the MSVC CRT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3102">Mix feature flags into fingerprint/metadata shorthash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3311">Link OpenSSL statically on OSX&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3310">Apply new fingerprinting to build dir outputs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3336">Test for bad path overrides with summaries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3338">Require &lt;code>cargo install --vers&lt;/code> to take a semver version&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3348">Fix retrying crate downloads for network errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3356">Implement string lookup for &lt;code>build.rustflags&lt;/code> config key&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3319">Emit more info on &amp;ndash;message-format=json&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3361">Assume &lt;code>build.rs&lt;/code> in the same directory as &lt;code>Cargo.toml&lt;/code> is a build script&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3409">Don&amp;rsquo;t ignore errors in workspace manifest&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3410">Fix &lt;code>--message-format JSON&lt;/code> when rustc emits non-JSON warnings&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tooling">
 Tooling
 &lt;a class="anchor" href="#tooling">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38185">Test runners (binaries built with &lt;code>--test&lt;/code>) now support a &lt;code>--list&lt;/code> argument
that lists the tests it contains&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38181">Test runners now support a &lt;code>--exact&lt;/code> argument that makes the test filter
match exactly, instead of matching only a substring of the test name&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37763">rustdoc supports a &lt;code>--playground-url&lt;/code> flag&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37749">rustdoc provides more details about &lt;code>#[should_panic]&lt;/code> errors&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37817">The Rust build system is now written in Rust&lt;/a>. The Makefiles may
continue to be used in this release by passing &lt;code>--disable-rustbuild&lt;/code> to the
configure script, but they will be deleted soon. Note that the new build
system uses a different on-disk layout that will likely affect any scripts
building Rust.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38086">Rust supports i686-unknown-openbsd&lt;/a>. Tier 3 support. No testing or
releases.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37627">Rust supports the MSP430&lt;/a>. Tier 3 support. No testing or releases.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37615">Rust supports the ARMv5TE architecture&lt;/a>. Tier 3 support. No testing or
releases.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37127">A number of minor changes to name resolution have been activated&lt;/a>.
They add up to more consistent semantics, allowing for future evolution of
Rust macros. Specified in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md">RFC 1560&lt;/a>, see its section on &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md#changes-to-name-resolution-rules">&amp;ldquo;changes&amp;rdquo;&lt;/a> for
details of what is different. The breaking changes here have been transitioned
through the &lt;a href="https://github.com/rust-lang/rust/pull/38271">&lt;code>legacy_imports&lt;/code>&lt;/a> lint since 1.14, with no known regressions.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/issues/3368">In this release, Cargo build scripts no longer have access to the &lt;code>OUT_DIR&lt;/code>
environment variable at build time via &lt;code>env!(&amp;quot;OUT_DIR&amp;quot;)&lt;/code>&lt;/a>. They
should instead check the variable at runtime with &lt;code>std::env&lt;/code>. That the value
was set at build time was a bug, and incorrect when cross-compiling. This
change is known to cause breakage.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/33685">Higher-ranked lifetimes are no longer allowed to appear &lt;em>only&lt;/em> in associated
types&lt;/a>. The &lt;a href="https://github.com/rust-lang/rust/issues/33685">&lt;code>hr_lifetime_in_assoc_type&lt;/code> lint&lt;/a> has been a warning since
1.10 and is now an error by default. It will become a hard error in the near
future.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37602">The semantics relating modules to file system directories are changing in
minor ways&lt;/a>. This is captured in the new &lt;code>legacy_directory_ownership&lt;/code>
lint, which is a warning in this release, and will become a hard error in the
future.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/38117">Rust-ABI symbols are no longer exported from cdylibs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37834">Once &lt;code>Peekable&lt;/code> peeks a &lt;code>None&lt;/code> it will return that &lt;code>None&lt;/code> without re-querying
the underlying iterator&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.14.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.14.0/</guid><description>&lt;h1 id="1140">
 1.14.0
 &lt;a class="anchor" href="#1140">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>22 December, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 November, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36843">&lt;code>..&lt;/code> matches multiple tuple fields in enum variants, structs
and tuples&lt;/a>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1492-dotdot-in-patterns.md">RFC 1492&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37389">Safe &lt;code>fn&lt;/code> items can be coerced to &lt;code>unsafe fn&lt;/code> pointers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37367">&lt;code>use *&lt;/code> and &lt;code>use ::*&lt;/code> both glob-import from the crate root&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36822">It&amp;rsquo;s now possible to call a &lt;code>Vec&amp;lt;Box&amp;lt;Fn()&amp;gt;&amp;gt;&lt;/code> without explicit
dereferencing&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37224">Mark enums with non-zero discriminant as non-zero&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37162">Lower-case &lt;code>static mut&lt;/code> names are linted like other
statics and consts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36819">Fix ICE on some macros in const integer positions
(e.g. &lt;code>[u8; m!()]&lt;/code>)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36798">Improve error message and snippet for &amp;ldquo;did you mean &lt;code>x&lt;/code>&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36794">Add a panic-strategy field to the target specification&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37200">Include LLVM version in &lt;code>--version --verbose&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compile-time-optimizations">
 Compile-time Optimizations
 &lt;a class="anchor" href="#compile-time-optimizations">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37569">Improve macro expansion performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37445">Shrink &lt;code>Expr_::ExprInlineAsm&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37439">Replace all uses of SHA-256 with BLAKE2b&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37427">Reduce the number of bytes hashed by &lt;code>IchHasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37373">Avoid more allocations when compiling html5ever&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37322">Use &lt;code>SmallVector&lt;/code> in &lt;code>CombineFields::instantiate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37318">Avoid some allocations in the macro parser&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37298">Use a faster deflate setting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37270">Add &lt;code>ArrayVec&lt;/code> and &lt;code>AccumulateVec&lt;/code> to reduce heap allocations
during interning of slices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37267">Optimize &lt;code>write_metadata&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37231">Don&amp;rsquo;t process obligation forest cycles when stalled&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37161">Avoid many &lt;code>CrateConfig&lt;/code> clones&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37108">Optimize &lt;code>Substs::super_fold_with&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36993">Optimize &lt;code>ObligationForest&lt;/code>&amp;rsquo;s &lt;code>NodeState&lt;/code> handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36917">Speed up &lt;code>plug_leaks&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36825">&lt;code>println!()&lt;/code>, with no arguments, prints newline&lt;/a>.
Previously, an empty string was required to achieve the same.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37356">&lt;code>Wrapping&lt;/code> impls standard binary and unary operators, as well as
the &lt;code>Sum&lt;/code> and &lt;code>Product&lt;/code> iterators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37326">Implement &lt;code>From&amp;lt;Cow&amp;lt;str&amp;gt;&amp;gt; for String&lt;/code> and &lt;code>From&amp;lt;Cow&amp;lt;[T]&amp;gt;&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37315">Improve &lt;code>fold&lt;/code> performance for &lt;code>chain&lt;/code>, &lt;code>cloned&lt;/code>, &lt;code>map&lt;/code>, and
&lt;code>VecDeque&lt;/code> iterators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37312">Improve &lt;code>SipHasher&lt;/code> performance on small values&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37306">Add Iterator trait TrustedLen to enable better FromIterator /
Extend&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37230">Expand &lt;code>.zip()&lt;/code> specialization to &lt;code>.map()&lt;/code> and &lt;code>.cloned()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37221">&lt;code>ReadDir&lt;/code> implements &lt;code>Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37178">Implement &lt;code>RefUnwindSafe&lt;/code> for atomic types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37094">Specialize &lt;code>Vec::extend&lt;/code> to &lt;code>Vec::extend_from_slice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37064">Avoid allocations in &lt;code>Decoder::read_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37037">&lt;code>io::Error&lt;/code> implements &lt;code>From&amp;lt;io::ErrorKind&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36880">Impl &lt;code>Debug&lt;/code> for raw pointers to unsized data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37470">Don&amp;rsquo;t reuse &lt;code>HashMap&lt;/code> random seeds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36692">The internal memory layout of &lt;code>HashMap&lt;/code> is more cache-friendly, for
significant improvements in some operations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36595">&lt;code>HashMap&lt;/code> uses less memory on 32-bit architectures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36430">Impl &lt;code>Add&amp;lt;{str, Cow&amp;lt;str&amp;gt;}&amp;gt;&lt;/code> for &lt;code>Cow&amp;lt;str&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3243">Expose rustc cfg values to build scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3259">Allow cargo to work with read-only &lt;code>CARGO_HOME&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3280">Fix passing &amp;ndash;features when testing multiple packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3249">Use a single profile set per workspace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3220">Load &lt;code>replace&lt;/code> sections from lock files&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3175">Ignore &lt;code>panic&lt;/code> configuration for test/bench profiles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tooling">
 Tooling
 &lt;a class="anchor" href="#tooling">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://internals.rust-lang.org/t/beta-testing-rustup-rs/3316/204">rustup is the recommended Rust installation method&lt;/a>&lt;/li>
&lt;li>This release includes host (rustc) builds for Linux on MIPS, PowerPC, and
S390x. These are &lt;a href="https://forge.rust-lang.org/platform-support.html">tier 2&lt;/a> platforms and may have major defects. Follow the
instructions on the website to install, or add the targets to an existing
installation with &lt;code>rustup target add&lt;/code>. The new target triples are:
&lt;ul>
&lt;li>&lt;code>mips-unknown-linux-gnu&lt;/code>&lt;/li>
&lt;li>&lt;code>mipsel-unknown-linux-gnu&lt;/code>&lt;/li>
&lt;li>&lt;code>mips64-unknown-linux-gnuabi64&lt;/code>&lt;/li>
&lt;li>&lt;code>mips64el-unknown-linux-gnuabi64 &lt;/code>&lt;/li>
&lt;li>&lt;code>powerpc-unknown-linux-gnu&lt;/code>&lt;/li>
&lt;li>&lt;code>powerpc64-unknown-linux-gnu&lt;/code>&lt;/li>
&lt;li>&lt;code>powerpc64le-unknown-linux-gnu&lt;/code>&lt;/li>
&lt;li>&lt;code>s390x-unknown-linux-gnu &lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>This release includes target (std) builds for ARM Linux running MUSL
libc. These are &lt;a href="https://forge.rust-lang.org/platform-support.html">tier 2&lt;/a> platforms and may have major defects. Add the
following triples to an existing rustup installation with &lt;code>rustup target add&lt;/code>:
&lt;ul>
&lt;li>&lt;code>arm-unknown-linux-musleabi&lt;/code>&lt;/li>
&lt;li>&lt;code>arm-unknown-linux-musleabihf&lt;/code>&lt;/li>
&lt;li>&lt;code>armv7-unknown-linux-musleabihf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>This release includes &lt;a href="https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627">experimental support for WebAssembly&lt;/a>, via
the &lt;code>wasm32-unknown-emscripten&lt;/code> target. This target is known to have major
defects. Please test, report, and fix.&lt;/li>
&lt;li>rustup no longer installs documentation by default. Run &lt;code>rustup component add rust-docs&lt;/code> to install.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37310">Fix line stepping in debugger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37280">Enable line number debuginfo in releases&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37392">Disable jemalloc on aarch64/powerpc/mips&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37313">Add support for Fuchsia OS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37273">Detect local-rebuild by only MAJOR.MINOR version&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36894">A number of forward-compatibility lints used by the compiler
to gradually introduce language changes have been converted
to deny by default&lt;/a>:
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36886">&amp;ldquo;use of inaccessible extern crate erroneously allowed&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36887">&amp;ldquo;type parameter default erroneously allowed in invalid location&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36888">&amp;ldquo;detects super or self keywords at the beginning of global path&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36889">&amp;ldquo;two overlapping inherent impls define an item with the same name
were erroneously allowed&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36890">&amp;ldquo;floating-point constants cannot be used in patterns&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36891">&amp;ldquo;constants of struct or enum type can only be used in a pattern if
the struct or enum has &lt;code>#[derive(PartialEq, Eq)]&lt;/code>&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36892">&amp;ldquo;lifetimes or labels named &lt;code>'_&lt;/code> were erroneously allowed&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37378">Prohibit patterns in trait methods without bodies&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37351">The atomic &lt;code>Ordering&lt;/code> enum may not be matched exhaustively&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37247">Future-proofing &lt;code>#[no_link]&lt;/code> breaks some obscure cases&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37213">The &lt;code>$crate&lt;/code> macro variable is accepted in fewer locations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37167">Impls specifying extra region requirements beyond the trait
they implement are rejected&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/37111">Enums may not be unsized&lt;/a>. Unsized enums are intended to
work but never have. For now they are forbidden.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36767">Enforce the shadowing restrictions from RFC 1560 for today&amp;rsquo;s macros&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.13.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.13.0/</guid><description>&lt;h1 id="1130">
 1.13.0
 &lt;a class="anchor" href="#1130">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 November, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>23 September, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36995">Stabilize the &lt;code>?&lt;/code> operator&lt;/a>. &lt;code>?&lt;/code> is a simple way to propagate
errors, like the &lt;code>try!&lt;/code> macro, described in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md">RFC 0243&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36014">Stabilize macros in type position&lt;/a>. Described in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0873-type-macros.md">RFC 873&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36995">Stabilize attributes on statements&lt;/a>. Described in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0016-more-attributes.md">RFC 0016&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35728">Fix &lt;code>#[derive]&lt;/code> for empty tuple structs/variants&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36029">Fix lifetime rules for &amp;lsquo;if&amp;rsquo; conditions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36482">Avoid loading and parsing unconfigured non-inline modules&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36574">Add the &lt;code>-C link-arg&lt;/code> argument&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35764">Remove the old AST-based backend from rustc_trans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35814">Don&amp;rsquo;t enable NEON by default on armv7 Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35238">Fix debug line number info for macro expansions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36008">Do not emit &amp;ldquo;class method&amp;rdquo; debuginfo for types that are not
DICompositeType&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34623">Warn about multiple conflicting #[repr] hints&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36351">When sizing DST, don&amp;rsquo;t double-count nested struct prefixes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36505">Default RUST_MIN_STACK to 16MiB for now&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36551">Improve rlib metadata format&lt;/a>. Reduces rlib size significantly.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36721">Reject macros with empty repetitions to avoid infinite loop&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36214">Expand macros without recursing to avoid stack overflows&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="diagnostics">
 Diagnostics
 &lt;a class="anchor" href="#diagnostics">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35702">Replace macro backtraces with labeled local uses&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33922">Improve error message for misplaced doc comments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35975">Buffer unix and lock windows to prevent message interleaving&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36171">Update lifetime errors to specifically note temporaries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36178">Special case a few colors for Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36289">Suggest &lt;code>use self&lt;/code> when such an import resolves&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36338">Be more specific when type parameter shadows primitive type&lt;/a>&lt;/li>
&lt;li>Many minor improvements&lt;/li>
&lt;/ul>
&lt;h2 id="compile-time-optimizations">
 Compile-time Optimizations
 &lt;a class="anchor" href="#compile-time-optimizations">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35854">Compute and cache HIR hashes at beginning&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36004">Don&amp;rsquo;t hash types in loan paths&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35761">Cache projections in trans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36527">Optimize the parser&amp;rsquo;s last token handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36524">Only instantiate #[inline] functions in codegen units referencing
them&lt;/a>. This leads to big improvements in cases where crates export
define many inline functions without using them directly.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36592">Lazily allocate TypedArena&amp;rsquo;s first chunk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36734">Don&amp;rsquo;t allocate during default HashSet creation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i32.html#method.checked_abs">&lt;code>checked_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_abs">&lt;code>wrapping_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.i32.html#method.overflowing_abs">&lt;code>overflowing_abs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow">&lt;code>RefCell::try_borrow&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow_mut">&lt;code>RefCell::try_borrow_mut&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35074">Add &lt;code>assert_ne!&lt;/code> and &lt;code>debug_assert_ne!&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35354">Make &lt;code>vec_deque::Drain&lt;/code>, &lt;code>hash_map::Drain&lt;/code>, and &lt;code>hash_set::Drain&lt;/code>
covariant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35559">Implement &lt;code>AsRef&amp;lt;[T]&amp;gt;&lt;/code> for &lt;code>std::slice::Iter&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35707">Implement &lt;code>Debug&lt;/code> for &lt;code>std::vec::IntoIter&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35871">&lt;code>CString&lt;/code>: avoid excessive growth just to 0-terminate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35627">Implement &lt;code>CoerceUnsized&lt;/code> for &lt;code>{Cell, RefCell, UnsafeCell}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35884">Use arc4rand on FreeBSD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35969">memrchr: Correct aligned offset computation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36059">Improve Demangling of Rust Symbols&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35048">Use monotonic time in condition variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36101">Implement &lt;code>Debug&lt;/code> for &lt;code>std::path::{Components,Iter}&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35755">Implement conversion traits for &lt;code>char&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36104">Fix illegal instruction caused by overflow in channel cloning&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36264">Zero first byte of CString on drop&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36372">Inherit overflow checks for sum and product&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36423">Add missing Eq implementations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36631">Implement &lt;code>Debug&lt;/code> for &lt;code>DirEntry&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36754">When &lt;code>getaddrinfo&lt;/code> returns &lt;code>EAI_SYSTEM&lt;/code> retrieve actual error from
&lt;code>errno&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/hash/struct.SipHasher.html">&lt;code>SipHasher&lt;/code>&lt;/a> is deprecated. Use &lt;a href="https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html">&lt;code>DefaultHasher&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35911">Implement more traits for &lt;code>std::io::ErrorKind&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36072">Optimize BinaryHeap bounds checking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36355">Work around pointer aliasing issue in &lt;code>Vec::extend_from_slice&lt;/code>,
&lt;code>extend_with_element&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34942">Fix overflow checking in unsigned pow()&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This release includes security fixes to both curl and OpenSSL.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3021">Fix transitive doctests when panic=abort&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3038">Add &amp;ndash;all-features flag to cargo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3060">Reject path-based dependencies in &lt;code>cargo package&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3078">Don&amp;rsquo;t parse the home directory more than once&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3092">Don&amp;rsquo;t try to generate Cargo.lock on empty workspaces&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3121">Update OpenSSL to 1.0.2j&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3110">Add license and license_file to cargo metadata output&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3089">Make crates-io registry URL optional in config; ignore all changes to
source.crates-io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3123">Don&amp;rsquo;t download dependencies from other platforms&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3125">Build transitive dev-dependencies when needed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3157">Add support for per-target rustflags in .cargo/config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3144">Avoid updating registry when adding existing deps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3136">Warn about path overrides that won&amp;rsquo;t work&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3146">Use workspaces during &lt;code>cargo install&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3162">Leak mspdbsrv.exe processes on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3000">Add &amp;ndash;message-format flag&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3205">Pass target environment for rustdoc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2818">Use &lt;code>CommandExt::exec&lt;/code> for &lt;code>cargo run&lt;/code> on Unix&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3241">Update curl and curl-sys&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3242">Call rustdoc test with the correct cfg flags of a package&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tooling">
 Tooling
 &lt;a class="anchor" href="#tooling">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36586">rustdoc: Add the &lt;code>--sysroot&lt;/code> argument&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35655">rustdoc: Fix a couple of issues with the search results&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35234">rustdoc: remove the &lt;code>!&lt;/code> from macro URLs and titles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35585">gdb: Fix pretty-printing special-cased Rust types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36266">rustdoc: Filter more incorrect methods inherited through Deref&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35124">Remove unmaintained style guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36369">Add s390x support&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36727">Initial work at Haiku OS support&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35734">Add mips-uclibc targets&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35021">Crate-ify compiler-rt into compiler-builtins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36213">Add rustc version info (git hash + date) to dist tarball&lt;/a>&lt;/li>
&lt;li>Many documentation improvements&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/hash/struct.SipHasher.html">&lt;code>SipHasher&lt;/code>&lt;/a> is deprecated. Use &lt;a href="https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html">&lt;code>DefaultHasher&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34923">Deny (by default) transmuting from fn item types to pointer-sized
types&lt;/a>. Continuing the long transition to zero-sized fn items,
per &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md">RFC 401&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35728">Fix &lt;code>#[derive]&lt;/code> for empty tuple structs/variants&lt;/a>.
Part of &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md">RFC 1506&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36173">Issue deprecation warnings for safe accesses to extern statics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36029">Fix lifetime rules for &amp;lsquo;if&amp;rsquo; conditions&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36372">Inherit overflow checks for sum and product&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/36730">Forbid user-defined macros named &amp;ldquo;macro_rules&amp;rdquo;&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.12.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.12.1/</guid><description>&lt;h1 id="1121">
 1.12.1
 &lt;a class="anchor" href="#1121">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>20 October, 2016&lt;/em>&lt;/li>
&lt;li>This is a patch release&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="regression-fixes">
 Regression Fixes
 &lt;a class="anchor" href="#regression-fixes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36381">ICE: &amp;lsquo;rustc&amp;rsquo; panicked at &amp;lsquo;assertion failed: concrete_substs.is_normalized_for_trans()&amp;rsquo; #36381&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36856">Confusion with double negation and booleans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36875">rustc 1.12.0 fails with SIGSEGV in release mode (syn crate 0.8.0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36924">Rustc 1.12.0 Windows build of &lt;code>ethcore&lt;/code> crate fails with LLVM error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36926">1.12.0: High memory usage when linking in release mode with debug info&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/36936">Corrupted memory after updated to 1.12&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/37026">&amp;ldquo;Let NullaryConstructor = something;&amp;rdquo; causes internal compiler error: &amp;ldquo;tried to overwrite interned AdtDef&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/37112">Fix ICE: inject bitcast if types mismatch for invokes/calls/stores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/37153">debuginfo: Handle spread_arg case in MIR-trans in a more stable way.&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.12.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.12.0/</guid><description>&lt;h1 id="1120">
 1.12.0
 &lt;a class="anchor" href="#1120">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>29 September, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>12 August, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34096">&lt;code>rustc&lt;/code> translates code to LLVM IR via its own &amp;ldquo;middle&amp;rdquo; IR (MIR)&lt;/a>.
This translation pass is far simpler than the previous AST-&amp;gt;LLVM pass, and
creates opportunities to perform new optimizations directly on the MIR. It
was previously described &lt;a href="https://blog.rust-lang.org/2016/04/19/MIR.html">on the Rust blog&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35401">&lt;code>rustc&lt;/code> presents a new, more readable error format, along with
machine-readable JSON error output for use by IDEs&lt;/a>.
Most common editors supporting Rust have been updated to work with it. It was
previously described &lt;a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html">on the Rust blog&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="compiler">
 Compiler
 &lt;a class="anchor" href="#compiler">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34096">&lt;code>rustc&lt;/code> translates code to LLVM IR via its own &amp;ldquo;middle&amp;rdquo; IR (MIR)&lt;/a>.
This translation pass is far simpler than the previous AST-&amp;gt;LLVM pass, and
creates opportunities to perform new optimizations directly on the MIR. It
was previously described &lt;a href="https://blog.rust-lang.org/2016/04/19/MIR.html">on the Rust blog&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35489">Print the Rust target name, not the LLVM target name, with
&lt;code>--print target-list&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35267">The computation of &lt;code>TypeId&lt;/code> is correct in some cases where it was previously
producing inconsistent results&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34910">The &lt;code>mips-unknown-linux-gnu&lt;/code> target uses hardware floating point by default&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34845">The &lt;code>rustc&lt;/code> arguments, &lt;code>--print target-cpus&lt;/code>, &lt;code>--print target-features&lt;/code>,
&lt;code>--print relocation-models&lt;/code>, and &lt;code>--print code-models&lt;/code> print the available
options to the &lt;code>-C target-cpu&lt;/code>, &lt;code>-C target-feature&lt;/code>, &lt;code>-C relocation-model&lt;/code> and
&lt;code>-C code-model&lt;/code> code generation arguments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35060">&lt;code>rustc&lt;/code> supports three new MUSL targets on ARM: &lt;code>arm-unknown-linux-musleabi&lt;/code>,
&lt;code>arm-unknown-linux-musleabihf&lt;/code>, and &lt;code>armv7-unknown-linux-musleabihf&lt;/code>&lt;/a>.
These targets produce statically-linked binaries. There are no binary release
builds yet though.&lt;/li>
&lt;/ul>
&lt;h2 id="diagnostics">
 Diagnostics
 &lt;a class="anchor" href="#diagnostics">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35401">&lt;code>rustc&lt;/code> presents a new, more readable error format, along with
machine-readable JSON error output for use by IDEs&lt;/a>.
Most common editors supporting Rust have been updated to work with it. It was
previously described &lt;a href="https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html">on the Rust blog&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35611">In error descriptions, references are now described in plain English,
instead of as &amp;ldquo;&amp;amp;-ptr&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35080">In error type descriptions, unknown numeric types are named &lt;code>{integer}&lt;/code> or
&lt;code>{float}&lt;/code> instead of &lt;code>_&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34676">&lt;code>rustc&lt;/code> emits a clearer error when inner attributes follow a doc comment&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34925">&lt;code>macro_rules!&lt;/code> invocations can be made within &lt;code>macro_rules!&lt;/code> invocations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35453">&lt;code>macro_rules!&lt;/code> meta-variables are hygienic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34908">&lt;code>macro_rules!&lt;/code> &lt;code>tt&lt;/code> matchers can be reparsed correctly, making them much more
useful&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34886">&lt;code>macro_rules!&lt;/code> &lt;code>stmt&lt;/code> matchers correctly consume the entire contents when
inside non-braces invocations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34660">Semicolons are properly required as statement delimiters inside
&lt;code>macro_rules!&lt;/code> invocations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34546">&lt;code>cfg_attr&lt;/code> works on &lt;code>path&lt;/code> attributes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr">&lt;code>Cell::as_ptr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr">&lt;code>RefCell::as_ptr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified">&lt;code>IpAddr::is_unspecified&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback">&lt;code>IpAddr::is_loopback&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast">&lt;code>IpAddr::is_multicast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified">&lt;code>Ipv4Addr::is_unspecified&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets">&lt;code>Ipv6Addr::octets&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains">&lt;code>LinkedList::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains">&lt;code>VecDeque::contains&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw">&lt;code>ExitStatusExt::from_raw&lt;/code>&lt;/a>.
Both on Unix and Windows.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout">&lt;code>Receiver::recv_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html">&lt;code>RecvTimeoutError&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut">&lt;code>BinaryHeap::peek_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html">&lt;code>PeekMut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Product.html">&lt;code>iter::Product&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Sum.html">&lt;code>iter::Sum&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry">&lt;code>OccupiedEntry::remove_entry&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key">&lt;code>VacantEntry::into_key&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33642">The &lt;code>format!&lt;/code> macro and friends now allow a single argument to be formatted
in multiple styles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34762">The lifetime bounds on &lt;code>[T]::binary_search_by&lt;/code> and
&lt;code>[T]::binary_search_by_key&lt;/code> have been adjusted to be more flexible&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34828">&lt;code>Option&lt;/code> implements &lt;code>From&lt;/code> for its contained type&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35392">&lt;code>Cell&lt;/code>, &lt;code>RefCell&lt;/code> and &lt;code>UnsafeCell&lt;/code> implement &lt;code>From&lt;/code> for their contained type&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35378">&lt;code>RwLock&lt;/code> panics if the reader count overflows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35354">&lt;code>vec_deque::Drain&lt;/code>, &lt;code>hash_map::Drain&lt;/code> and &lt;code>hash_set::Drain&lt;/code> are covariant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34951">&lt;code>vec::Drain&lt;/code> and &lt;code>binary_heap::Drain&lt;/code> are covariant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35064">&lt;code>Cow&amp;lt;str&amp;gt;&lt;/code> implements &lt;code>FromIterator&lt;/code> for &lt;code>char&lt;/code>, &lt;code>&amp;amp;str&lt;/code> and &lt;code>String&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34946">Sockets on Linux are correctly closed in subprocesses via &lt;code>SOCK_CLOEXEC&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34937">&lt;code>hash_map::Entry&lt;/code>, &lt;code>hash_map::VacantEntry&lt;/code> and &lt;code>hash_map::OccupiedEntry&lt;/code>
implement &lt;code>Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34885">&lt;code>btree_map::Entry&lt;/code>, &lt;code>btree_map::VacantEntry&lt;/code> and &lt;code>btree_map::OccupiedEntry&lt;/code>
implement &lt;code>Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34890">&lt;code>String&lt;/code> implements &lt;code>AddAssign&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34879">Variadic &lt;code>extern fn&lt;/code> pointers implement the &lt;code>Clone&lt;/code>, &lt;code>PartialEq&lt;/code>, &lt;code>Eq&lt;/code>,
&lt;code>PartialOrd&lt;/code>, &lt;code>Ord&lt;/code>, &lt;code>Hash&lt;/code>, &lt;code>fmt::Pointer&lt;/code>, and &lt;code>fmt::Debug&lt;/code> traits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34757">&lt;code>FileType&lt;/code> implements &lt;code>Debug&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34756">References to &lt;code>Mutex&lt;/code> and &lt;code>RwLock&lt;/code> are unwind-safe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34731">&lt;code>mpsc::sync_channel&lt;/code> &lt;code>Receiver&lt;/code>s return any available message before
reporting a disconnect&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34599">Unicode definitions have been updated to 9.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33312">&lt;code>env&lt;/code> iterators implement &lt;code>DoubleEndedIterator&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2857">Support local mirrors of registries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2679">Add support for command aliases&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/3007">Allow &lt;code>opt-level=&amp;quot;s&amp;quot;&lt;/code> / &lt;code>opt-level=&amp;quot;z&amp;quot;&lt;/code> in profile overrides&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2988">Make &lt;code>cargo doc --open --target&lt;/code> work as expected&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2974">Speed up noop registry updates&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2971">Update OpenSSL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2954">Fix &lt;code>--panic=abort&lt;/code> with plugins&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2946">Always pass &lt;code>-C metadata&lt;/code> to the compiler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2938">Fix depending on git repos with workspaces&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2921">Add a &lt;code>--lib&lt;/code> flag to &lt;code>cargo new&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2917">Add &lt;code>http.cainfo&lt;/code> for custom certs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2909">Indicate the compilation profile after compiling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2876">Allow enabling features for dependencies with &lt;code>--features&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2867">Add &lt;code>--jobs&lt;/code> flag to &lt;code>cargo package&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2849">Add &lt;code>--dry-run&lt;/code> to &lt;code>cargo publish&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2794">Add support for &lt;code>RUSTDOCFLAGS&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="performance">
 Performance
 &lt;a class="anchor" href="#performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35444">&lt;code>panic::catch_unwind&lt;/code> is more optimized&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34866">&lt;code>panic::catch_unwind&lt;/code> no longer accesses thread-local storage on entry&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tooling">
 Tooling
 &lt;a class="anchor" href="#tooling">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35414">Test binaries now support a &lt;code>--test-threads&lt;/code> argument to specify the number
of threads used to run tests, and which acts the same as the
&lt;code>RUST_TEST_THREADS&lt;/code> environment variable&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35405">The test runner now emits a warning when tests run over 60 seconds&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34752">rustdoc: Fix methods in search results&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34646">&lt;code>rust-lldb&lt;/code> warns about unsupported versions of LLDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34366">Rust releases now come with source packages that can be installed by rustup
via &lt;code>rustup component add rust-src&lt;/code>&lt;/a>.
The resulting source code can be used by tools and IDES, located in the
sysroot under &lt;code>lib/rustlib/src&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35594">The compiler can now be built against LLVM 3.9&lt;/a>&lt;/li>
&lt;li>Many minor improvements to the documentation.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34832">The Rust exception handling &amp;ldquo;personality&amp;rdquo; routine is now written in Rust&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/35084">When printing Windows &lt;code>OsStr&lt;/code>s, unpaired surrogate codepoints are escaped
with the lowercase format instead of the uppercase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34544">When formatting strings, if &amp;ldquo;precision&amp;rdquo; is specified, the &amp;ldquo;fill&amp;rdquo;,
&amp;ldquo;align&amp;rdquo; and &amp;ldquo;width&amp;rdquo; specifiers are no longer ignored&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34485">The &lt;code>Debug&lt;/code> impl for strings no longer escapes all non-ASCII characters&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.11.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.11.0/</guid><description>&lt;h1 id="1110">
 1.11.0
 &lt;a class="anchor" href="#1110">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>18 August, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>1 July, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34216">Support nested &lt;code>cfg_attr&lt;/code> attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34436">Allow statement-generating braced macro invocations at the end of blocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34213">Macros can be expanded inside of trait definitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34032">&lt;code>#[macro_use]&lt;/code> works properly when it is itself expanded from a macro&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append">&lt;code>BinaryHeap::append&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append">&lt;code>BTreeMap::append&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off">&lt;code>BTreeMap::split_off&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append">&lt;code>BTreeSet::append&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off">&lt;code>BTreeSet::split_off&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees">&lt;code>f32::to_degrees&lt;/code>&lt;/a>
(in libcore - previously stabilized in libstd)&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians">&lt;code>f32::to_radians&lt;/code>&lt;/a>
(in libcore - previously stabilized in libstd)&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees">&lt;code>f64::to_degrees&lt;/code>&lt;/a>
(in libcore - previously stabilized in libstd)&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians">&lt;code>f64::to_radians&lt;/code>&lt;/a>
(in libcore - previously stabilized in libstd)&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum">&lt;code>Iterator::sum&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.product">&lt;code>Iterator::product&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut">&lt;code>Cell::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut">&lt;code>RefCell::get_mut&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34077">The &lt;code>thread_local!&lt;/code> macro supports multiple definitions in a single
invocation, and can apply attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34305">&lt;code>Cow&lt;/code> implements &lt;code>Default&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34190">&lt;code>Wrapping&lt;/code> implements binary, octal, lower-hex and upper-hex
&lt;code>Display&lt;/code> formatting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34180">The range types implement &lt;code>Hash&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34067">&lt;code>lookup_host&lt;/code> ignores unknown address types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33976">&lt;code>assert_eq!&lt;/code> accepts a custom error message, like &lt;code>assert!&lt;/code> does&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33803">The main thread is now called &amp;ldquo;main&amp;rdquo; instead of &amp;ldquo;&amp;lt;main&amp;gt;&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2821">Disallow specifying features of transitive deps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2804">Add color support for Windows consoles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2795">Fix &lt;code>harness = false&lt;/code> on &lt;code>[lib]&lt;/code> sections&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2787">Don&amp;rsquo;t panic when &lt;code>links&lt;/code> contains a &amp;lsquo;.&amp;rsquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2630">Build scripts can emit warnings&lt;/a>,
and &lt;code>-vv&lt;/code> prints warnings for all crates.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2720">Ignore file locks on OS X NFS mounts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2668">Don&amp;rsquo;t warn about &lt;code>package.metadata&lt;/code> keys&lt;/a>.
This provides room for expansion by arbitrary tools.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2741">Add support for cdylib crate types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2781">Prevent publishing crates when files are dirty&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2704">Don&amp;rsquo;t fetch all crates on clean&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2779">Propagate &amp;ndash;color option to rustc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2780">Fix &lt;code>cargo doc --open&lt;/code> on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2772">Improve autocompletion&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2739">Configure colors of stderr as well as stdout&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="performance">
 Performance
 &lt;a class="anchor" href="#performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33816">Caching projections speeds up type check dramatically for some
workloads&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33940">The default &lt;code>HashMap&lt;/code> hasher is SipHash 1-3 instead of SipHash 2-4&lt;/a>
This hasher is faster, but is believed to provide sufficient
protection from collision attacks.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33891">Comparison of &lt;code>Ipv4Addr&lt;/code> is 10x faster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="rustdoc">
 Rustdoc
 &lt;a class="anchor" href="#rustdoc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34536">Fix empty implementation section on some module pages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34479">Fix inlined renamed re-exports in import lists&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34477">Fix search result layout for enum variants and struct fields&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34387">Fix issues with source links to external crates&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34245">Fix redirect pages for renamed re-exports&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tooling">
 Tooling
 &lt;a class="anchor" href="#tooling">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34492">rustc is better at finding the MSVC toolchain&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33909">When emitting debug info, rustc emits frame pointers for closures,
shims and glue, as it does for all other functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34646">rust-lldb warns about unsupported versions of LLDB&lt;/a>&lt;/li>
&lt;li>Many more errors have been given error codes and extended
explanations&lt;/li>
&lt;li>API documentation continues to be improved, with many new examples&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34542">rustc no longer hangs when dependencies recursively re-export
submodules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34104">rustc requires LLVM 3.7+&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33895">The &amp;lsquo;How Safe and Unsafe Interact&amp;rsquo; chapter of The Rustonomicon was
rewritten&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33460">rustc support 16-bit pointer sizes&lt;/a>.
No targets use this yet, but it works toward AVR support.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/34443">&lt;code>const&lt;/code>s and &lt;code>static&lt;/code>s may not have unsized types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33982">The new follow-set rules that place restrictions on &lt;code>macro_rules!&lt;/code>
in order to ensure syntax forward-compatibility have been enabled&lt;/a>
This was an &lt;a href="https://github.com/rust-lang/rfcs/pull/1384">amendment to RFC 550&lt;/a>,
and has been a warning since 1.10.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33706">&lt;code>cfg&lt;/code> attribute process has been refactored to fix various bugs&lt;/a>.
This causes breakage in some corner cases.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.10.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.10.0/</guid><description>&lt;h1 id="1100">
 1.10.0
 &lt;a class="anchor" href="#1100">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 July, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>20 May, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33420">&lt;code>Copy&lt;/code> types are required to have a trivial implementation of &lt;code>Clone&lt;/code>&lt;/a>.
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md">RFC 1521&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33355">Single-variant enums support the &lt;code>#[repr(..)]&lt;/code> attribute&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32908">Fix &lt;code>#[derive(RustcEncodable)]&lt;/code> in the presence of other &lt;code>encode&lt;/code> methods&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32900">&lt;code>panic!&lt;/code> can be converted to a runtime abort with the
&lt;code>-C panic=abort&lt;/code> flag&lt;/a>.
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md">RFC 1513&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33553">Add a new crate type, &amp;lsquo;cdylib&amp;rsquo;&lt;/a>.
cdylibs are dynamic libraries suitable for loading by non-Rust hosts.
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1510-cdylib.md">RFC 1510&lt;/a>.
Note that Cargo does not yet directly support cdylibs.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>os::windows::fs::OpenOptionsExt::access_mode&lt;/code>&lt;/li>
&lt;li>&lt;code>os::windows::fs::OpenOptionsExt::share_mode&lt;/code>&lt;/li>
&lt;li>&lt;code>os::windows::fs::OpenOptionsExt::custom_flags&lt;/code>&lt;/li>
&lt;li>&lt;code>os::windows::fs::OpenOptionsExt::attributes&lt;/code>&lt;/li>
&lt;li>&lt;code>os::windows::fs::OpenOptionsExt::security_qos_flags&lt;/code>&lt;/li>
&lt;li>&lt;code>os::unix::fs::OpenOptionsExt::custom_flags&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new">&lt;code>sync::Weak::new&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>Default for sync::Weak&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/fn.set_hook.html">&lt;code>panic::set_hook&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/fn.take_hook.html">&lt;code>panic::take_hook&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.PanicInfo.html">&lt;code>panic::PanicInfo&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload">&lt;code>panic::PanicInfo::payload&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location">&lt;code>panic::PanicInfo::location&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.Location.html">&lt;code>panic::Location&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.Location.html#method.file">&lt;code>panic::Location::file&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/panic/struct.Location.html#method.line">&lt;code>panic::Location::line&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul">&lt;code>ffi::CStr::from_bytes_with_nul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked">&lt;code>ffi::CStr::from_bytes_with_nul_unchecked&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html">&lt;code>ffi::FromBytesWithNulError&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified">&lt;code>fs::Metadata::modified&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed">&lt;code>fs::Metadata::accessed&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created">&lt;code>fs::Metadata::created&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange&lt;/code>&lt;/li>
&lt;li>&lt;code>sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak&lt;/code>&lt;/li>
&lt;li>&lt;code>collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key&lt;/code>&lt;/li>
&lt;li>&lt;code>os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed">&lt;code>SocketAddr::is_unnamed&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname">&lt;code>SocketAddr::as_pathname&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect">&lt;code>UnixStream::connect&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair">&lt;code>UnixStream::pair&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone">&lt;code>UnixStream::try_clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr">&lt;code>UnixStream::local_addr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr">&lt;code>UnixStream::peer_addr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout">&lt;code>UnixStream::set_read_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout">&lt;code>UnixStream::set_write_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout">&lt;code>UnixStream::read_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout">&lt;code>UnixStream::write_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking">&lt;code>UnixStream::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error">&lt;code>UnixStream::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown">&lt;code>UnixStream::shutdown&lt;/code>&lt;/a>&lt;/li>
&lt;li>Read/Write/RawFd impls for &lt;code>UnixStream&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind">&lt;code>UnixListener::bind&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept">&lt;code>UnixListener::accept&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone">&lt;code>UnixListener::try_clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr">&lt;code>UnixListener::local_addr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking">&lt;code>UnixListener::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error">&lt;code>UnixListener::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming">&lt;code>UnixListener::incoming&lt;/code>&lt;/a>&lt;/li>
&lt;li>RawFd impls for &lt;code>UnixListener&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind">&lt;code>UnixDatagram::bind&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound">&lt;code>UnixDatagram::unbound&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair">&lt;code>UnixDatagram::pair&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect">&lt;code>UnixDatagram::connect&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone">&lt;code>UnixDatagram::try_clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr">&lt;code>UnixDatagram::local_addr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr">&lt;code>UnixDatagram::peer_addr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from">&lt;code>UnixDatagram::recv_from&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv">&lt;code>UnixDatagram::recv&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to">&lt;code>UnixDatagram::send_to&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send">&lt;code>UnixDatagram::send&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout">&lt;code>UnixDatagram::set_read_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout">&lt;code>UnixDatagram::set_write_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout">&lt;code>UnixDatagram::read_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout">&lt;code>UnixDatagram::write_timeout&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking">&lt;code>UnixDatagram::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error">&lt;code>UnixDatagram::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown">&lt;code>UnixDatagram::shutdown&lt;/code>&lt;/a>&lt;/li>
&lt;li>RawFd impls for &lt;code>UnixDatagram&lt;/code>&lt;/li>
&lt;li>&lt;code>{BTree,Hash}Map::values_mut&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/std/primitive.slice.html#method.binary_search_by_key">&lt;code>&amp;lt;[_]&amp;gt;::binary_search_by_key&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33664">The &lt;code>abs_sub&lt;/code> method of floats is deprecated&lt;/a>.
The semantics of this minor method are subtle and probably not what
most people want.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33306">Add implementation of Ord for Cell&lt;!-- raw HTML omitted --> and RefCell&lt;!-- raw HTML omitted --> where T: Ord&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33086">On Linux, if &lt;code>HashMap&lt;/code>s can&amp;rsquo;t be initialized with &lt;code>getrandom&lt;/code> they
will fall back to &lt;code>/dev/urandom&lt;/code> temporarily to avoid blocking
during early boot&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33067">Implemented negation for wrapping numerals&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33050">Implement &lt;code>Clone&lt;/code> for &lt;code>binary_heap::IntoIter&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33023">Implement &lt;code>Display&lt;/code> and &lt;code>Hash&lt;/code> for &lt;code>std::num::Wrapping&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32990">Add &lt;code>Default&lt;/code> implementation for &lt;code>&amp;amp;CStr&lt;/code>, &lt;code>CString&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32866">Implement &lt;code>From&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code> and &lt;code>Into&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code> for &lt;code>VecDeque&amp;lt;T&amp;gt;&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32785">Implement &lt;code>Default&lt;/code> for &lt;code>UnsafeCell&lt;/code>, &lt;code>fmt::Error&lt;/code>, &lt;code>Condvar&lt;/code>,
&lt;code>Mutex&lt;/code>, &lt;code>RwLock&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2687">Cargo.toml supports the &lt;code>profile.*.panic&lt;/code> option&lt;/a>.
This controls the runtime behavior of the &lt;code>panic!&lt;/code> macro
and can be either &amp;ldquo;unwind&amp;rdquo; (the default), or &amp;ldquo;abort&amp;rdquo;.
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md">RFC 1513&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2723">Don&amp;rsquo;t throw away errors with &lt;code>-p&lt;/code> arguments&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2693">Report status to stderr instead of stdout&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2710">Build scripts are passed a &lt;code>CARGO_MANIFEST_LINKS&lt;/code> environment
variable that corresponds to the &lt;code>links&lt;/code> field of the manifest&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2707">Ban keywords from crate names&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2604">Canonicalize &lt;code>CARGO_HOME&lt;/code> on Windows&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2396">Retry network requests&lt;/a>.
By default they are retried twice, which can be customized with the
&lt;code>net.retry&lt;/code> value in &lt;code>.cargo/config&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2674">Don&amp;rsquo;t print extra error info for failing subcommands&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2405">Add &lt;code>--force&lt;/code> flag to &lt;code>cargo install&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2623">Don&amp;rsquo;t use &lt;code>flock&lt;/code> on NFS mounts&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2610">Prefer building &lt;code>cargo install&lt;/code> artifacts in temporary directories&lt;/a>.
Makes it possible to install multiple crates in parallel.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2578">Add &lt;code>cargo test --doc&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2551">Add &lt;code>cargo --explain&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2576">Don&amp;rsquo;t print warnings when &lt;code>-q&lt;/code> is passed&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2577">Add &lt;code>cargo doc --lib&lt;/code> and &lt;code>--bin&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2560">Don&amp;rsquo;t require build script output to be UTF-8&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2584">Correctly attempt multiple git usernames&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="performance">
 Performance
 &lt;a class="anchor" href="#performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33425">rustc memory usage was reduced by refactoring the context used for
type checking&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33318">Speed up creation of &lt;code>HashMap&lt;/code>s by caching the random keys used
to initialize the hash state&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33289">The &lt;code>find&lt;/code> implementation for &lt;code>Chain&lt;/code> iterators is 2x faster&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33138">Trait selection optimizations speed up type checking by 15%&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33098">Efficient trie lookup for boolean Unicode properties&lt;/a>.
10x faster than the previous lookup tables.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31414">Special case &lt;code>#[derive(Copy, Clone)]&lt;/code> to avoid bloat&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="usability">
 Usability
 &lt;a class="anchor" href="#usability">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Many incremental improvements to documentation and rustdoc.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33514">rustdoc: List blanket trait impls&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33151">rustdoc: Clean up ABI rendering&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33401">Indexing with the wrong type produces a more informative error&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33406">Improve diagnostics for constants being used in irrefutable patterns&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33338">When many method candidates are in scope limit the suggestions to 10&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33325">Remove confusing suggestion when calling a &lt;code>fn&lt;/code> type&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33319">Do not suggest changing &lt;code>&amp;amp;mut self&lt;/code> to &lt;code>&amp;amp;mut mut self&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33651">Update i686-linux-android features to match Android ABI&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33500">Update aarch64-linux-android features to match Android ABI&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33554">&lt;code>std&lt;/code> no longer prints backtraces on platforms where the running
module must be loaded with &lt;code>env::current_exe&lt;/code>, which can&amp;rsquo;t be relied
on&lt;/a>.&lt;/li>
&lt;li>This release includes std binaries for the i586-unknown-linux-gnu,
i686-unknown-linux-musl, and armv7-linux-androideabi targets. The
i586 target is for old x86 hardware without SSE2, and the armv7
target is for Android running on modern ARM architectures.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32835">The &lt;code>rust-gdb&lt;/code> and &lt;code>rust-lldb&lt;/code> scripts are distributed on all
Unix platforms&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31457">On Unix the runtime aborts by calling &lt;code>libc::abort&lt;/code> instead of
generating an illegal instruction&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32942">Rust is now bootstrapped from the previous release of Rust,
instead of a snapshot from an arbitrary commit&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33579">&lt;code>AtomicBool&lt;/code> is now bool-sized, not word-sized&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33403">&lt;code>target_env&lt;/code> for Linux ARM targets is just &lt;code>gnu&lt;/code>, not
&lt;code>gnueabihf&lt;/code>, &lt;code>gnueabi&lt;/code>, etc&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/33072">Consistently panic on overflow in &lt;code>Duration::new&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32977">Change &lt;code>String::truncate&lt;/code> to panic less&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32945">Add &lt;code>:block&lt;/code> to the follow set for &lt;code>:ty&lt;/code> and &lt;code>:path&lt;/code>&lt;/a>.
Affects how macros are parsed.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32923">Fix macro hygiene bug&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32791">Feature-gated attributes on macro-generated macro invocations are
now rejected&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32258">Suppress fallback and ambiguity errors during type inference&lt;/a>.
This caused some minor changes to type inference.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.9.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.9.0/</guid><description>&lt;h1 id="190">
 1.9.0
 &lt;a class="anchor" href="#190">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>26 May, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>8 April, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>#[deprecated]&lt;/code> attribute when applied to an API will generate
warnings when used. The warnings may be suppressed with
&lt;code>#[allow(deprecated)]&lt;/code>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md">RFC 1270&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31710">&lt;code>fn&lt;/code> item types are zero sized, and each &lt;code>fn&lt;/code> names a unique
type&lt;/a>. This will break code that transmutes &lt;code>fn&lt;/code>s, so calling
&lt;code>transmute&lt;/code> on a &lt;code>fn&lt;/code> type will generate a warning for a few cycles,
then will be converted to an error.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31938">Field and method resolution understand visibility, so private
fields and methods cannot prevent the proper use of public fields
and methods&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29734">The parser considers unicode codepoints in the
&lt;code>PATTERN_WHITE_SPACE&lt;/code> category to be whitespace&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="stabilized-apis">
 Stabilized APIs
 &lt;a class="anchor" href="#stabilized-apis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/panic/index.html">&lt;code>std::panic&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/panic/fn.catch_unwind.html">&lt;code>std::panic::catch_unwind&lt;/code>&lt;/a> (renamed from &lt;code>recover&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/panic/fn.resume_unwind.html">&lt;code>std::panic::resume_unwind&lt;/code>&lt;/a> (renamed from &lt;code>propagate&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/panic/struct.AssertUnwindSafe.html">&lt;code>std::panic::AssertUnwindSafe&lt;/code>&lt;/a> (renamed from &lt;code>AssertRecoverSafe&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html">&lt;code>std::panic::UnwindSafe&lt;/code>&lt;/a> (renamed from &lt;code>RecoverSafe&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.is_char_boundary">&lt;code>str::is_char_boundary&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref">&lt;code>&amp;lt;*const T&amp;gt;::as_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref">&lt;code>&amp;lt;*mut T&amp;gt;::as_ref&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_mut">&lt;code>&amp;lt;*mut T&amp;gt;::as_mut&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase">&lt;code>AsciiExt::make_ascii_uppercase&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase">&lt;code>AsciiExt::make_ascii_lowercase&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/char/fn.decode_utf16.html">&lt;code>char::decode_utf16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16.html">&lt;code>char::DecodeUtf16&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html">&lt;code>char::DecodeUtf16Error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html#method.unpaired_surrogate">&lt;code>char::DecodeUtf16Error::unpaired_surrogate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.take">&lt;code>BTreeSet::take&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.replace">&lt;code>BTreeSet::replace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.get">&lt;code>BTreeSet::get&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.take">&lt;code>HashSet::take&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.replace">&lt;code>HashSet::replace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.get">&lt;code>HashSet::get&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.with_capacity">&lt;code>OsString::with_capacity&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.clear">&lt;code>OsString::clear&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.capacity">&lt;code>OsString::capacity&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve">&lt;code>OsString::reserve&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve_exact">&lt;code>OsString::reserve_exact&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.is_empty">&lt;code>OsStr::is_empty&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.len">&lt;code>OsStr::len&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/thread/index.html">&lt;code>std::os::unix::thread&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/thread/type.RawPthread.html">&lt;code>RawPthread&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html">&lt;code>JoinHandleExt&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.as_pthread_t">&lt;code>JoinHandleExt::as_pthread_t&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t">&lt;code>JoinHandleExt::into_pthread_t&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.hasher">&lt;code>HashSet::hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.hasher">&lt;code>HashMap::hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/process/trait.CommandExt.html#tymethod.exec">&lt;code>CommandExt::exec&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.File.html#method.try_clone">&lt;code>File::try_clone&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_ip">&lt;code>SocketAddr::set_ip&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_port">&lt;code>SocketAddr::set_port&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_ip">&lt;code>SocketAddrV4::set_ip&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_port">&lt;code>SocketAddrV4::set_port&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_ip">&lt;code>SocketAddrV6::set_ip&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_port">&lt;code>SocketAddrV6::set_port&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_flowinfo">&lt;code>SocketAddrV6::set_flowinfo&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_scope_id">&lt;code>SocketAddrV6::set_scope_id&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice">&lt;code>slice::copy_from_slice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ptr/fn.read_volatile.html">&lt;code>ptr::read_volatile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ptr/fn.write_volatile.html">&lt;code>ptr::write_volatile&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.OpenOptions.html#method.create_new">&lt;code>OpenOptions::create_new&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nodelay">&lt;code>TcpStream::set_nodelay&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.nodelay">&lt;code>TcpStream::nodelay&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl">&lt;code>TcpStream::set_ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl">&lt;code>TcpStream::ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6">&lt;code>TcpStream::set_only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6">&lt;code>TcpStream::only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error">&lt;code>TcpStream::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking">&lt;code>TcpStream::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl">&lt;code>TcpListener::set_ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl">&lt;code>TcpListener::ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6">&lt;code>TcpListener::set_only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6">&lt;code>TcpListener::only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error">&lt;code>TcpListener::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking">&lt;code>TcpListener::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_broadcast">&lt;code>UdpSocket::set_broadcast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.broadcast">&lt;code>UdpSocket::broadcast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v4">&lt;code>UdpSocket::set_multicast_loop_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v4">&lt;code>UdpSocket::multicast_loop_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v4">&lt;code>UdpSocket::set_multicast_ttl_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v4">&lt;code>UdpSocket::multicast_ttl_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v6">&lt;code>UdpSocket::set_multicast_loop_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v6">&lt;code>UdpSocket::multicast_loop_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v6">&lt;code>UdpSocket::set_multicast_ttl_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v6">&lt;code>UdpSocket::multicast_ttl_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_ttl">&lt;code>UdpSocket::set_ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.ttl">&lt;code>UdpSocket::ttl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_only_v6">&lt;code>UdpSocket::set_only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.only_v6">&lt;code>UdpSocket::only_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v4">&lt;code>UdpSocket::join_multicast_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v6">&lt;code>UdpSocket::join_multicast_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v4">&lt;code>UdpSocket::leave_multicast_v4&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v6">&lt;code>UdpSocket::leave_multicast_v6&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.take_error">&lt;code>UdpSocket::take_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.connect">&lt;code>UdpSocket::connect&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.send">&lt;code>UdpSocket::send&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.recv">&lt;code>UdpSocket::recv&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_nonblocking">&lt;code>UdpSocket::set_nonblocking&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32325">&lt;code>std::sync::Once&lt;/code> is poisoned if its initialization function
fails&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32652">&lt;code>cell::Ref&lt;/code> and &lt;code>cell::RefMut&lt;/code> can contain unsized types&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32054">Most types implement &lt;code>fmt::Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32695">The default buffer size used by &lt;code>BufReader&lt;/code> and &lt;code>BufWriter&lt;/code> was
reduced to 8K, from 64K&lt;/a>. This is in line with the buffer size
used by other languages.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32448">&lt;code>Instant&lt;/code>, &lt;code>SystemTime&lt;/code> and &lt;code>Duration&lt;/code> implement &lt;code>+=&lt;/code> and &lt;code>-=&lt;/code>.
&lt;code>Duration&lt;/code> additionally implements &lt;code>*=&lt;/code> and &lt;code>/=&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31700">&lt;code>Skip&lt;/code> is a &lt;code>DoubleEndedIterator&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32050">&lt;code>From&amp;lt;[u8; 4]&amp;gt;&lt;/code> is implemented for &lt;code>Ipv4Addr&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32541">&lt;code>Chain&lt;/code> implements &lt;code>BufRead&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32635">&lt;code>HashMap&lt;/code>, &lt;code>HashSet&lt;/code> and iterators are covariant&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2486">Cargo can now run concurrently&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2385">Top-level overrides allow specific revisions of crates to be
overridden through the entire crate graph&lt;/a>. This is intended
to make upgrades easier for large projects, by allowing crates to be
forked temporarily until they&amp;rsquo;ve been upgraded and republished.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2465">Cargo exports a &lt;code>CARGO_PKG_AUTHORS&lt;/code> environment variable&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2241">Cargo will pass the contents of the &lt;code>RUSTFLAGS&lt;/code> variable to &lt;code>rustc&lt;/code>
on the commandline&lt;/a>. &lt;code>rustc&lt;/code> arguments can also be specified
in the &lt;code>build.rustflags&lt;/code> configuration key.&lt;/li>
&lt;/ul>
&lt;h2 id="performance">
 Performance
 &lt;a class="anchor" href="#performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32062">The time complexity of comparing variables for equivalence during type
unification is reduced from &lt;em>O&lt;/em>(&lt;em>n&lt;/em>!) to &lt;em>O&lt;/em>(&lt;em>n&lt;/em>)&lt;/a>. This leads
to major compilation time improvement in some scenarios.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32586">&lt;code>ToString&lt;/code> is specialized for &lt;code>str&lt;/code>, giving it the same performance
as &lt;code>to_owned&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31618">Spawning processes with &lt;code>Command::output&lt;/code> no longer creates extra
threads&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31977">&lt;code>#[derive(PartialEq)]&lt;/code> and &lt;code>#[derive(PartialOrd)]&lt;/code> emit less code
for C-like enums&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31887">Passing the &lt;code>--quiet&lt;/code> flag to a test runner will produce
much-abbreviated output&lt;/a>.&lt;/li>
&lt;li>The Rust Project now publishes std binaries for the
&lt;code>mips-unknown-linux-musl&lt;/code>, &lt;code>mipsel-unknown-linux-musl&lt;/code>, and
&lt;code>i586-pc-windows-msvc&lt;/code> targets.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/32325">&lt;code>std::sync::Once&lt;/code> is poisoned if its initialization function
fails&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31925">It is illegal to define methods with the same name in overlapping
inherent &lt;code>impl&lt;/code> blocks&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31710">&lt;code>fn&lt;/code> item types are zero sized, and each &lt;code>fn&lt;/code> names a unique
type&lt;/a>. This will break code that transmutes &lt;code>fn&lt;/code>s, so calling
&lt;code>transmute&lt;/code> on a &lt;code>fn&lt;/code> type will generate a warning for a few cycles,
then will be converted to an error.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30587">Improvements to const evaluation may trigger new errors when integer
literals are out of range&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.8.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.8.0/</guid><description>&lt;h1 id="180">
 1.8.0
 &lt;a class="anchor" href="#180">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>14 April, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>26 February, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Rust supports overloading of compound assignment statements like
&lt;code>+=&lt;/code> by implementing the &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.AddAssign.html">&lt;code>AddAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.SubAssign.html">&lt;code>SubAssign&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.MulAssign.html">&lt;code>MulAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.DivAssign.html">&lt;code>DivAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.RemAssign.html">&lt;code>RemAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitAndAssign.html">&lt;code>BitAndAssign&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitOrAssign.html">&lt;code>BitOrAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitXorAssign.html">&lt;code>BitXorAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.ShlAssign.html">&lt;code>ShlAssign&lt;/code>&lt;/a>, or &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.ShrAssign.html">&lt;code>ShrAssign&lt;/code>&lt;/a>
traits. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0953-op-assign.md">RFC 953&lt;/a>.&lt;/li>
&lt;li>Empty structs can be defined with braces, as in &lt;code>struct Foo { }&lt;/code>, in
addition to the non-braced form, &lt;code>struct Foo;&lt;/code>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0218-empty-struct-with-braces.md">RFC 218&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Stabilized APIs:
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.encode_utf16">&lt;code>str::encode_utf16&lt;/code>&lt;/a> (renamed from &lt;code>utf16_units&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/str/struct.EncodeUtf16.html">&lt;code>str::EncodeUtf16&lt;/code>&lt;/a> (renamed from &lt;code>Utf16Units&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/cell/struct.Ref.html#method.map">&lt;code>Ref::map&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/cell/struct.RefMut.html#method.map">&lt;code>RefMut::map&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ptr/fn.drop_in_place.html">&lt;code>ptr::drop_in_place&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Instant.html">&lt;code>time::Instant&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html">&lt;code>time::SystemTime&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.now">&lt;code>Instant::now&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.duration_since">&lt;code>Instant::duration_since&lt;/code>&lt;/a> (renamed from &lt;code>duration_from_earlier&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.elapsed">&lt;code>Instant::elapsed&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.now">&lt;code>SystemTime::now&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.duration_since">&lt;code>SystemTime::duration_since&lt;/code>&lt;/a> (renamed from &lt;code>duration_from_earlier&lt;/code>)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.elapsed">&lt;code>SystemTime::elapsed&lt;/code>&lt;/a>&lt;/li>
&lt;li>Various &lt;code>Add&lt;/code>/&lt;code>Sub&lt;/code> impls for &lt;code>Time&lt;/code> and &lt;code>SystemTime&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html">&lt;code>SystemTimeError&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html#method.duration">&lt;code>SystemTimeError::duration&lt;/code>&lt;/a>&lt;/li>
&lt;li>Various impls for &lt;code>SystemTimeError&lt;/code>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/time/constant.UNIX_EPOCH.html">&lt;code>UNIX_EPOCH&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.AddAssign.html">&lt;code>AddAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.SubAssign.html">&lt;code>SubAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.MulAssign.html">&lt;code>MulAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.DivAssign.html">&lt;code>DivAssign&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.RemAssign.html">&lt;code>RemAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitAndAssign.html">&lt;code>BitAndAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitOrAssign.html">&lt;code>BitOrAssign&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.BitXorAssign.html">&lt;code>BitXorAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.ShlAssign.html">&lt;code>ShlAssign&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.ShrAssign.html">&lt;code>ShrAssign&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31904">The &lt;code>write!&lt;/code> and &lt;code>writeln!&lt;/code> macros correctly emit errors if any of
their arguments can&amp;rsquo;t be formatted&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31668">Various I/O functions support large files on 32-bit Linux&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31551">The Unix-specific &lt;code>raw&lt;/code> modules, which contain a number of
redefined C types are deprecated&lt;/a>, including &lt;code>os::raw::unix&lt;/code>,
&lt;code>os::raw::macos&lt;/code>, and &lt;code>os::raw::linux&lt;/code>. These modules defined types
such as &lt;code>ino_t&lt;/code> and &lt;code>dev_t&lt;/code>. The inconsistency of these definitions
across platforms was making it difficult to implement &lt;code>std&lt;/code>
correctly. Those that need these definitions should use the &lt;code>libc&lt;/code>
crate. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md">RFC 1415&lt;/a>.&lt;/li>
&lt;li>The Unix-specific &lt;code>MetadataExt&lt;/code> traits, including
&lt;code>os::unix::fs::MetadataExt&lt;/code>, which expose values such as inode
numbers &lt;a href="https://github.com/rust-lang/rust/pull/31551">no longer return platform-specific types&lt;/a>, but
instead return widened integers. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md">RFC 1415&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30998">&lt;code>btree_set::{IntoIter, Iter, Range}&lt;/code> are covariant&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30962">Atomic loads and stores are not volatile&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30894">All types in &lt;code>sync::mpsc&lt;/code> implement &lt;code>fmt::Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="performance">
 Performance
 &lt;a class="anchor" href="#performance">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31460">Inlining hash functions lead to a 3% compile-time improvement in
some workloads&lt;/a>.&lt;/li>
&lt;li>When using jemalloc, its symbols are &lt;a href="https://github.com/rust-lang/rust/pull/31460">unprefixed so that it
overrides the libc malloc implementation&lt;/a>. This means that for
rustc, LLVM is now using jemalloc, which results in a 6%
compile-time improvement on a specific workload.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31390">Avoid quadratic growth in function size due to cleanups&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30448">32-bit MSVC builds finally implement unwinding&lt;/a>.
i686-pc-windows-msvc is now considered a tier-1 platform.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31358">The &lt;code>--print targets&lt;/code> flag prints a list of supported targets&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31278">The &lt;code>--print cfg&lt;/code> flag prints the &lt;code>cfg&lt;/code>s defined for the current
target&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31123">&lt;code>rustc&lt;/code> can be built with an new Cargo-based build system, written
in Rust&lt;/a>. It will eventually replace Rust&amp;rsquo;s Makefile-based
build system. To enable it configure with &lt;code>configure --rustbuild&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31020">Errors for non-exhaustive &lt;code>match&lt;/code> patterns now list up to 3 missing
variants while also indicating the total number of missing variants
if more than 3&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30859">Executable stacks are disabled on Linux and BSD&lt;/a>.&lt;/li>
&lt;li>The Rust Project now publishes binary releases of the standard
library for a number of tier-2 targets:
&lt;code>armv7-unknown-linux-gnueabihf&lt;/code>, &lt;code>powerpc-unknown-linux-gnu&lt;/code>,
&lt;code>powerpc64-unknown-linux-gnu&lt;/code>, &lt;code>powerpc64le-unknown-linux-gnu&lt;/code>
&lt;code>x86_64-rumprun-netbsd&lt;/code>. These can be installed with
tools such as &lt;a href="https://users.rust-lang.org/t/multirust-0-8-with-cross-std-installation/4901">multirust&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2081">&lt;code>cargo init&lt;/code> creates a new Cargo project in the current
directory&lt;/a>. It is otherwise like &lt;code>cargo new&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2397">Cargo has configuration keys for &lt;code>-v&lt;/code> and
&lt;code>--color&lt;/code>&lt;/a>. &lt;code>verbose&lt;/code> and &lt;code>color&lt;/code>, respectively, go in the
&lt;code>[term]&lt;/code> section of &lt;code>.cargo/config&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2398">Configuration keys that evaluate to strings or integers can be set
via environment variables&lt;/a>. For example the &lt;code>build.jobs&lt;/code> key
can be set via &lt;code>CARGO_BUILD_JOBS&lt;/code>. Environment variables take
precedence over config files.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2328">Target-specific dependencies support Rust &lt;code>cfg&lt;/code> syntax for
describing targets&lt;/a> so that dependencies for multiple
targets can be specified together. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1361-cargo-cfg-dependencies.md">RFC 1361&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/issues/2365">The environment variables &lt;code>CARGO_TARGET_ROOT&lt;/code>, &lt;code>RUSTC&lt;/code>, and
&lt;code>RUSTDOC&lt;/code> take precedence over the &lt;code>build.target-dir&lt;/code>,
&lt;code>build.rustc&lt;/code>, and &lt;code>build.rustdoc&lt;/code> configuration values&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2370">The child process tree is killed on Windows when Cargo is
killed&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2335">The &lt;code>build.target&lt;/code> configuration value sets the target platform,
like &lt;code>--target&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31793">Unstable compiler flags have been further restricted&lt;/a>. Since
1.0 &lt;code>-Z&lt;/code> flags have been considered unstable, and other flags that
were considered unstable additionally required passing &lt;code>-Z unstable-options&lt;/code> to access. Unlike unstable language and library
features though, these options have been accessible on the stable
release channel. Going forward, &lt;em>new unstable flags will not be
available on the stable release channel&lt;/em>, and old unstable flags
will warn about their usage. In the future, all unstable flags will
be unavailable on the stable release channel.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31757">It is no longer possible to &lt;code>match&lt;/code> on empty enum variants using
the &lt;code>Variant(..)&lt;/code> syntax&lt;/a>. This has been a warning since 1.6.&lt;/li>
&lt;li>The Unix-specific &lt;code>MetadataExt&lt;/code> traits, including
&lt;code>os::unix::fs::MetadataExt&lt;/code>, which expose values such as inode
numbers &lt;a href="https://github.com/rust-lang/rust/pull/31551">no longer return platform-specific types&lt;/a>, but
instead return widened integers. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md">RFC 1415&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31534">Modules sourced from the filesystem cannot appear within arbitrary
blocks, but only within other modules&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31530">&lt;code>--cfg&lt;/code> compiler flags are parsed strictly as identifiers&lt;/a>.&lt;/li>
&lt;li>On Unix, &lt;a href="https://github.com/rust-lang/rust/pull/31333">stack overflow triggers a runtime abort instead of a
SIGSEGV&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/31056">&lt;code>Command::spawn&lt;/code> and its equivalents return an error if any of
its command-line arguments contain interior &lt;code>NUL&lt;/code>s&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30882">Tuple and unit enum variants from other crates are in the type
namespace&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29520">On Windows &lt;code>rustc&lt;/code> emits &lt;code>.lib&lt;/code> files for the &lt;code>staticlib&lt;/code> library
type instead of &lt;code>.a&lt;/code> files&lt;/a>. Additionally, for the MSVC
toolchain, &lt;code>rustc&lt;/code> emits import libraries named &lt;code>foo.dll.lib&lt;/code>
instead of &lt;code>foo.lib&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.7.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.7.0/</guid><description>&lt;h1 id="170">
 1.7.0
 &lt;a class="anchor" href="#170">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>3 March, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>15 January, 2016&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Stabilized APIs
&lt;ul>
&lt;li>&lt;code>Path&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.strip_prefix">&lt;code>Path::strip_prefix&lt;/code>&lt;/a> (renamed from relative_from)&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.StripPrefixError.html">&lt;code>path::StripPrefixError&lt;/code>&lt;/a> (new error type returned from strip_prefix)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Ipv4Addr&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_loopback">&lt;code>Ipv4Addr::is_loopback&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_private">&lt;code>Ipv4Addr::is_private&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_link_local">&lt;code>Ipv4Addr::is_link_local&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_multicast">&lt;code>Ipv4Addr::is_multicast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_broadcast">&lt;code>Ipv4Addr::is_broadcast&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_documentation">&lt;code>Ipv4Addr::is_documentation&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Ipv6Addr&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_unspecified">&lt;code>Ipv6Addr::is_unspecified&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_loopback">&lt;code>Ipv6Addr::is_loopback&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_multicast">&lt;code>Ipv6Addr::is_multicast&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Vec&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_slice">&lt;code>Vec::as_slice&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_mut_slice">&lt;code>Vec::as_mut_slice&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>String&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_str">&lt;code>String::as_str&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_mut_str">&lt;code>String::as_mut_str&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Slices
&lt;ul>
&lt;li>&lt;code>&amp;lt;[T]&amp;gt;::&lt;/code>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice">&lt;code>clone_from_slice&lt;/code>&lt;/a>, which now requires the two slices to
be the same length&lt;/li>
&lt;li>&lt;code>&amp;lt;[T]&amp;gt;::&lt;/code>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key">&lt;code>sort_by_key&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>checked, saturated, and overflowing operations
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_rem">&lt;code>i32::checked_rem&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg">&lt;code>i32::checked_neg&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shl">&lt;code>i32::checked_shl&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shr">&lt;code>i32::checked_shr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.saturating_mul">&lt;code>i32::saturating_mul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_add">&lt;code>i32::overflowing_add&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub">&lt;code>i32::overflowing_sub&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_mul">&lt;code>i32::overflowing_mul&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_div">&lt;code>i32::overflowing_div&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_rem">&lt;code>i32::overflowing_rem&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_neg">&lt;code>i32::overflowing_neg&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shl">&lt;code>i32::overflowing_shl&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shr">&lt;code>i32::overflowing_shr&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_rem">&lt;code>u32::checked_rem&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_neg">&lt;code>u32::checked_neg&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl">&lt;code>u32::checked_shl&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl">&lt;code>u32::checked_shl&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.saturating_mul">&lt;code>u32::saturating_mul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_add">&lt;code>u32::overflowing_add&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_sub">&lt;code>u32::overflowing_sub&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_mul">&lt;code>u32::overflowing_mul&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_div">&lt;code>u32::overflowing_div&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_rem">&lt;code>u32::overflowing_rem&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_neg">&lt;code>u32::overflowing_neg&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shl">&lt;code>u32::overflowing_shl&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shr">&lt;code>u32::overflowing_shr&lt;/code>&lt;/a>&lt;/li>
&lt;li>and checked, saturated, and overflowing operations for other primitive types&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FFI
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html">&lt;code>ffi::IntoStringError&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_string">&lt;code>CString::into_string&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes">&lt;code>CString::into_bytes&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes_with_nul">&lt;code>CString::into_bytes_with_nul&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>From&amp;lt;CString&amp;gt; for Vec&amp;lt;u8&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>IntoStringError&lt;/code>
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.into_cstring">&lt;code>IntoStringError::into_cstring&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.utf8_error">&lt;code>IntoStringError::utf8_error&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;code>Error for IntoStringError&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hashing
&lt;ul>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html">&lt;code>std::hash::BuildHasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.Hasher.html">&lt;code>BuildHasher::Hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html#tymethod.build_hasher">&lt;code>BuildHasher::build_hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/hash/struct.BuildHasherDefault.html">&lt;code>std::hash::BuildHasherDefault&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_hasher">&lt;code>HashMap::with_hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_capacity_and_hasher">&lt;code>HashMap::with_capacity_and_hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_hasher">&lt;code>HashSet::with_hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_capacity_and_hasher">&lt;code>HashSet::with_capacity_and_hasher&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html">&lt;code>std::collections::hash_map::RandomState&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html#method.new">&lt;code>RandomState::new&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30740">Validating UTF-8 is faster by a factor of between 7 and 14x for
ASCII input&lt;/a>. This means that creating &lt;code>String&lt;/code>s and &lt;code>str&lt;/code>s
from bytes is faster.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30381">The performance of &lt;code>LineWriter&lt;/code> (and thus &lt;code>io::stdout&lt;/code>) was
improved by using &lt;code>memchr&lt;/code> to search for newlines&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30672">&lt;code>f32::to_degrees&lt;/code> and &lt;code>f32::to_radians&lt;/code> are stable&lt;/a>. The
&lt;code>f64&lt;/code> variants were stabilized previously.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30426">&lt;code>BTreeMap&lt;/code> was rewritten to use less memory and improve the performance
of insertion and iteration, the latter by as much as 5x&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30998">&lt;code>BTreeSet&lt;/code> and its iterators, &lt;code>Iter&lt;/code>, &lt;code>IntoIter&lt;/code>, and &lt;code>Range&lt;/code> are
covariant over their contained type&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30663">&lt;code>LinkedList&lt;/code> and its iterators, &lt;code>Iter&lt;/code> and &lt;code>IntoIter&lt;/code> are covariant
over their contained type&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29498">&lt;code>str::replace&lt;/code> now accepts a &lt;code>Pattern&lt;/code>&lt;/a>, like other string
searching methods.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30928">&lt;code>Any&lt;/code> is implemented for unsized types&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30818">&lt;code>Hash&lt;/code> is implemented for &lt;code>Duration&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30372">When running tests with &lt;code>--test&lt;/code>, rustdoc will pass &lt;code>--cfg&lt;/code>
arguments to the compiler&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30353">The compiler is built with RPATH information by default&lt;/a>.
This means that it will be possible to run &lt;code>rustc&lt;/code> when installed in
unusual configurations without configuring the dynamic linker search
path explicitly.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30394">&lt;code>rustc&lt;/code> passes &lt;code>--enable-new-dtags&lt;/code> to GNU ld&lt;/a>. This makes
any RPATH entries (emitted with &lt;code>-C rpath&lt;/code>) &lt;em>not&lt;/em> take precedence
over &lt;code>LD_LIBRARY_PATH&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2224">&lt;code>cargo rustc&lt;/code> accepts a &lt;code>--profile&lt;/code> flag that runs &lt;code>rustc&lt;/code> under
any of the compilation profiles, &amp;lsquo;dev&amp;rsquo;, &amp;lsquo;bench&amp;rsquo;, or &amp;rsquo;test&amp;rsquo;&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/2279">The &lt;code>rerun-if-changed&lt;/code> build script directive no longer causes the
build script to incorrectly run twice in certain scenarios&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Soundness fixes to the interactions between associated types and
lifetimes, specified in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md">RFC 1214&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/pull/30389">now generate errors&lt;/a> for
code that violates the new rules. This is a significant change that
is known to break existing code, so it has emitted warnings for the
new error cases since 1.4 to give crate authors time to adapt. The
details of what is changing are subtle; read the RFC for more.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29973">Several bugs in the compiler&amp;rsquo;s visibility calculations were
fixed&lt;/a>. Since this was found to break significant amounts of
code, the new errors will be emitted as warnings for several release
cycles, under the &lt;code>private_in_public&lt;/code> lint.&lt;/li>
&lt;li>Defaulted type parameters were accidentally accepted in positions
that were not intended. In this release, &lt;a href="https://github.com/rust-lang/rust/pull/30724">defaulted type parameters
appearing outside of type definitions will generate a
warning&lt;/a>, which will become an error in future releases.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30681">Parsing &amp;ldquo;.&amp;rdquo; as a float results in an error instead of 0&lt;/a>.
That is, &lt;code>&amp;quot;.&amp;quot;.parse::&amp;lt;f32&amp;gt;()&lt;/code> returns &lt;code>Err&lt;/code>, not &lt;code>Ok(0.0)&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/30341">Borrows of closure parameters may not outlive the closure&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.6.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.6.0/</guid><description>&lt;h1 id="160">
 1.6.0
 &lt;a class="anchor" href="#160">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>21 January, 2016&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>#![no_std]&lt;/code> attribute causes a crate to not be linked to the
standard library, but only the &lt;a href="http://doc.rust-lang.org/core/index.html">core library&lt;/a>, as described
in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md">RFC 1184&lt;/a>. The core library defines common types and traits but
has no platform dependencies whatsoever, and is the basis for Rust
software in environments that cannot support a full port of the
standard library, such as operating systems. Most of the core
library is now stable.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Stabilized APIs:
&lt;a href="http://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_exact">&lt;code>Read::read_exact&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html#variant.UnexpectedEof">&lt;code>ErrorKind::UnexpectedEof&lt;/code>&lt;/a> (renamed from &lt;code>UnexpectedEOF&lt;/code>),
&lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html">&lt;code>fs::DirBuilder&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.new">&lt;code>fs::DirBuilder::new&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.recursive">&lt;code>fs::DirBuilder::recursive&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.create">&lt;code>fs::DirBuilder::create&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html">&lt;code>os::unix::fs::DirBuilderExt&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html#tymethod.mode">&lt;code>os::unix::fs::DirBuilderExt::mode&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/vec/struct.Drain.html">&lt;code>vec::Drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain">&lt;code>vec::Vec::drain&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/string/struct.Drain.html">&lt;code>string::Drain&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.drain">&lt;code>string::String::drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.Drain.html">&lt;code>vec_deque::Drain&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.VecDeque.html#method.drain">&lt;code>vec_deque::VecDeque::drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.Drain.html">&lt;code>collections::hash_map::Drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.HashMap.html#method.drain">&lt;code>collections::hash_map::HashMap::drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.Drain.html">&lt;code>collections::hash_set::Drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.HashSet.html#method.drain">&lt;code>collections::hash_set::HashSet::drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.Drain.html">&lt;code>collections::binary_heap::Drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.BinaryHeap.html#method.drain">&lt;code>collections::binary_heap::BinaryHeap::drain&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/collections/vec/struct.Vec.html#method.extend_from_slice">&lt;code>Vec::extend_from_slice&lt;/code>&lt;/a> (renamed from &lt;code>push_all&lt;/code>),
&lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.get_mut">&lt;code>Mutex::get_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.into_inner">&lt;code>Mutex::into_inner&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.get_mut">&lt;code>RwLock::get_mut&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.into_inner">&lt;code>RwLock::into_inner&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.min_by_key">&lt;code>Iterator::min_by_key&lt;/code>&lt;/a> (renamed from &lt;code>min_by&lt;/code>),
&lt;a href="http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.max_by_key">&lt;code>Iterator::max_by_key&lt;/code>&lt;/a> (renamed from &lt;code>max_by&lt;/code>).&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/core/index.html">core library&lt;/a> is stable, as are most of its APIs.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29770">The &lt;code>assert_eq!&lt;/code> macro supports arguments that don&amp;rsquo;t implement
&lt;code>Sized&lt;/code>&lt;/a>, such as arrays. In this way it behaves more like
&lt;code>assert!&lt;/code>.&lt;/li>
&lt;li>Several timer functions that take duration in milliseconds &lt;a href="https://github.com/rust-lang/rust/pull/29604">are
deprecated in favor of those that take &lt;code>Duration&lt;/code>&lt;/a>. These
include &lt;code>Condvar::wait_timeout_ms&lt;/code>, &lt;code>thread::sleep_ms&lt;/code>, and
&lt;code>thread::park_timeout_ms&lt;/code>.&lt;/li>
&lt;li>The algorithm by which &lt;code>Vec&lt;/code> reserves additional elements was
&lt;a href="https://github.com/rust-lang/rust/pull/29454">tweaked to not allocate excessive space&lt;/a> while still growing
exponentially.&lt;/li>
&lt;li>&lt;code>From&lt;/code> conversions are &lt;a href="https://github.com/rust-lang/rust/pull/29129">implemented from integers to floats&lt;/a>
in cases where the conversion is lossless. Thus they are not
implemented for 32-bit ints to &lt;code>f32&lt;/code>, nor for 64-bit ints to &lt;code>f32&lt;/code>
or &lt;code>f64&lt;/code>. They are also not implemented for &lt;code>isize&lt;/code> and &lt;code>usize&lt;/code>
because the implementations would be platform-specific. &lt;code>From&lt;/code> is
also implemented from &lt;code>f32&lt;/code> to &lt;code>f64&lt;/code>.&lt;/li>
&lt;li>&lt;code>From&amp;lt;&amp;amp;Path&amp;gt;&lt;/code> and &lt;code>From&amp;lt;PathBuf&amp;gt;&lt;/code> are implemented for &lt;code>Cow&amp;lt;Path&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;code>From&amp;lt;T&amp;gt;&lt;/code> is implemented for &lt;code>Box&amp;lt;T&amp;gt;&lt;/code>, &lt;code>Rc&amp;lt;T&amp;gt;&lt;/code> and &lt;code>Arc&amp;lt;T&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;code>IntoIterator&lt;/code> is implemented for &lt;code>&amp;amp;PathBuf&lt;/code> and &lt;code>&amp;amp;Path&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29811">&lt;code>BinaryHeap&lt;/code> was refactored&lt;/a> for modest performance
improvements.&lt;/li>
&lt;li>Sorting slices that are already sorted &lt;a href="https://github.com/rust-lang/rust/pull/29675">is 50% faster in some
cases&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="cargo">
 Cargo
 &lt;a class="anchor" href="#cargo">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Cargo will look in &lt;code>$CARGO_HOME/bin&lt;/code> for subcommands &lt;a href="https://github.com/rust-lang/cargo/pull/2192">by default&lt;/a>.&lt;/li>
&lt;li>Cargo build scripts can specify their dependencies by emitting the
&lt;a href="https://github.com/rust-lang/cargo/pull/2134">&lt;code>rerun-if-changed&lt;/code>&lt;/a> key.&lt;/li>
&lt;li>crates.io will reject publication of crates with dependencies that
have a wildcard version constraint. Crates with wildcard
dependencies were seen to cause a variety of problems, as described
in &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1241-no-wildcard-deps.md">RFC 1241&lt;/a>. Since 1.5 publication of such crates has emitted a
warning.&lt;/li>
&lt;li>&lt;code>cargo clean&lt;/code> &lt;a href="https://github.com/rust-lang/cargo/pull/2131">accepts a &lt;code>--release&lt;/code> flag&lt;/a> to clean the
release folder. A variety of artifacts that Cargo failed to clean
are now correctly deleted.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>unreachable_code&lt;/code> lint &lt;a href="https://github.com/rust-lang/rust/pull/30000">warns when a function call&amp;rsquo;s argument
diverges&lt;/a>.&lt;/li>
&lt;li>The parser indicates &lt;a href="https://github.com/rust-lang/rust/pull/29837">failures that may be caused by
confusingly-similar Unicode characters&lt;/a>&lt;/li>
&lt;li>Certain macro errors &lt;a href="https://github.com/rust-lang/rust/pull/29828">are reported at definition time&lt;/a>, not
expansion.&lt;/li>
&lt;/ul>
&lt;h2 id="compatibility-notes">
 Compatibility Notes
 &lt;a class="anchor" href="#compatibility-notes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The compiler no longer makes use of the &lt;a href="https://github.com/rust-lang/rust/pull/30034">&lt;code>RUST_PATH&lt;/code>&lt;/a>
environment variable when locating crates. This was a pre-cargo
feature for integrating with the package manager that was
accidentally never removed.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29726">A number of bugs were fixed in the privacy checker&lt;/a> that
could cause previously-accepted code to break.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/issues/21546">Modules and unit/tuple structs may not share the same name&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29383">Bugs in pattern matching unit structs were fixed&lt;/a>. The tuple
struct pattern syntax (&lt;code>Foo(..)&lt;/code>) can no longer be used to match
unit structs. This is a warning now, but will become an error in
future releases. Patterns that share the same name as a const are
now an error.&lt;/li>
&lt;li>A bug was fixed that causes &lt;a href="https://github.com/rust-lang/rust/issues/30123">rustc not to apply default type
parameters&lt;/a> when resolving certain method implementations of
traits defined in other crates.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.5.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.5.0/</guid><description>&lt;h1 id="150">
 1.5.0
 &lt;a class="anchor" href="#150">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>10 December, 2015&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>~700 changes, numerous bugfixes&lt;/li>
&lt;/ul>
&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Stabilized APIs:
&lt;a href="http://doc.rust-lang.org/nightly/std/convert/trait.From.html#method.from">&lt;code>BinaryHeap::from&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html#method.into_sorted_vec">&lt;code>BinaryHeap::into_sorted_vec&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html#method.into_vec">&lt;code>BinaryHeap::into_vec&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.Condvar.html#method.wait_timeout">&lt;code>Condvar::wait_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.FileTypeExt.html#tymethod.is_block_device">&lt;code>FileTypeExt::is_block_device&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.FileTypeExt.html#tymethod.is_char_device">&lt;code>FileTypeExt::is_char_device&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.FileTypeExt.html#tymethod.is_fifo">&lt;code>FileTypeExt::is_fifo&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.FileTypeExt.html#tymethod.is_socket">&lt;code>FileTypeExt::is_socket&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.FileTypeExt.html">&lt;code>FileTypeExt&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.alternate">&lt;code>Formatter::alternate&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.fill">&lt;code>Formatter::fill&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.precision">&lt;code>Formatter::precision&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.sign_aware_zero_pad">&lt;code>Formatter::sign_aware_zero_pad&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.sign_minus">&lt;code>Formatter::sign_minus&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.sign_plus">&lt;code>Formatter::sign_plus&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.width">&lt;code>Formatter::width&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.cmp">&lt;code>Iterator::cmp&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.eq">&lt;code>Iterator::eq&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.ge">&lt;code>Iterator::ge&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.gt">&lt;code>Iterator::gt&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.le">&lt;code>Iterator::le&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.lt">&lt;code>Iterator::lt&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.ne">&lt;code>Iterator::ne&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html#method.partial_cmp">&lt;code>Iterator::partial_cmp&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.canonicalize">&lt;code>Path::canonicalize&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.exists">&lt;code>Path::exists&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.is_dir">&lt;code>Path::is_dir&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.is_file">&lt;code>Path::is_file&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.metadata">&lt;code>Path::metadata&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.read_dir">&lt;code>Path::read_dir&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.read_link">&lt;code>Path::read_link&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.symlink_metadata">&lt;code>Path::symlink_metadata&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/core/str/struct.Utf8Error.html#method.valid_up_to">&lt;code>Utf8Error::valid_up_to&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.resize">&lt;code>Vec::resize&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.as_mut_slices">&lt;code>VecDeque::as_mut_slices&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.as_slices">&lt;code>VecDeque::as_slices&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.insert">&lt;code>VecDeque::insert&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.shrink_to_fit">&lt;code>VecDeque::shrink_to_fit&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.swap_remove_back">&lt;code>VecDeque::swap_remove_back&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.swap_remove_front">&lt;code>VecDeque::swap_remove_front&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_first_mut">&lt;code>slice::split_first_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_first">&lt;code>slice::split_first&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_last_mut">&lt;code>slice::split_last_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_last">&lt;code>slice::split_last&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/char/fn.from_u32_unchecked.html">&lt;code>char::from_u32_unchecked&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/fs/fn.canonicalize.html">&lt;code>fs::canonicalize&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/str/struct.MatchIndices.html">&lt;code>str::MatchIndices&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/str/struct.RMatchIndices.html">&lt;code>str::RMatchIndices&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.match_indices">&lt;code>str::match_indices&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.rmatch_indices">&lt;code>str::rmatch_indices&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.slice_mut_unchecked">&lt;code>str::slice_mut_unchecked&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/string/enum.ParseError.html">&lt;code>string::ParseError&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Rust applications hosted on crates.io can be installed locally to
&lt;code>~/.cargo/bin&lt;/code> with the &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1200-cargo-install.md">&lt;code>cargo install&lt;/code>&lt;/a> command. Among other
things this makes it easier to augment Cargo with new subcommands:
when a binary named e.g. &lt;code>cargo-foo&lt;/code> is found in &lt;code>$PATH&lt;/code> it can be
invoked as &lt;code>cargo foo&lt;/code>.&lt;/li>
&lt;li>Crates with wildcard (&lt;code>*&lt;/code>) dependencies will &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1241-no-wildcard-deps.md">emit warnings when
published&lt;/a>. In 1.6 it will no longer be possible to publish
crates with wildcard dependencies.&lt;/li>
&lt;/ul>
&lt;h2 id="breaking-changes">
 Breaking Changes
 &lt;a class="anchor" href="#breaking-changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The rules determining when a particular lifetime must outlive
a particular value (known as &amp;lsquo;&lt;a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html">dropck&lt;/a>&amp;rsquo;) have been &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md">modified
to not rely on parametricity&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28811">Implementations of &lt;code>AsRef&lt;/code> and &lt;code>AsMut&lt;/code> were added to &lt;code>Box&lt;/code>, &lt;code>Rc&lt;/code>,
and &lt;code>Arc&lt;/code>&lt;/a>. Because these smart pointer types implement
&lt;code>Deref&lt;/code>, this causes breakage in cases where the interior type
contains methods of the same name.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29110">Correct a bug in Rc/Arc&lt;/a> that caused &lt;a href="https://doc.rust-lang.org/nightly/nomicon/dropck.html">dropck&lt;/a> to be unaware
that they could drop their content. Soundness fix.&lt;/li>
&lt;li>All method invocations are &lt;a href="https://github.com/rust-lang/rust/pull/28669">properly checked&lt;/a> for
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md">well-formedness&lt;/a>. Soundness fix.&lt;/li>
&lt;li>Traits whose supertraits contain &lt;code>Self&lt;/code> are &lt;a href="https://github.com/rust-lang/rust/pull/29259">not object
safe&lt;/a>. Soundness fix.&lt;/li>
&lt;li>Target specifications support a &lt;a href="https://github.com/rust-lang/rust/pull/28578">&lt;code>no_default_libraries&lt;/code>&lt;/a>
setting that controls whether &lt;code>-nodefaultlibs&lt;/code> is passed to the
linker, and in turn the &lt;code>is_like_windows&lt;/code> setting no longer affects
the &lt;code>-nodefaultlibs&lt;/code> flag.&lt;/li>
&lt;li>&lt;code>#[derive(Show)]&lt;/code>, long-deprecated, &lt;a href="https://github.com/rust-lang/rust/pull/29148">has been removed&lt;/a>.&lt;/li>
&lt;li>The &lt;code>#[inline]&lt;/code> and &lt;code>#[repr]&lt;/code> attributes &lt;a href="https://github.com/rust-lang/rust/pull/28650">can only appear
in valid locations&lt;/a>.&lt;/li>
&lt;li>Native libraries linked from the local crate are &lt;a href="https://github.com/rust-lang/rust/pull/28605">passed to
the linker before native libraries from upstream crates&lt;/a>.&lt;/li>
&lt;li>Two rarely-used attributes, &lt;code>#[no_debug]&lt;/code> and
&lt;code>#[omit_gdb_pretty_printer_section]&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/28522">are feature gated&lt;/a>.&lt;/li>
&lt;li>Negation of unsigned integers, which has been a warning for
several releases, &lt;a href="https://github.com/rust-lang/rust/pull/28468">is now behind a feature gate and will
generate errors&lt;/a>.&lt;/li>
&lt;li>The parser accidentally accepted visibility modifiers on
enum variants, a bug &lt;a href="https://github.com/rust-lang/rust/pull/28442">which has been fixed&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28364">A bug was fixed that allowed &lt;code>use&lt;/code> statements to import unstable
features&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>When evaluating expressions at compile-time that are not
compile-time constants (const-evaluating expressions in non-const
contexts), incorrect code such as overlong bitshifts and arithmetic
overflow will &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1229-compile-time-asserts.md">generate a warning instead of an error&lt;/a>,
delaying the error until runtime. This will allow the
const-evaluator to be expanded in the future backwards-compatibly.&lt;/li>
&lt;li>The &lt;code>improper_ctypes&lt;/code> lint &lt;a href="https://github.com/rust-lang/rust/pull/28779">no longer warns about using &lt;code>isize&lt;/code> and
&lt;code>usize&lt;/code> in FFI&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Arc&amp;lt;T&amp;gt;&lt;/code> and &lt;code>Rc&amp;lt;T&amp;gt;&lt;/code> are &lt;a href="https://github.com/rust-lang/rust/pull/29110">covariant with respect to &lt;code>T&lt;/code> instead of
invariant&lt;/a>.&lt;/li>
&lt;li>&lt;code>Default&lt;/code> is &lt;a href="https://github.com/rust-lang/rust/pull/29245">implemented for mutable slices&lt;/a>.&lt;/li>
&lt;li>&lt;code>FromStr&lt;/code> is &lt;a href="https://github.com/rust-lang/rust/pull/29190">implemented for &lt;code>SockAddrV4&lt;/code> and &lt;code>SockAddrV6&lt;/code>&lt;/a>.&lt;/li>
&lt;li>There are now &lt;code>From&lt;/code> conversions &lt;a href="https://github.com/rust-lang/rust/pull/29129">between floating point
types&lt;/a> where the conversions are lossless.&lt;/li>
&lt;li>There are now &lt;code>From&lt;/code> conversions &lt;a href="https://github.com/rust-lang/rust/pull/28921">between integer types&lt;/a> where
the conversions are lossless.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/29021">&lt;code>fs::Metadata&lt;/code> implements &lt;code>Clone&lt;/code>&lt;/a>.&lt;/li>
&lt;li>The &lt;code>parse&lt;/code> method &lt;a href="https://github.com/rust-lang/rust/pull/28826">accepts a leading &amp;ldquo;+&amp;rdquo; when parsing
integers&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28663">&lt;code>AsMut&lt;/code> is implemented for &lt;code>Vec&lt;/code>&lt;/a>.&lt;/li>
&lt;li>The &lt;code>clone_from&lt;/code> implementations for &lt;code>String&lt;/code> and &lt;code>BinaryHeap&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/28602">have
been optimized&lt;/a> and no longer rely on the default impl.&lt;/li>
&lt;li>The &lt;code>extern &amp;quot;Rust&amp;quot;&lt;/code>, &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>, &lt;code>unsafe extern &amp;quot;Rust&amp;quot;&lt;/code> and
&lt;code>unsafe extern &amp;quot;C&amp;quot;&lt;/code> function types now &lt;a href="https://github.com/rust-lang/rust/pull/28560">implement &lt;code>Clone&lt;/code>,
&lt;code>PartialEq&lt;/code>, &lt;code>Eq&lt;/code>, &lt;code>PartialOrd&lt;/code>, &lt;code>Ord&lt;/code>, &lt;code>Hash&lt;/code>, &lt;code>fmt::Pointer&lt;/code>, and
&lt;code>fmt::Debug&lt;/code> for up to 12 arguments&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28531">Dropping &lt;code>Vec&lt;/code>s is much faster in unoptimized builds when the
element types don&amp;rsquo;t implement &lt;code>Drop&lt;/code>&lt;/a>.&lt;/li>
&lt;li>A bug that caused in incorrect behavior when &lt;a href="https://github.com/rust-lang/rust/pull/28494">combining &lt;code>VecDeque&lt;/code>
with zero-sized types&lt;/a> was resolved.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28436">&lt;code>PartialOrd&lt;/code> for slices is faster&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="miscellaneous">
 Miscellaneous
 &lt;a class="anchor" href="#miscellaneous">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28521">Crate metadata size was reduced by 20%&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28778">Improvements to code generation reduced the size of libcore by 3.3
MB and rustc&amp;rsquo;s memory usage by 18MB&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28491">Improvements to deref translation increased performance in
unoptimized builds&lt;/a>.&lt;/li>
&lt;li>Various errors in trait resolution &lt;a href="https://github.com/rust-lang/rust/pull/28645">are deduplicated to only be
reported once&lt;/a>.&lt;/li>
&lt;li>Rust has preliminary &lt;a href="https://github.com/rust-lang/rust/pull/28593">support for rumprun kernels&lt;/a>.&lt;/li>
&lt;li>Rust has preliminary &lt;a href="https://github.com/rust-lang/rust/pull/28543">support for NetBSD on amd64&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.4.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.4.0/</guid><description>&lt;h1 id="140">
 1.4.0
 &lt;a class="anchor" href="#140">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>29 October, 2015&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>~1200 changes, numerous bugfixes&lt;/li>
&lt;/ul>
&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Windows builds targeting the 64-bit MSVC ABI and linker (instead of
GNU) are now supported and recommended for use.&lt;/li>
&lt;/ul>
&lt;h2 id="breaking-changes">
 Breaking Changes
 &lt;a class="anchor" href="#breaking-changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27641">Several changes have been made to fix type soundness and improve
the behavior of associated types&lt;/a>. See &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md">RFC 1214&lt;/a>. Although
we have mostly introduced these changes as warnings this release, to
become errors next release, there are still some scenarios that will
see immediate breakage.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28034">The &lt;code>str::lines&lt;/code> and &lt;code>BufRead::lines&lt;/code> iterators treat &lt;code>\r\n&lt;/code> as
line breaks in addition to &lt;code>\n&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28321">Loans of &lt;code>'static&lt;/code> lifetime extend to the end of a function&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27307">&lt;code>str::parse&lt;/code> no longer introduces avoidable rounding error when
parsing floating point numbers. Together with earlier changes to
float formatting/output, &amp;ldquo;round trips&amp;rdquo; like f.to_string().parse()
now preserve the value of f exactly. Additionally, leading plus
signs are now accepted&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>use&lt;/code> statements that import multiple items &lt;a href="https://github.com/rust-lang/rust/pull/27451">can now rename
them&lt;/a>, as in &lt;code>use foo::{bar as kitten, baz as puppy}&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28270">Binops work correctly on fat pointers&lt;/a>.&lt;/li>
&lt;li>&lt;code>pub extern crate&lt;/code>, which does not behave as expected, &lt;a href="https://github.com/rust-lang/rust/pull/28486">issues a
warning&lt;/a> until a better solution is found.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28339">Many APIs were stabilized&lt;/a>: &lt;code>&amp;lt;Box&amp;lt;str&amp;gt;&amp;gt;::into_string&lt;/code>,
&lt;a href="http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.downgrade">&lt;code>Arc::downgrade&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.get_mut">&lt;code>Arc::get_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.make_mut">&lt;code>Arc::make_mut&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.try_unwrap">&lt;code>Arc::try_unwrap&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.from_raw">&lt;code>Box::from_raw&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.into_raw">&lt;code>Box::into_raw&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.to_str">&lt;code>CStr::to_str&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.to_string_lossy">&lt;code>CStr::to_string_lossy&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.from_raw">&lt;code>CString::from_raw&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_raw">&lt;code>CString::into_raw&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/io/trait.IntoRawFd.html#tymethod.into_raw_fd">&lt;code>IntoRawFd::into_raw_fd&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/os/unix/io/trait.IntoRawFd.html">&lt;code>IntoRawFd&lt;/code>&lt;/a>,
&lt;code>IntoRawHandle::into_raw_handle&lt;/code>, &lt;code>IntoRawHandle&lt;/code>,
&lt;code>IntoRawSocket::into_raw_socket&lt;/code>, &lt;code>IntoRawSocket&lt;/code>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.downgrade">&lt;code>Rc::downgrade&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.get_mut">&lt;code>Rc::get_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.make_mut">&lt;code>Rc::make_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.try_unwrap">&lt;code>Rc::try_unwrap&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/core/result/enum.Result.html#method.expect">&lt;code>Result::expect&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/collections/string/struct.String.html#method.into_boxed_str">&lt;code>String::into_boxed_str&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.read_timeout">&lt;code>TcpStream::read_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_read_timeout">&lt;code>TcpStream::set_read_timeout&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_write_timeout">&lt;code>TcpStream::set_write_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.write_timeout">&lt;code>TcpStream::write_timeout&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.read_timeout">&lt;code>UdpSocket::read_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_read_timeout">&lt;code>UdpSocket::set_read_timeout&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_write_timeout">&lt;code>UdpSocket::set_write_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.write_timeout">&lt;code>UdpSocket::write_timeout&lt;/code>&lt;/a>, &lt;code>Vec::append&lt;/code>, &lt;code>Vec::split_off&lt;/code>,
&lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.append">&lt;code>VecDeque::append&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.retain">&lt;code>VecDeque::retain&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.split_off">&lt;code>VecDeque::split_off&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/rc/struct.Weak.html#method.upgrade">&lt;code>rc::Weak::upgrade&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/rc/struct.Weak.html">&lt;code>rc::Weak&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/slice/struct.Iter.html#method.as_slice">&lt;code>slice::Iter::as_slice&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/slice/struct.IterMut.html#method.into_slice">&lt;code>slice::IterMut::into_slice&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/str/struct.CharIndices.html#method.as_str">&lt;code>str::CharIndices::as_str&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/str/struct.Chars.html#method.as_str">&lt;code>str::Chars::as_str&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_at_mut">&lt;code>str::split_at_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_at">&lt;code>str::split_at&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.Weak.html#method.upgrade">&lt;code>sync::Weak::upgrade&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/sync/struct.Weak.html">&lt;code>sync::Weak&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/thread/fn.park_timeout.html">&lt;code>thread::park_timeout&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/thread/fn.sleep.html">&lt;code>thread::sleep&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28339">Some APIs were deprecated&lt;/a>: &lt;code>BTreeMap::with_b&lt;/code>,
&lt;code>BTreeSet::with_b&lt;/code>, &lt;code>Option::as_mut_slice&lt;/code>, &lt;code>Option::as_slice&lt;/code>,
&lt;code>Result::as_mut_slice&lt;/code>, &lt;code>Result::as_slice&lt;/code>, &lt;code>f32::from_str_radix&lt;/code>,
&lt;code>f64::from_str_radix&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27474">Reverse-searching strings is faster with the &amp;rsquo;two-way'
algorithm&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27531">&lt;code>std::io::copy&lt;/code> allows &lt;code>?Sized&lt;/code> arguments&lt;/a>.&lt;/li>
&lt;li>The &lt;code>Windows&lt;/code>, &lt;code>Chunks&lt;/code>, and &lt;code>ChunksMut&lt;/code> iterators over slices all
&lt;a href="https://github.com/rust-lang/rust/pull/27652">override &lt;code>count&lt;/code>, &lt;code>nth&lt;/code> and &lt;code>last&lt;/code> with an &lt;em>O&lt;/em>(1)
implementation&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27825">&lt;code>Default&lt;/code> is implemented for arrays up to &lt;code>[T; 32]&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27896">&lt;code>IntoRawFd&lt;/code> has been added to the Unix-specific prelude,
&lt;code>IntoRawSocket&lt;/code> and &lt;code>IntoRawHandle&lt;/code> to the Windows-specific
prelude&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27956">&lt;code>Extend&amp;lt;String&amp;gt;&lt;/code> and &lt;code>FromIterator&amp;lt;String&lt;/code> are both implemented for
&lt;code>String&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28039">&lt;code>IntoIterator&lt;/code> is implemented for references to &lt;code>Option&lt;/code> and
&lt;code>Result&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28094">&lt;code>HashMap&lt;/code> and &lt;code>HashSet&lt;/code> implement &lt;code>Extend&amp;lt;&amp;amp;T&amp;gt;&lt;/code> where &lt;code>T: Copy&lt;/code>&lt;/a> as part of &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0839-embrace-extend-extinguish.md">RFC 839&lt;/a>. This will cause type inference
breakage in rare situations.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28156">&lt;code>BinaryHeap&lt;/code> implements &lt;code>Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28197">&lt;code>Borrow&lt;/code> and &lt;code>BorrowMut&lt;/code> are implemented for fixed-size
arrays&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28268">&lt;code>extern fn&lt;/code>s with the &amp;ldquo;Rust&amp;rdquo; and &amp;ldquo;C&amp;rdquo; ABIs implement common
traits including &lt;code>Eq&lt;/code>, &lt;code>Ord&lt;/code>, &lt;code>Debug&lt;/code>, &lt;code>Hash&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28338">String comparison is faster&lt;/a>.&lt;/li>
&lt;li>&lt;code>&amp;amp;mut T&lt;/code> where &lt;code>T: std::fmt::Write&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/28368">also implements
&lt;code>std::fmt::Write&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28494">A stable regression in &lt;code>VecDeque::push_back&lt;/code> and other
capacity-altering methods that caused panics for zero-sized types
was fixed&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/28560">Function pointers implement traits for up to 12 parameters&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="miscellaneous">
 Miscellaneous
 &lt;a class="anchor" href="#miscellaneous">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The compiler &lt;a href="https://github.com/rust-lang/rust/pull/27338">no longer uses the &amp;lsquo;morestack&amp;rsquo; feature to prevent
stack overflow&lt;/a>. Instead it uses guard pages and stack
probes (though stack probes are not yet implemented on any platform
but Windows).&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/27866">The compiler matches traits faster when projections are involved&lt;/a>.&lt;/li>
&lt;li>The &amp;lsquo;improper_ctypes&amp;rsquo; lint &lt;a href="https://github.com/rust-lang/rust/pull/28779">no longer warns about use of &lt;code>isize&lt;/code> and
&lt;code>usize&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/cargo/pull/1931">Cargo now displays useful information about what its doing during
&lt;code>cargo update&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.3.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.3.0/</guid><description>&lt;h1 id="130">
 1.3.0
 &lt;a class="anchor" href="#130">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>17 September, 2015&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>~900 changes, numerous bugfixes&lt;/li>
&lt;/ul>
&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md">new object lifetime defaults&lt;/a> have been &lt;a href="https://github.com/rust-lang/rust/pull/27045">turned
on&lt;/a> after a cycle of warnings about the change. Now types
like &lt;code>&amp;amp;'a Box&amp;lt;Trait&amp;gt;&lt;/code> (or &lt;code>&amp;amp;'a Rc&amp;lt;Trait&amp;gt;&lt;/code>, etc) will change from
being interpreted as &lt;code>&amp;amp;'a Box&amp;lt;Trait+'a&amp;gt;&lt;/code> to &lt;code>&amp;amp;'a Box&amp;lt;Trait+'static&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/nomicon/">The Rustonomicon&lt;/a> is a new book in the official documentation
that dives into writing unsafe Rust.&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Duration.html">&lt;code>Duration&lt;/code>&lt;/a> API, &lt;a href="https://github.com/rust-lang/rust/pull/26818">has been stabilized&lt;/a>. This basic unit of
timekeeping is employed by other std APIs, as well as out-of-tree
time crates.&lt;/li>
&lt;/ul>
&lt;h2 id="breaking-changes">
 Breaking Changes
 &lt;a class="anchor" href="#breaking-changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md">new object lifetime defaults&lt;/a> have been &lt;a href="https://github.com/rust-lang/rust/pull/27045">turned
on&lt;/a> after a cycle of warnings about the change.&lt;/li>
&lt;li>There is a known &lt;a href="https://github.com/rust-lang/rust/issues/27248">regression&lt;/a> in how object lifetime elision is
interpreted, the proper solution for which is undetermined.&lt;/li>
&lt;li>The &lt;code>#[prelude_import]&lt;/code> attribute, an internal implementation
detail, was accidentally stabilized previously. &lt;a href="https://github.com/rust-lang/rust/pull/26699">It has been put
behind the &lt;code>prelude_import&lt;/code> feature gate&lt;/a>. This change is
believed to break no existing code.&lt;/li>
&lt;li>The behavior of &lt;a href="http://doc.rust-lang.org/nightly/std/mem/fn.size_of_val.html">&lt;code>size_of_val&lt;/code>&lt;/a> and &lt;a href="http://doc.rust-lang.org/nightly/std/mem/fn.align_of_val.html">&lt;code>align_of_val&lt;/code>&lt;/a> is
&lt;a href="https://github.com/rust-lang/rust/pull/27351">more sane for dynamically sized types&lt;/a>. Code that relied on
the previous behavior is thought to be broken.&lt;/li>
&lt;li>The &lt;code>dropck&lt;/code> rules, which checks that destructors can&amp;rsquo;t access
destroyed values, [have been updated][dropck] to match the
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md">RFC&lt;/a>. This fixes some soundness holes, and as such will
cause some previously-compiling code to no longer build.&lt;/li>
&lt;/ul>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md">new object lifetime defaults&lt;/a> have been &lt;a href="https://github.com/rust-lang/rust/pull/27045">turned
on&lt;/a> after a cycle of warnings about the change.&lt;/li>
&lt;li>Semicolons may &lt;a href="https://github.com/rust-lang/rust/pull/27000">now follow types and paths in
macros&lt;/a>.&lt;/li>
&lt;li>The behavior of &lt;a href="http://doc.rust-lang.org/nightly/std/mem/fn.size_of_val.html">&lt;code>size_of_val&lt;/code>&lt;/a> and &lt;a href="http://doc.rust-lang.org/nightly/std/mem/fn.align_of_val.html">&lt;code>align_of_val&lt;/code>&lt;/a> is
&lt;a href="https://github.com/rust-lang/rust/pull/27351">more sane for dynamically sized types&lt;/a>. Code that relied on
the previous behavior is not known to exist, and suspected to be
broken.&lt;/li>
&lt;li>&lt;code>'static&lt;/code> variables &lt;a href="https://github.com/rust-lang/rust/pull/26630">may now be recursive&lt;/a>.&lt;/li>
&lt;li>&lt;code>ref&lt;/code> bindings choose between &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.Deref.html">&lt;code>Deref&lt;/code>&lt;/a> and &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.DerefMut.html">&lt;code>DerefMut&lt;/code>&lt;/a>
implementations correctly.&lt;/li>
&lt;li>The &lt;code>dropck&lt;/code> rules, which checks that destructors can&amp;rsquo;t access
destroyed values, [have been updated][dropck] to match the
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md">RFC&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/time/struct.Duration.html">&lt;code>Duration&lt;/code>&lt;/a> API, &lt;a href="https://github.com/rust-lang/rust/pull/26818">has been stabilized&lt;/a>, as well as the
&lt;code>std::time&lt;/code> module, which presently contains only &lt;code>Duration&lt;/code>.&lt;/li>
&lt;li>&lt;code>Box&amp;lt;str&amp;gt;&lt;/code> and &lt;code>Box&amp;lt;[T]&amp;gt;&lt;/code> both implement &lt;code>Clone&lt;/code>.&lt;/li>
&lt;li>The owned C string, &lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html">&lt;code>CString&lt;/code>&lt;/a>, implements &lt;a href="http://doc.rust-lang.org/nightly/std/borrow/trait.Borrow.html">&lt;code>Borrow&lt;/code>&lt;/a> and the
borrowed C string, &lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html">&lt;code>CStr&lt;/code>&lt;/a>, implements &lt;a href="http://doc.rust-lang.org/nightly/std/borrow/trait.ToOwned.html">&lt;code>ToOwned&lt;/code>&lt;/a>. The two of
these allow C strings to be borrowed and cloned in generic code.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html">&lt;code>CStr&lt;/code>&lt;/a> implements &lt;a href="http://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html">&lt;code>Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/sync/atomic/struct.AtomicPtr.html">&lt;code>AtomicPtr&lt;/code>&lt;/a> implements &lt;a href="http://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html">&lt;code>Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/error/trait.Error.html">&lt;code>Error&lt;/code>&lt;/a> trait objects &lt;a href="https://github.com/rust-lang/rust/pull/24793">can be downcast to their concrete types&lt;/a>
in many common configurations, using the &lt;a href="http://doc.rust-lang.org/nightly/std/error/trait.Error.html#method.is">&lt;code>is&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/error/trait.Error.html#method.downcast">&lt;code>downcast&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/error/trait.Error.html#method.downcast_ref">&lt;code>downcast_ref&lt;/code>&lt;/a> and &lt;a href="http://doc.rust-lang.org/nightly/std/error/trait.Error.html#method.downcast_mut">&lt;code>downcast_mut&lt;/code>&lt;/a> methods, similarly to the
&lt;a href="http://doc.rust-lang.org/nightly/std/any/trait.Any.html">&lt;code>Any&lt;/code>&lt;/a> trait.&lt;/li>
&lt;li>Searching for substrings now &lt;a href="https://github.com/rust-lang/rust/pull/26327">employs the two-way algorithm&lt;/a>
instead of doing a naive search. This gives major speedups to a
number of methods, including &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.contains">&lt;code>contains&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.find">&lt;code>find&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.rfind">&lt;code>rfind&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split">&lt;code>split&lt;/code>&lt;/a>. &lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.starts_with">&lt;code>starts_with&lt;/code>&lt;/a> and
&lt;a href="http://doc.rust-lang.org/nightly/std/primitive.str.html#method.ends_with">&lt;code>ends_with&lt;/code>&lt;/a> are also faster.&lt;/li>
&lt;li>The performance of &lt;code>PartialEq&lt;/code> for slices is &lt;a href="https://github.com/rust-lang/rust/pull/26884">much faster&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.Hash.html">&lt;code>Hash&lt;/code>&lt;/a> trait offers the default method, &lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.Hash.html#method.hash_slice">&lt;code>hash_slice&lt;/code>&lt;/a>, which
is overridden and optimized by the implementations for scalars.&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/hash/trait.Hasher.html">&lt;code>Hasher&lt;/code>&lt;/a> trait now has a number of specialized &lt;code>write_*&lt;/code>
methods for primitive types, for efficiency.&lt;/li>
&lt;li>The I/O-specific error type, &lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Error.html">&lt;code>std::io::Error&lt;/code>&lt;/a>, gained a set of
methods for accessing the &amp;lsquo;inner error&amp;rsquo;, if any: &lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.get_ref">&lt;code>get_ref&lt;/code>&lt;/a>,
&lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.get_mut">&lt;code>get_mut&lt;/code>&lt;/a>, &lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.into_inner">&lt;code>into_inner&lt;/code>&lt;/a>. As well, the implementation
of &lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.cause">&lt;code>std::error::Error::cause&lt;/code>&lt;/a> also delegates to the inner
error.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/process/struct.Child.html">&lt;code>process::Child&lt;/code>&lt;/a> gained the &lt;a href="http://doc.rust-lang.org/nightly/std/process/struct.Child.html#method.id">&lt;code>id&lt;/code>&lt;/a> method, which returns a
&lt;code>u32&lt;/code> representing the platform-specific process identifier.&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/slice/trait.SliceConcatExt.html#method.connect">&lt;code>connect&lt;/code>&lt;/a> method on slices is deprecated, replaced by the new
&lt;a href="http://doc.rust-lang.org/nightly/std/slice/trait.SliceConcatExt.html#method.join">&lt;code>join&lt;/code>&lt;/a> method (note that both of these are on the &lt;em>unstable&lt;/em>
&lt;a href="http://doc.rust-lang.org/nightly/std/slice/trait.SliceConcatExt.html">&lt;code>SliceConcatExt&lt;/code>&lt;/a> trait, but through the magic of the prelude are
available to stable code anyway).&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/ops/trait.Div.html">&lt;code>Div&lt;/code>&lt;/a> operator is implemented for &lt;a href="http://doc.rust-lang.org/nightly/std/num/struct.Wrapping.html">&lt;code>Wrapping&lt;/code>&lt;/a> types.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/26241">&lt;code>DerefMut&lt;/code> is implemented for &lt;code>String&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Performance of SipHash (the default hasher for &lt;code>HashMap&lt;/code>) is
&lt;a href="https://github.com/rust-lang/rust/pull/27280">better for long data&lt;/a>.&lt;/li>
&lt;li>&lt;a href="http://doc.rust-lang.org/nightly/std/sync/atomic/struct.AtomicPtr.html">&lt;code>AtomicPtr&lt;/code>&lt;/a> implements &lt;a href="http://doc.rust-lang.org/nightly/std/marker/trait.Send.html">&lt;code>Send&lt;/code>&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="http://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_to_end">&lt;code>read_to_end&lt;/code>&lt;/a> implementations for &lt;a href="http://doc.rust-lang.org/nightly/std/io/struct.Stdin.html">&lt;code>Stdin&lt;/code>&lt;/a> and &lt;a href="http://doc.rust-lang.org/nightly/std/fs/struct.File.html">&lt;code>File&lt;/code>&lt;/a>
are now &lt;a href="https://github.com/rust-lang/rust/pull/26950">specialized to use uninitialized buffers for increased
performance&lt;/a>.&lt;/li>
&lt;li>Lifetime parameters of foreign functions &lt;a href="https://github.com/rust-lang/rust/pull/26588">are now resolved
properly&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Rust can now, with some coercion, &lt;a href="https://github.com/rust-lang/rust/pull/26569">produce programs that run on
Windows XP&lt;/a>, though XP is not considered a supported platform.&lt;/li>
&lt;li>Porting Rust on Windows from the GNU toolchain to MSVC continues
(&lt;a href="https://github.com/rust-lang/rust/pull/26569">1&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/pull/26741">2&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/pull/26741">3&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/pull/27210">4&lt;/a>). It is still not
recommended for use in 1.3, though should be fully-functional
in the &lt;a href="https://static.rust-lang.org/dist/rust-beta-x86_64-pc-windows-msvc.msi">64-bit 1.4 beta&lt;/a>.&lt;/li>
&lt;li>On Fedora-based systems installation will &lt;a href="https://github.com/rust-lang/rust-installer/pull/41">properly configure the
dynamic linker&lt;/a>.&lt;/li>
&lt;li>The compiler gained many new extended error descriptions, which can
be accessed with the &lt;code>--explain&lt;/code> flag.&lt;/li>
&lt;li>The &lt;code>dropck&lt;/code> pass, which checks that destructors can&amp;rsquo;t access
destroyed values, &lt;a href="https://github.com/rust-lang/rust/pull/27261">has been rewritten&lt;/a>. This fixes some
soundness holes, and as such will cause some previously-compiling
code to no longer build.&lt;/li>
&lt;li>&lt;code>rustc&lt;/code> now uses &lt;a href="https://github.com/rust-lang/rust/pull/26926">LLVM to write archive files where possible&lt;/a>.
Eventually this will eliminate the compiler&amp;rsquo;s dependency on the ar
utility.&lt;/li>
&lt;li>Rust has &lt;a href="https://github.com/rust-lang/rust/pull/26959">preliminary support for i686 FreeBSD&lt;/a> (it has long
supported FreeBSD on x86_64).&lt;/li>
&lt;li>The &lt;a href="https://github.com/rust-lang/rust/pull/26378">&lt;code>unused_mut&lt;/code>&lt;/a>, &lt;a href="https://github.com/rust-lang/rust/pull/26783">&lt;code>unconditional_recursion&lt;/code>&lt;/a>,
&lt;a href="https://github.com/rust-lang/rust/pull/26583">&lt;code>improper_ctypes&lt;/code>&lt;/a>, and &lt;a href="https://github.com/rust-lang/rust/pull/27026">&lt;code>negate_unsigned&lt;/code>&lt;/a> lints are
more strict.&lt;/li>
&lt;li>If landing pads are disabled (with &lt;code>-Z no-landing-pads&lt;/code>), &lt;a href="https://github.com/rust-lang/rust/pull/27176">&lt;code>panic!&lt;/code>
will kill the process instead of leaking&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.2.0/</guid><description>&lt;h1 id="120">
 1.2.0
 &lt;a class="anchor" href="#120">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>7 August, 2015&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>~1200 changes, numerous bugfixes&lt;/li>
&lt;/ul>
&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md">Dynamically-sized-type coercions&lt;/a> allow smart pointer types
like &lt;code>Rc&lt;/code> to contain types without a fixed size, arrays and trait
objects, finally enabling use of &lt;code>Rc&amp;lt;[T]&amp;gt;&lt;/code> and completing the
implementation of DST.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/26018">Parallel codegen&lt;/a> is now working again, which can
substantially speed up large builds in debug mode; It also gets
another ~33% speedup when bootstrapping on a 4 core machine (using 8
jobs). It&amp;rsquo;s not enabled by default, but will be &amp;ldquo;in the near
future&amp;rdquo;. It can be activated with the &lt;code>-C codegen-units=N&lt;/code> flag to
&lt;code>rustc&lt;/code>.&lt;/li>
&lt;li>This is the first release with &lt;a href="https://github.com/rust-lang/rust/pull/25350">experimental support for linking
with the MSVC linker and lib C on Windows (instead of using the GNU
variants via MinGW)&lt;/a>. It is yet recommended only for the most
intrepid Rustaceans.&lt;/li>
&lt;li>Benchmark compilations are showing a 30% improvement in
bootstrapping over 1.1.&lt;/li>
&lt;/ul>
&lt;h2 id="breaking-changes">
 Breaking Changes
 &lt;a class="anchor" href="#breaking-changes">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_uppercase">&lt;code>to_uppercase&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.char.html#method.to_lowercase">&lt;code>to_lowercase&lt;/code>&lt;/a> methods on &lt;code>char&lt;/code> now do
unicode case mapping, which is a previously-planned change in
behavior and considered a bugfix.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/mem/fn.align_of.html">&lt;code>mem::align_of&lt;/code>&lt;/a> now specifies &lt;a href="https://github.com/rust-lang/rust/pull/25646">the &lt;em>minimum alignment&lt;/em> for
T&lt;/a>, which is usually the alignment programs are interested
in, and the same value reported by clang&amp;rsquo;s
&lt;code>alignof&lt;/code>. &lt;a href="https://doc.rust-lang.org/nightly/std/mem/fn.min_align_of.html">&lt;code>mem::min_align_of&lt;/code>&lt;/a> is deprecated. This is not known to
break real code.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/25541">The &lt;code>#[packed]&lt;/code> attribute is no longer silently accepted by the
compiler&lt;/a>. This attribute did nothing and code that
mentioned it likely did not work as intended.&lt;/li>
&lt;li>Associated type defaults are &lt;a href="https://github.com/rust-lang/rust/pull/27382">now behind the
&lt;code>associated_type_defaults&lt;/code> feature gate&lt;/a>. In 1.1 associated type
defaults &lt;em>did not work&lt;/em>, but could be mentioned syntactically. As
such this breakage has minimal impact.&lt;/li>
&lt;/ul>
&lt;h2 id="language">
 Language
 &lt;a class="anchor" href="#language">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Patterns with &lt;code>ref mut&lt;/code> now correctly invoke &lt;a href="https://doc.rust-lang.org/nightly/std/ops/trait.DerefMut.html">&lt;code>DerefMut&lt;/code>&lt;/a> when
matching against dereferenceable values.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/iter/trait.Extend.html">&lt;code>Extend&lt;/code>&lt;/a> trait, which grows a collection from an iterator, is
implemented over iterators of references, for &lt;code>String&lt;/code>, &lt;code>Vec&lt;/code>,
&lt;code>LinkedList&lt;/code>, &lt;code>VecDeque&lt;/code>, &lt;code>EnumSet&lt;/code>, &lt;code>BinaryHeap&lt;/code>, &lt;code>VecMap&lt;/code>,
&lt;code>BTreeSet&lt;/code> and &lt;code>BTreeMap&lt;/code>. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0839-embrace-extend-extinguish.md">RFC&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/iter/fn.once.html">&lt;code>iter::once&lt;/code>&lt;/a> function returns an iterator that yields a single
element, and &lt;a href="https://doc.rust-lang.org/nightly/std/iter/fn.empty.html">&lt;code>iter::empty&lt;/code>&lt;/a> returns an iterator that yields no
elements.&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.str.html#method.matches">&lt;code>matches&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.str.html#method.rmatches">&lt;code>rmatches&lt;/code>&lt;/a> methods on &lt;code>str&lt;/code> return iterators
over substring matches.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html">&lt;code>Cell&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/cell/struct.RefCell.html">&lt;code>RefCell&lt;/code>&lt;/a> both implement &lt;code>Eq&lt;/code>.&lt;/li>
&lt;li>A number of methods for wrapping arithmetic are added to the
integral types, &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_div">&lt;code>wrapping_div&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_rem">&lt;code>wrapping_rem&lt;/code>&lt;/a>,
&lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_neg">&lt;code>wrapping_neg&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shl">&lt;code>wrapping_shl&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_shr">&lt;code>wrapping_shr&lt;/code>&lt;/a>. These are in
addition to the existing &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_add">&lt;code>wrapping_add&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_sub">&lt;code>wrapping_sub&lt;/code>&lt;/a>, and
&lt;a href="https://doc.rust-lang.org/nightly/std/primitive.i8.html#method.wrapping_mul">&lt;code>wrapping_mul&lt;/code>&lt;/a> methods, and alternatives to the &lt;a href="https://doc.rust-lang.org/nightly/std/num/struct.Wrapping.html">&lt;code>Wrapping&lt;/code>&lt;/a>
type.. It is illegal for the default arithmetic operations in Rust
to overflow; the desire to wrap must be explicit.&lt;/li>
&lt;li>The &lt;code>{:#?}&lt;/code> formatting specifier &lt;a href="https://www.reddit.com/r/rust/comments/3ceaui/psa_produces_prettyprinted_debug_output/">displays the alternate,
pretty-printed&lt;/a> form of the &lt;code>Debug&lt;/code> formatter. This
feature was actually introduced prior to 1.0 with little
fanfare.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html">&lt;code>fmt::Formatter&lt;/code>&lt;/a> implements &lt;a href="https://doc.rust-lang.org/nightly/std/fmt/trait.Write.html">&lt;code>fmt::Write&lt;/code>&lt;/a>, a &lt;code>fmt&lt;/code>-specific trait
for writing data to formatted strings, similar to &lt;a href="https://doc.rust-lang.org/nightly/std/io/trait.Write.html">&lt;code>io::Write&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html">&lt;code>fmt::Formatter&lt;/code>&lt;/a> adds &amp;lsquo;debug builder&amp;rsquo; methods, &lt;a href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_struct">&lt;code>debug_struct&lt;/code>&lt;/a>,
&lt;a href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_tuple">&lt;code>debug_tuple&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_list">&lt;code>debug_list&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_set">&lt;code>debug_set&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html#method.debug_map">&lt;code>debug_map&lt;/code>&lt;/a>. These
are used by code generators to emit implementations of &lt;a href="https://doc.rust-lang.org/nightly/std/fmt/trait.Debug.html">&lt;code>Debug&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;code>str&lt;/code> has new &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_uppercase">&lt;code>to_uppercase&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase">&lt;code>to_lowercase&lt;/code>&lt;/a>
methods that convert case, following Unicode case mapping.&lt;/li>
&lt;li>It is now easier to handle poisoned locks. The &lt;a href="https://doc.rust-lang.org/nightly/std/sync/struct.PoisonError.html">&lt;code>PoisonError&lt;/code>&lt;/a>
type, returned by failing lock operations, exposes &lt;code>into_inner&lt;/code>,
&lt;code>get_ref&lt;/code>, and &lt;code>get_mut&lt;/code>, which all give access to the inner lock
guard, and allow the poisoned lock to continue to operate. The
&lt;code>is_poisoned&lt;/code> method of &lt;a href="https://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html">&lt;code>RwLock&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html">&lt;code>Mutex&lt;/code>&lt;/a> can poll for a
poisoned lock without attempting to take the lock.&lt;/li>
&lt;li>On Unix the &lt;a href="https://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html">&lt;code>FromRawFd&lt;/code>&lt;/a> trait is implemented for &lt;a href="https://doc.rust-lang.org/nightly/std/process/struct.Stdio.html">&lt;code>Stdio&lt;/code>&lt;/a>, and
&lt;a href="https://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html">&lt;code>AsRawFd&lt;/code>&lt;/a> for &lt;a href="https://doc.rust-lang.org/nightly/std/process/struct.ChildStdin.html">&lt;code>ChildStdin&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/process/struct.ChildStdout.html">&lt;code>ChildStdout&lt;/code>&lt;/a>, &lt;a href="https://doc.rust-lang.org/nightly/std/process/struct.ChildStderr.html">&lt;code>ChildStderr&lt;/code>&lt;/a>.
On Windows the &lt;code>FromRawHandle&lt;/code> trait is implemented for &lt;code>Stdio&lt;/code>,
and &lt;code>AsRawHandle&lt;/code> for &lt;code>ChildStdin&lt;/code>, &lt;code>ChildStdout&lt;/code>,
&lt;code>ChildStderr&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html">&lt;code>io::ErrorKind&lt;/code>&lt;/a> has a new variant, &lt;code>InvalidData&lt;/code>, which indicates
malformed input.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>rustc&lt;/code> employs smarter heuristics for guessing at &lt;a href="https://github.com/rust-lang/rust/pull/26087">typos&lt;/a>.&lt;/li>
&lt;li>&lt;code>rustc&lt;/code> emits more efficient code for &lt;a href="https://github.com/rust-lang/rust/pull/26336">no-op conversions between
unsafe pointers&lt;/a>.&lt;/li>
&lt;li>Fat pointers are now &lt;a href="https://github.com/rust-lang/rust/pull/26411">passed in pairs of immediate arguments&lt;/a>,
resulting in faster compile times and smaller code.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://releases.rs/docs/1.1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.1.0/</guid><description>&lt;h1 id="110">
 1.1.0
 &lt;a class="anchor" href="#110">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;ul>
&lt;li>Released on: &lt;em>25 June, 2015&lt;/em>&lt;/li>
&lt;li>Branched from master on: &lt;em>4 December, 2015&lt;/em>&lt;/li>
&lt;/ul>

&lt;/blockquote>

&lt;ul>
&lt;li>~850 changes, numerous bugfixes&lt;/li>
&lt;/ul>
&lt;h2 id="highlights">
 Highlights
 &lt;a class="anchor" href="#highlights">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1044-io-fs-2.1.md">&lt;code>std::fs&lt;/code> module has been expanded&lt;/a> to expand the set of
functionality exposed:
&lt;ul>
&lt;li>&lt;code>DirEntry&lt;/code> now supports optimizations like &lt;code>file_type&lt;/code> and &lt;code>metadata&lt;/code> which
don&amp;rsquo;t incur a syscall on some platforms.&lt;/li>
&lt;li>A &lt;code>symlink_metadata&lt;/code> function has been added.&lt;/li>
&lt;li>The &lt;code>fs::Metadata&lt;/code> structure now lowers to its OS counterpart, providing
access to all underlying information.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The compiler now contains extended explanations of many errors. When an error
with an explanation occurs the compiler suggests using the &lt;code>--explain&lt;/code> flag
to read the explanation. Error explanations are also &lt;a href="https://doc.rust-lang.org/error-index.html">available online&lt;/a>.&lt;/li>
&lt;li>Thanks to multiple &lt;a href="https://github.com/rust-lang/rust/pull/24615">improvements&lt;/a> to &lt;a href="https://github.com/rust-lang/rust/pull/25323">type checking&lt;/a>, as
well as other work, the time to bootstrap the compiler decreased by
32%.&lt;/li>
&lt;/ul>
&lt;h2 id="libraries">
 Libraries
 &lt;a class="anchor" href="#libraries">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_whitespace">&lt;code>str::split_whitespace&lt;/code>&lt;/a> method splits a string on unicode
whitespace boundaries.&lt;/li>
&lt;li>On both Windows and Unix, new extension traits provide conversion of
I/O types to and from the underlying system handles. On Unix, these
traits are &lt;a href="https://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html">&lt;code>FromRawFd&lt;/code>&lt;/a> and &lt;a href="https://doc.rust-lang.org/nightly/std/os/unix/io/trait.AsRawFd.html">&lt;code>AsRawFd&lt;/code>&lt;/a>, on Windows &lt;code>FromRawHandle&lt;/code>
and &lt;code>AsRawHandle&lt;/code>. These are implemented for &lt;code>File&lt;/code>, &lt;code>TcpStream&lt;/code>,
&lt;code>TcpListener&lt;/code>, and &lt;code>UpdSocket&lt;/code>. Further implementations for
&lt;code>std::process&lt;/code> will be stabilized later.&lt;/li>
&lt;li>On Unix, &lt;a href="https://doc.rust-lang.org/nightly/std/os/unix/fs/fn.symlink.html">&lt;code>std::os::unix::symlink&lt;/code>&lt;/a> creates symlinks. On
Windows, symlinks can be created with
&lt;code>std::os::windows::symlink_dir&lt;/code> and
&lt;code>std::os::windows::symlink_file&lt;/code>.&lt;/li>
&lt;li>The &lt;code>mpsc::Receiver&lt;/code> type can now be converted into an iterator with
&lt;code>into_iter&lt;/code> on the &lt;a href="https://doc.rust-lang.org/nightly/std/iter/trait.IntoIterator.html">&lt;code>IntoIterator&lt;/code>&lt;/a> trait.&lt;/li>
&lt;li>&lt;code>Ipv4Addr&lt;/code> can be created from &lt;code>u32&lt;/code> with the &lt;code>From&amp;lt;u32&amp;gt;&lt;/code>
implementation of the &lt;a href="https://doc.rust-lang.org/nightly/std/convert/trait.From.html">&lt;code>From&lt;/code>&lt;/a> trait.&lt;/li>
&lt;li>The &lt;code>Debug&lt;/code> implementation for &lt;code>RangeFull&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/24491">creates output that is
more consistent with other implementations&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/24598">&lt;code>Debug&lt;/code> is implemented for &lt;code>File&lt;/code>&lt;/a>.&lt;/li>
&lt;li>The &lt;code>Default&lt;/code> implementation for &lt;code>Arc&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/24695">no longer requires &lt;code>Sync + Send&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/24701">The &lt;code>Iterator&lt;/code> methods &lt;code>count&lt;/code>, &lt;code>nth&lt;/code>, and &lt;code>last&lt;/code> have been
overridden for slices to have &lt;em>O&lt;/em>(1) performance instead of &lt;em>O&lt;/em>(&lt;em>n&lt;/em>)&lt;/a>.&lt;/li>
&lt;li>Incorrect handling of paths on Windows has been improved in both the
compiler and the standard library.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/24834">&lt;code>AtomicPtr&lt;/code> gained a &lt;code>Default&lt;/code> implementation&lt;/a>.&lt;/li>
&lt;li>In accordance with Rust&amp;rsquo;s policy on arithmetic overflow &lt;code>abs&lt;/code> now
&lt;a href="https://github.com/rust-lang/rust/pull/25441">panics on overflow when debug assertions are enabled&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/iter/struct.Cloned.html">&lt;code>Cloned&lt;/code>&lt;/a> iterator, which was accidentally left unstable for
1.0 &lt;a href="https://github.com/rust-lang/rust/pull/25496">has been stabilized&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/std/net/struct.Incoming.html">&lt;code>Incoming&lt;/code>&lt;/a> iterator, which iterates over incoming TCP
connections, and which was accidentally unnamable in 1.0, &lt;a href="https://github.com/rust-lang/rust/pull/25522">is now
properly exported&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html">&lt;code>BinaryHeap&lt;/code>&lt;/a> no longer corrupts itself &lt;a href="https://github.com/rust-lang/rust/pull/25856">when functions called by
&lt;code>sift_up&lt;/code> or &lt;code>sift_down&lt;/code> panic&lt;/a>.&lt;/li>
&lt;li>The &lt;a href="https://doc.rust-lang.org/nightly/collections/linked_list/struct.LinkedList.html#method.split_off">&lt;code>split_off&lt;/code>&lt;/a> method of &lt;code>LinkedList&lt;/code> &lt;a href="https://github.com/rust-lang/rust/pull/26022">no longer corrupts
the list in certain scenarios&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Type checking performance &lt;a href="https://github.com/rust-lang/rust/pull/24615">has improved notably&lt;/a> with
&lt;a href="https://github.com/rust-lang/rust/pull/25323">multiple improvements&lt;/a>.&lt;/li>
&lt;li>The compiler &lt;a href="https://github.com/rust-lang/rust/pull/24683">suggests code changes&lt;/a> for more errors.&lt;/li>
&lt;li>rustc and it&amp;rsquo;s build system have experimental support for &lt;a href="https://github.com/rust-lang/rust/pull/24777">building
toolchains against MUSL&lt;/a> instead of glibc on Linux.&lt;/li>
&lt;li>The compiler defines the &lt;code>target_env&lt;/code> cfg value, which is used for
distinguishing toolchains that are otherwise for the same
platform. Presently this is set to &lt;code>gnu&lt;/code> for common GNU Linux
targets and for MinGW targets, and &lt;code>musl&lt;/code> for MUSL Linux targets.&lt;/li>
&lt;li>The &lt;a href="https://github.com/rust-lang/cargo/pull/1568">&lt;code>cargo rustc&lt;/code>&lt;/a> command invokes a build with custom flags
to rustc.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/24953">Android executables are always position independent&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rust/pull/24935">The &lt;code>drop_with_repr_extern&lt;/code> lint warns about mixing &lt;code>repr(C)&lt;/code>
with &lt;code>Drop&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul></description></item></channel></rss>