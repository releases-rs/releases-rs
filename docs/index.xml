<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust Changelogs</title><link>https://releases.rs/docs/</link><description>Recent content on Rust Changelogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://releases.rs/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://releases.rs/docs/1.70.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.70.0/</guid><description>1.70.0 nightly # Unreleased, branched from master
Will be stable on: 1 June, 2023 Will branch from master on: 14 April, 2023 Stabilize IsTerminal (merged 3 days ago) Partial stabilization of once_cell (merged 17 days ago) Stabilize nonnull_slice_from_raw_parts (merged 20 days ago) Upgrade to LLVM 16, again (merged 22 days ago) Stabilize arc_into_inner and rc_into_inner. (merged 24 days ago) Fix handling of trailing bare CR in str::lines (merged 25 days ago) Detect uninhabited types early in const eval (merged 25 days ago) Upgrade to LLVM 16 (merged 29 days ago) Prevent stable libtest from supporting -Zunstable-options (merged 30 days ago) Introduce a no-op PlaceMention statement for let _ =.</description></item><item><title/><link>https://releases.rs/docs/1.69.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.69.0/</guid><description> 1.69.0 beta # Unreleased, branched from master
Will be stable on: 20 April, 2023 Will branch from master on: 3 March, 2023 Remove save-analysis. (merged 59 days ago) Update the minimum external LLVM to 14 (merged 60 days ago) More deriving on packed structs (merged 76 days ago) Upgrade mingw-w64 on CI (merged 77 days ago)</description></item><item><title/><link>https://releases.rs/docs/1.68.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.0/</guid><description>1.68.0 (9 March, 2023) # Language # Stabilize default_alloc_error_handler This allows usage of alloc on stable without requiring the definition of a handler for allocation failure. Defining custom handlers is still unstable. Stabilize efiapi calling convention. Remove implicit promotion for types with drop glue Compiler # Change bindings_with_variant_name to deny-by-default Allow .. to be parsed as let initializer Add armv7-sony-vita-newlibeabihf as a tier 3 target Always check alignment during compile-time const evaluation Disable &amp;ldquo;split dwarf inlining&amp;rdquo; by default.</description></item><item><title/><link>https://releases.rs/docs/1.68.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.1/</guid><description> 1.68.1 (23 March, 2023) # Changes # Fix miscompilation in produced Windows MSVC artifacts This was introduced by enabling ThinLTO for the distributed rustc which led to miscompilations in the resulting binary. Currently this is believed to be limited to the -Zdylib-lto flag used for rustc compilation, rather than a general bug in ThinLTO, so only rustc artifacts should be affected. Fix &amp;ndash;enable-local-rust builds Treat $prefix-clang as clang in linker detection code Fix panic in compiler code</description></item><item><title/><link>https://releases.rs/docs/1.68.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.68.2/</guid><description> 1.68.2 (28 March, 2023) # Changes # Update the GitHub RSA host key bundled within Cargo. The key was rotated by GitHub on 2023-03-24 after the old one leaked. Mark the old GitHub RSA host key as revoked. This will prevent Cargo from accepting the leaked key even when trusted by the system. Add support for @revoked and a better error message for @cert-authority in Cargo&amp;rsquo;s SSH host key verification</description></item><item><title/><link>https://releases.rs/docs/1.67.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.67.0/</guid><description>1.67.0 (26 January, 2023) # Language # Make Sized predicates coinductive, allowing cycles. #[must_use] annotations on async fn also affect the Future::Output. Elaborate supertrait obligations when deducing closure signatures. Invalid literals are no longer an error under cfg(FALSE). Unreserve braced enum variants in value namespace. Compiler # Enable varargs support for calling conventions other than C or cdecl. Add new MIR constant propagation based on dataflow analysis. Optimize field ordering by grouping m*2^n-sized fields with equivalently aligned ones.</description></item><item><title/><link>https://releases.rs/docs/1.67.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.67.1/</guid><description> 1.67.1 (9 February, 2023) # Changes # Fix interoperability with thin archives. Fix an internal error in the compiler build process. Downgrade clippy::uninlined_format_args to pedantic.</description></item><item><title/><link>https://releases.rs/docs/1.66.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.66.0/</guid><description>1.66.0 (15 December, 2022) # Language # Permit specifying explicit discriminants on all repr(Int) enums #[repr(u8)] enum Foo { A(u8) = 0, B(i8) = 1, C(bool) = 42, } Allow transmutes between the same type differing only in lifetimes Change constant evaluation errors from a deny-by-default lint to a hard error Trigger must_use on impl Trait for supertraits This makes impl ExactSizeIterator respect the existing #[must_use] annotation on Iterator. Allow .</description></item><item><title/><link>https://releases.rs/docs/1.66.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.66.1/</guid><description> 1.66.1 (10 January, 2023) # Changes # Added validation of SSH host keys for git URLs in Cargo (CVE-2022-46176)</description></item><item><title/><link>https://releases.rs/docs/1.65.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.65.0/</guid><description>1.65.0 (3 November, 2022) # Language # Error on as casts of enums with #[non_exhaustive] variants Stabilize let else Stabilize generic associated types (GATs) Add lints let_underscore_drop and let_underscore_lock from Clippy Stabilize breaking from arbitrary labeled blocks (&amp;ldquo;label-break-value&amp;rdquo;) Uninitialized integers, floats, and raw pointers are now considered immediate UB. Usage of MaybeUninit is the correct way to work with uninitialized memory. Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a Do not allow Drop impl on foreign ADTs Compiler # Stabilize -Csplit-debuginfo on Linux Use niche-filling optimization even when multiple variants have data Associated type projections are now verified to be well-formed prior to resolving the underlying type Stringify non-shorthand visibility correctly Normalize struct field types when unsizing Update to LLVM 15 Fix aarch64 call abi to correctly zeroext when needed debuginfo: Generalize C++-like encoding for enums Add special_module_name lint Add support for generating unique profraw files by default when using -C instrument-coverage Allow dynamic linking for iOS/tvOS targets New targets:</description></item><item><title/><link>https://releases.rs/docs/1.64.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.64.0/</guid><description>1.64.0 (22 September, 2022) # Language # Unions with mutable references or tuples of allowed types are now allowed It is now considered valid to deallocate memory pointed to by a shared reference &amp;amp;T if every byte in T is inside an UnsafeCell Unused tuple struct fields are now warned against in an allow-by-default lint, unused_tuple_struct_fields, similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.</description></item><item><title/><link>https://releases.rs/docs/1.63.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.63.0/</guid><description>1.63.0 (11 August, 2022) # Language # Remove migrate borrowck mode for pre-NLL errors. Modify MIR building to drop repeat expressions with length zero. Remove label/lifetime shadowing warnings. Allow explicit generic arguments in the presence of impl Trait args. Make cenum_impl_drop_cast warnings deny-by-default. Prevent unwinding when -C panic=abort is used regardless of declared ABI. lub: don&amp;rsquo;t bail out due to empty binders. Compiler # Stabilize the bundle native library modifier, also removing the deprecated static-nobundle linking kind.</description></item><item><title/><link>https://releases.rs/docs/1.62.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.62.0/</guid><description>1.62.0 (30 June, 2022) # Language # Stabilize #[derive(Default)] on enums with a #[default] variant Teach flow sensitive checks that visibly uninhabited call expressions never return Fix constants not getting dropped if part of a diverging expression Support unit struct/enum variant in destructuring assignment Remove mutable_borrow_reservation_conflict lint and allow the code pattern const functions may now specify extern &amp;quot;C&amp;quot; or extern &amp;quot;Rust&amp;quot; Compiler # linker: Stop using whole-archive on dependencies of dylibs Make unaligned_references lint deny-by-default This lint is also a future compatibility lint, and is expected to eventually become a hard error.</description></item><item><title/><link>https://releases.rs/docs/1.62.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.62.1/</guid><description>1.62.1 (19 July, 2022) # Rust 1.62.1 addresses a few recent regressions in the compiler and standard library, and also mitigates a CPU vulnerability on Intel SGX.
The compiler fixed unsound function coercions involving impl Trait return types. The compiler fixed an incremental compilation bug with async fn lifetimes. Windows added a fallback for overlapped I/O in synchronous reads and writes. The x86_64-fortanix-unknown-sgx target added a mitigation for the MMIO stale data vulnerability, advisory INTEL-SA-00615.</description></item><item><title/><link>https://releases.rs/docs/1.61.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.61.0/</guid><description>1.61.0 (19 May, 2022) # Language # const fn signatures can now include generic trait bounds const fn signatures can now use impl Trait in argument and return position Function pointers can now be created, cast, and passed around in a const fn Recursive calls can now set the value of a function&amp;rsquo;s opaque impl Trait return type Compiler # Linking modifier syntax in #[link] attributes and on the command line, as well as the whole-archive modifier specifically, are now supported The char type is now described as UTF-32 in debuginfo The #[target_feature] attribute can now be used with aarch64 features X86 #[target_feature = &amp;quot;adx&amp;quot;] is now stable Libraries # ManuallyDrop&amp;lt;T&amp;gt; is now documented to have the same layout as T #[ignore = &amp;quot;…&amp;quot;] messages are printed when running tests Consistently show absent stdio handles on Windows as NULL handles Make std::io::stdio::lock() return 'static handles.</description></item><item><title/><link>https://releases.rs/docs/1.60.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.60.0/</guid><description>1.60.0 (7 April, 2022) # Language # Stabilize #[cfg(panic = &amp;quot;...&amp;quot;)] for either &amp;quot;unwind&amp;quot; or &amp;quot;abort&amp;quot;. Stabilize #[cfg(target_has_atomic = &amp;quot;...&amp;quot;)] for each integer size and &amp;quot;ptr&amp;quot;. Compiler # Enable combining +crt-static and relocation-model=pic on x86_64-unknown-linux-gnu Fixes wrong unreachable_pub lints on nested and glob public reexport Stabilize -Z instrument-coverage as -C instrument-coverage Stabilize -Z print-link-args as --print link-args Add new Tier 3 target mips64-openwrt-linux-musl* Add new Tier 3 target armv7-unknown-linux-uclibceabi (softfloat)* Fix invalid removal of newlines from doc comments Add kernel target for RustyHermit Deny mixing bin crate type with lib crate types Make rustc use RUST_BACKTRACE=full by default Upgrade to LLVM 14 * Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more information on Rust&amp;rsquo;s tiered platform support.</description></item><item><title/><link>https://releases.rs/docs/1.59.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.59.0/</guid><description>1.59.0 (24 February, 2022) # Language # Stabilize default arguments for const parameters and remove the ordering restriction for type and const parameters Stabilize destructuring assignment Relax private in public lint on generic bounds and where clauses of trait impls Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V Compiler # Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0) Emit LLVM optimization remarks when enabled with -Cremark Fix sparc64 ABI for aggregates with floating point members Warn when a #[test]-like built-in attribute macro is present multiple times.</description></item><item><title/><link>https://releases.rs/docs/1.58.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.58.0/</guid><description>1.58.0 (13 January, 2022) # Language # Format strings can now capture arguments simply by writing {ident} in the string. This works in all macros accepting format strings. Support for this in panic! (panic!(&amp;quot;{ident}&amp;quot;)) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect. *const T pointers can now be dereferenced in const contexts.</description></item><item><title/><link>https://releases.rs/docs/1.58.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.58.1/</guid><description> 1.58.1 (19 January, 2022) # Fix race condition in std::fs::remove_dir_all (CVE-2022-21658) Handle captured arguments in the useless_format Clippy lint Move non_send_fields_in_send_ty Clippy lint to nursery Fix wrong error message displayed when some imports are missing Fix rustfmt not formatting generated files from stdin</description></item><item><title/><link>https://releases.rs/docs/1.57.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.57.0/</guid><description>1.57.0 (2 December, 2021) # Language # Macro attributes may follow #[derive] and will see the original (pre-cfg) input. Accept curly-brace macros in expressions, like m!{ .. }.method() and m!{ .. }?. Allow panicking in constant evaluation. Ignore derived Clone and Debug implementations during dead code analysis. Compiler # Create more accurate debuginfo for vtables. Add armv6k-nintendo-3ds at Tier 3*. Add armv7-unknown-linux-uclibceabihf at Tier 3*. Add m68k-unknown-linux-gnu at Tier 3*.</description></item><item><title/><link>https://releases.rs/docs/1.56.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.56.0/</guid><description>1.56.0 (21 October, 2021) # Language # The 2021 Edition is now stable. See the edition guide for more details. The pattern in binding @ pattern can now also introduce new bindings. Union field access is permitted in const fn. Compiler # Upgrade to LLVM 13. Support memory, address, and thread sanitizers on aarch64-unknown-freebsd. Allow specifying a deployment target version for all iOS targets Warnings can be forced on with --force-warn.</description></item><item><title/><link>https://releases.rs/docs/1.56.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.56.1/</guid><description> 1.56.1 (1 November, 2021) # Changes # New lints to detect the presence of bidirectional-override Unicode codepoints in the compiled source code (CVE-2021-42574)</description></item><item><title/><link>https://releases.rs/docs/1.55.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.55.0/</guid><description>1.55.0 (9 September, 2021) # Language # You can now write open &amp;ldquo;from&amp;rdquo; range patterns (X..), which will start at X and will end at the maximum value of the integer. You can now explicitly import the prelude of different editions through std::prelude (e.g. use std::prelude::rust_2021::*;). Compiler # Added tier 3* support for powerpc64le-unknown-freebsd. * Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more information on Rust&amp;rsquo;s tiered platform support.</description></item><item><title/><link>https://releases.rs/docs/1.54.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.54.0/</guid><description>1.54.0 (29 July, 2021) # Language # You can now use macros for values in some built-in attributes. This primarily allows you to call macros within the #[doc] attribute. For example, to include external documentation in your crate, you can now write the following:
#![doc = include_str!(&amp;#34;README.md&amp;#34;)] You can now cast between unsized slice types (and types which contain unsized slices) in const fn.
You can now use multiple generic lifetimes with impl Trait where the lifetimes don&amp;rsquo;t explicitly outlive another.</description></item><item><title/><link>https://releases.rs/docs/1.53.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.53.0/</guid><description>1.53.0 (17 June, 2021) # Language # You can now use unicode for identifiers. This allows multilingual identifiers but still doesn&amp;rsquo;t allow glyphs that are not considered characters such as ◆ or 🦀. More specifically you can now use any identifier that matches the UAX #31 &amp;ldquo;Unicode Identifier and Pattern Syntax&amp;rdquo; standard. This is the same standard as languages like Python, however Rust uses NFC normalization which may be different from other languages.</description></item><item><title/><link>https://releases.rs/docs/1.52.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.52.0/</guid><description>1.52.0 (6 May, 2021) # Language # Added the unsafe_op_in_unsafe_fn lint, which checks whether the unsafe code in an unsafe fn is wrapped in a unsafe block. This lint is allowed by default, and may become a warning or hard error in a future edition. You can now cast mutable references to arrays to a pointer of the same type as the element. Compiler # Upgraded the default LLVM to LLVM 12.</description></item><item><title/><link>https://releases.rs/docs/1.52.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.52.1/</guid><description>1.52.1 (10 May, 2021) # This release disables incremental compilation, unless the user has explicitly opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.
This is due to the widespread, and frequently occurring, breakage encountered by Rust users due to newly enabled incremental verification in 1.52.0. Notably, Rust users should upgrade to 1.52.0 or 1.52.1: the bugs that are detected by newly added incremental verification are still present in past stable versions, and are not yet fixed on any channel.</description></item><item><title/><link>https://releases.rs/docs/1.51.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.51.0/</guid><description>1.51.0 (25 March, 2021) # Language # You can now parameterize items such as functions, traits, and structs by constant values in addition to by types and lifetimes. Also known as &amp;ldquo;const generics&amp;rdquo; E.g. you can now write the following. Note: Only values of primitive integers, bool, or char types are currently permitted. struct GenericArray&amp;lt;T, const LENGTH: usize&amp;gt; { inner: [T; LENGTH] } impl&amp;lt;T, const LENGTH: usize&amp;gt; GenericArray&amp;lt;T, LENGTH&amp;gt; { const fn last(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;T&amp;gt; { if LENGTH == 0 { None } else { Some(&amp;amp;self.</description></item><item><title/><link>https://releases.rs/docs/1.50.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.50.0/</guid><description>1.50.0 (11 February, 2021) # Language # You can now use const values for x in [x; N] array expressions. This has been technically possible since 1.38.0, as it was unintentionally stabilized. Assignments to ManuallyDrop&amp;lt;T&amp;gt; union fields are now considered safe. Compiler # Added tier 3* support for the armv5te-unknown-linux-uclibceabi target. Added tier 3 support for the aarch64-apple-ios-macabi target. The x86_64-unknown-freebsd is now built with the full toolset. Dropped support for all cloudabi targets.</description></item><item><title/><link>https://releases.rs/docs/1.49.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.49.0/</guid><description>1.49.0 (31 December, 2020) # Language # Unions can now implement Drop, and you can now have a field in a union with ManuallyDrop&amp;lt;T&amp;gt;. You can now cast uninhabited enums to integers. You can now bind by reference and by move in patterns. This allows you to selectively borrow individual components of a type. E.g. #[derive(Debug)] struct Person { name: String, age: u8, } let person = Person { name: String::from(&amp;#34;Alice&amp;#34;), age: 20, }; // `name` is moved out of person, but `age` is referenced.</description></item><item><title/><link>https://releases.rs/docs/1.48.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.48.0/</guid><description>1.48.0 (19 November, 2020) # Language # The unsafe keyword is now syntactically permitted on modules. This is still rejected semantically, but can now be parsed by procedural macros. Compiler # Stabilised the -C link-self-contained=&amp;lt;yes|no&amp;gt; compiler flag. This tells rustc whether to link its own C runtime and libraries or to rely on a external linker to find them. (Supported only on windows-gnu, linux-musl, and wasi platforms.) You can now use -C target-feature=+crt-static on linux-gnu targets.</description></item><item><title/><link>https://releases.rs/docs/1.47.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.47.0/</guid><description>1.47.0 (8 October, 2020) # Language # Closures will now warn when not used. Compiler # Stabilized the -C control-flow-guard codegen option, which enables Control Flow Guard for Windows platforms, and is ignored on other platforms. Upgraded to LLVM 11. Added tier 3* support for the thumbv4t-none-eabi target. Upgrade the FreeBSD toolchain to version 11.4 RUST_BACKTRACE&amp;rsquo;s output is now more compact. * Refer to Rust&amp;rsquo;s [platform support page][platform-support-doc] for more information on Rust&amp;rsquo;s tiered platform support.</description></item><item><title/><link>https://releases.rs/docs/1.46.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.46.0/</guid><description>1.46.0 (27 August, 2020) # Language # if, match, and loop expressions can now be used in const functions. Additionally you are now also able to coerce and cast to slices (&amp;amp;[T]) in const functions. The #[track_caller] attribute can now be added to functions to use the function&amp;rsquo;s caller&amp;rsquo;s location information for panic messages. Recursively indexing into tuples no longer needs parentheses. E.g. x.0.0 over (x.0).0. mem::transmute can now be used in statics and constants.</description></item><item><title/><link>https://releases.rs/docs/1.45.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.0/</guid><description>1.45.0 (16 July, 2020) # Language # Out of range float to int conversions using as has been defined as a saturating conversion. This was previously undefined behaviour, but you can use the {f64, f32}::to_int_unchecked methods to continue using the current behaviour, which may be desirable in rare performance sensitive situations. mem::Discriminant&amp;lt;T&amp;gt; now uses T&amp;rsquo;s discriminant type instead of always using u64. Function like procedural macros can now be used in expression, pattern, and statement positions.</description></item><item><title/><link>https://releases.rs/docs/1.45.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.1/</guid><description> 1.45.1 (30 July, 2020) # Fix const propagation with references. rustfmt accepts rustfmt_skip in cfg_attr again. Avoid spurious implicit region bound. Install clippy on x.py install</description></item><item><title/><link>https://releases.rs/docs/1.45.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.45.2/</guid><description> 1.45.2 (3 August, 2020) # Fix bindings in tuple struct patterns Fix track_caller integration with trait objects</description></item><item><title/><link>https://releases.rs/docs/1.44.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.44.0/</guid><description>1.44.0 (4 June, 2020) # Language # You can now use async/.await with #[no_std] enabled. Added the unused_braces lint. Syntax-only changes
Expansion-driven outline module parsing #[cfg(FALSE)] mod foo { mod bar { mod baz; // `foo/bar/baz.rs` doesn&amp;#39;t exist, but no error! } } These are still rejected semantically, so you will likely receive an error but these changes can be seen and parsed by macros and conditional compilation.
Compiler # Rustc now respects the -C codegen-units flag in incremental mode.</description></item><item><title/><link>https://releases.rs/docs/1.44.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.44.1/</guid><description> 1.44.1 (18 June, 2020) # rustfmt accepts rustfmt_skip in cfg_attr again. Don&amp;rsquo;t hash executable filenames on apple platforms, fixing backtraces. Fix crashes when finding backtrace on macOS. Clippy applies lint levels into different files.</description></item><item><title/><link>https://releases.rs/docs/1.43.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.43.0/</guid><description>1.43.0 (23 April, 2020) # Language # Fixed using binary operations with &amp;amp;{number} (e.g. &amp;amp;1.0) not having the type inferred correctly. Attributes such as #[cfg()] can now be used on if expressions. Syntax only changes
Allow type Foo: Ord syntactically. Fuse associated and extern items up to defaultness. Syntactically allow self in all fn contexts. Merge fn syntax + cleanup item parsing. item macro fragments can be interpolated into traits, impls, and extern blocks.</description></item><item><title/><link>https://releases.rs/docs/1.43.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.43.1/</guid><description> 1.43.1 (7 May, 2020) # Updated openssl-src to 1.1.1g for CVE-2020-1967. Fixed the stabilization of AVX-512 features. Fixed cargo package --list not working with unpublished dependencies.</description></item><item><title/><link>https://releases.rs/docs/1.42.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.42.0/</guid><description>1.42.0 (12 March, 2020) # Language # You can now use the slice pattern syntax with subslices. e.g.
fn foo(words: &amp;amp;[&amp;amp;str]) { match words { [&amp;#34;Hello&amp;#34;, &amp;#34;World&amp;#34;, &amp;#34;!&amp;#34;, ..] =&amp;gt; println!(&amp;#34;Hello World!&amp;#34;), [&amp;#34;Foo&amp;#34;, &amp;#34;Bar&amp;#34;, ..] =&amp;gt; println!(&amp;#34;Baz&amp;#34;), rest =&amp;gt; println!(&amp;#34;{:?}&amp;#34;, rest), } } You can now use #[repr(transparent)] on univariant enums. Meaning that you can create an enum that has the exact layout and ABI of the type it contains.</description></item><item><title/><link>https://releases.rs/docs/1.41.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.41.0/</guid><description>1.41.0 (30 January, 2020) # Language # You can now pass type parameters to foreign items when implementing traits. E.g. You can now write impl&amp;lt;T&amp;gt; From&amp;lt;Foo&amp;gt; for Vec&amp;lt;T&amp;gt; {}. You can now arbitrarily nest receiver types in the self position. E.g. you can now write fn foo(self: Box&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt;) {}. Previously only Self, &amp;amp;Self, &amp;amp;mut Self, Arc&amp;lt;Self&amp;gt;, Rc&amp;lt;Self&amp;gt;, and Box&amp;lt;Self&amp;gt; were allowed. You can now use any valid identifier in a format_args macro.</description></item><item><title/><link>https://releases.rs/docs/1.41.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.41.1/</guid><description> 1.41.1 (27 February, 2020) # Always check types of static items Always check lifetime bounds of Copy impls Fix miscompilation in callers of Layout::repeat [Rust 1.41.0 was announced as the last Rust release with tier 1 or tier 2 support for 32-bit Apple targets][apple-32bit-drop]. That announcement did not expect a patch release. 1.41.1 also includes release binaries for these targets.</description></item><item><title/><link>https://releases.rs/docs/1.40.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.40.0/</guid><description>1.40.0 (19 December, 2019) # Language # You can now use tuple structs and tuple enum variant&amp;rsquo;s constructors in const contexts. e.g.
pub struct Point(i32, i32); const ORIGIN: Point = { let constructor = Point; constructor(0, 0) }; You can now mark structs, enums, and enum variants with the #[non_exhaustive] attribute to indicate that there may be variants or fields added in the future. For example this requires adding a wild-card branch (_ =&amp;gt; {}) to any match statements on a non-exhaustive enum.</description></item><item><title/><link>https://releases.rs/docs/1.39.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.39.0/</guid><description>1.39.0 (7 November, 2019) # Language # You can now create async functions and blocks with async fn, async move {}, and async {} respectively, and you can now call .await on async expressions. You can now use certain attributes on function, closure, and function pointer parameters. These attributes include cfg, cfg_attr, allow, warn, deny, forbid as well as inert helper attributes used by procedural macro attributes applied to items.</description></item><item><title/><link>https://releases.rs/docs/1.38.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.38.0/</guid><description>1.38.0 (26 September, 2019) # Language # The #[global_allocator] attribute can now be used in submodules. The #[deprecated] attribute can now be used on macros. Compiler # Added pipelined compilation support to rustc. This will improve compilation times in some cases. For further information please refer to the &amp;ldquo;Evaluating pipelined rustc compilation&amp;rdquo; thread. Added tier 3* support for the aarch64-uwp-windows-msvc, i686-uwp-windows-gnu, i686-uwp-windows-msvc, x86_64-uwp-windows-gnu, and x86_64-uwp-windows-msvc targets. Added tier 3 support for the armv7-unknown-linux-gnueabi and armv7-unknown-linux-musleabi targets.</description></item><item><title/><link>https://releases.rs/docs/1.37.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.37.0/</guid><description>1.37.0 (15 August, 2019) # Language # #[must_use] will now warn if the type is contained in a tuple, Box, or an array and unused. You can now use the cfg and cfg_attr attributes on generic parameters. You can now use enum variants through type alias. e.g. You can write the following: type MyOption = Option&amp;lt;u8&amp;gt;; fn increment_or_zero(x: MyOption) -&amp;gt; u8 { match x { MyOption::Some(y) =&amp;gt; y + 1, MyOption::None =&amp;gt; 0, } } You can now use _ as an identifier for consts.</description></item><item><title/><link>https://releases.rs/docs/1.36.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.36.0/</guid><description>1.36.0 (4 July, 2019) # Language # Non-Lexical Lifetimes are now enabled on the 2015 edition. The order of traits in trait objects no longer affects the semantics of that object. e.g. dyn Send + fmt::Debug is now equivalent to dyn fmt::Debug + Send, where this was previously not the case. Libraries # HashMap&amp;rsquo;s implementation has been replaced with hashbrown::HashMap implementation. TryFromSliceError now implements From&amp;lt;Infallible&amp;gt;. mem::needs_drop is now available as a const fn.</description></item><item><title/><link>https://releases.rs/docs/1.35.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.35.0/</guid><description>1.35.0 (23 May, 2019) # Language # FnOnce, FnMut, and the Fn traits are now implemented for Box&amp;lt;FnOnce&amp;gt;, Box&amp;lt;FnMut&amp;gt;, and Box&amp;lt;Fn&amp;gt; respectively. You can now coerce closures into unsafe function pointers. e.g. unsafe fn call_unsafe(func: unsafe fn()) { func() } pub fn main() { unsafe { call_unsafe(|| {}); } } Compiler # Added the armv6-unknown-freebsd-gnueabihf and armv7-unknown-freebsd-gnueabihf targets. Added the wasm32-unknown-wasi target. Libraries # Thread will now show its ID in Debug output.</description></item><item><title/><link>https://releases.rs/docs/1.34.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.0/</guid><description>1.34.0 (11 April, 2019) # Language # You can now use #[deprecated = &amp;quot;reason&amp;quot;] as a shorthand for #[deprecated(note = &amp;quot;reason&amp;quot;)]. This was previously allowed by mistake but had no effect. You can now accept token streams in #[attr()],#[attr[]], and #[attr{}] procedural macros. You can now write extern crate self as foo; to import your crate&amp;rsquo;s root into the extern prelude. Compiler # You can now target riscv64imac-unknown-none-elf and riscv64gc-unknown-none-elf.</description></item><item><title/><link>https://releases.rs/docs/1.34.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.1/</guid><description> 1.34.1 (25 April, 2019) # Fix false positives for the redundant_closure Clippy lint Fix false positives for the missing_const_for_fn Clippy lint Fix Clippy panic when checking some macros</description></item><item><title/><link>https://releases.rs/docs/1.34.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.34.2/</guid><description> 1.34.2 (14 May, 2019) # Destabilize the Error::type_id function due to a security vulnerability (CVE-2019-12083)</description></item><item><title/><link>https://releases.rs/docs/1.33.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.33.0/</guid><description>1.33.0 (28 February, 2019) # Language # You can now use the cfg(target_vendor) attribute. E.g. #[cfg(target_vendor=&amp;quot;apple&amp;quot;)] fn main() { println!(&amp;quot;Hello Apple!&amp;quot;); } Integer patterns such as in a match expression can now be exhaustive. E.g. You can have match statement on a u8 that covers 0..=255 and you would no longer be required to have a _ =&amp;gt; unreachable!() case. You can now have multiple patterns in if let and while let expressions.</description></item><item><title/><link>https://releases.rs/docs/1.32.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.32.0/</guid><description>1.32.0 (17 January, 2019) # Language # 2018 edition # You can now use the ? operator in macro definitions. The ? operator allows you to specify zero or one repetitions similar to the * and + operators. Module paths with no leading keyword like super, self, or crate, will now always resolve to the item (enum, struct, etc.) available in the module if present, before resolving to a external crate or an item the prelude.</description></item><item><title/><link>https://releases.rs/docs/1.31.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.31.0/</guid><description>1.31.0 (6 December, 2018) # Language # 🎉 This version marks the release of the 2018 edition of Rust. 🎉 New lifetime elision rules now allow for eliding lifetimes in functions and impl headers. E.g. impl&amp;lt;'a&amp;gt; Reader for BufReader&amp;lt;'a&amp;gt; {} can now be impl Reader for BufReader&amp;lt;'_&amp;gt; {}. Lifetimes are still required to be defined in structs. You can now define and use const functions. These are currently a strict minimal subset of the const fn RFC.</description></item><item><title/><link>https://releases.rs/docs/1.31.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.31.1/</guid><description> 1.31.1 (20 December, 2018) # Changes # Fix Rust failing to build on powerpc-unknown-netbsd Fix broken go-to-definition in RLS Fix infinite loop on hover in RLS</description></item><item><title/><link>https://releases.rs/docs/1.30.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.30.0/</guid><description>1.30.0 (25 October, 2018) # Language # Procedural macros are now available. These kinds of macros allow for more powerful code generation. There is a new chapter available in the Rust Programming Language book that goes further in depth. You can now use keywords as identifiers using the raw identifiers syntax (r#), e.g. let r#for = true; Using anonymous parameters in traits is now deprecated with a warning and will be a hard error in the 2018 edition.</description></item><item><title/><link>https://releases.rs/docs/1.30.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.30.1/</guid><description> 1.30.1 (8 November, 2018) # Changes # Fixed overflow ICE in rustdoc Cap Cargo progress bar width at 60 in MSYS terminals</description></item><item><title/><link>https://releases.rs/docs/1.29.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.0/</guid><description>1.29.0 (13 September, 2018) # Compiler # Bumped minimum LLVM version to 5.0. Added powerpc64le-unknown-linux-musl target. Added aarch64-unknown-hermit and x86_64-unknown-hermit targets. Upgraded to LLVM 7. Libraries # Once::call_once no longer requires Once to be 'static. BuildHasherDefault now implements PartialEq and Eq. Box&amp;lt;CStr&amp;gt;, Box&amp;lt;OsStr&amp;gt;, and Box&amp;lt;Path&amp;gt; now implement Clone. Implemented PartialEq&amp;lt;&amp;amp;str&amp;gt; for OsString and PartialEq&amp;lt;OsString&amp;gt; for &amp;amp;str. Cell&amp;lt;T&amp;gt; now allows T to be unsized. SocketAddr is now stable on Redox. Stabilized APIs # Arc::downcast Iterator::flatten Rc::downcast Cargo # Cargo can silently fix some bad lockfiles.</description></item><item><title/><link>https://releases.rs/docs/1.29.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.1/</guid><description>1.29.1 (25 September, 2018) # Security Notes # The standard library&amp;rsquo;s str::repeat function contained an out of bounds write caused by an integer overflow. This has been fixed by deterministically panicking when an overflow happens.
Thank you to Scott McMurray for responsibly disclosing this vulnerability to us.</description></item><item><title/><link>https://releases.rs/docs/1.29.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.29.2/</guid><description> 1.29.2 (11 October, 2018) # Changes # Workaround for an aliasing-related LLVM bug, which caused miscompilation. The rls-preview component on the windows-gnu targets has been restored.</description></item><item><title/><link>https://releases.rs/docs/1.28.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.28.0/</guid><description>1.28.0 (2 August, 2018) # Language # The #[repr(transparent)] attribute is now stable. This attribute allows a Rust newtype wrapper (struct NewType&amp;lt;T&amp;gt;(T);) to be represented as the inner type across Foreign Function Interface (FFI) boundaries. The keywords pure, sizeof, alignof, and offsetof have been unreserved and can now be used as identifiers. The GlobalAlloc trait and #[global_allocator] attribute are now stable. This will allow users to specify a global allocator for their program.</description></item><item><title/><link>https://releases.rs/docs/1.27.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.0/</guid><description>1.27.0 (21 June, 2018) # Language # Removed &amp;lsquo;proc&amp;rsquo; from the reserved keywords list. This allows proc to be used as an identifier. The dyn syntax is now available. This syntax is equivalent to the bare Trait syntax, and should make it clearer when being used in tandem with impl Trait because it is equivalent to the following syntax: &amp;amp;Trait == &amp;amp;dyn Trait, &amp;amp;mut Trait == &amp;amp;mut dyn Trait, and Box&amp;lt;Trait&amp;gt; == Box&amp;lt;dyn Trait&amp;gt;.</description></item><item><title/><link>https://releases.rs/docs/1.27.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.1/</guid><description>1.27.1 (10 July, 2018) # Security Notes # rustdoc would execute plugins in the /tmp/rustdoc/plugins directory when running, which enabled executing code as some other user on a given machine. This release fixes that vulnerability; you can read more about this on the blog. The associated CVE is CVE-2018-1000622.
Thank you to Red Hat for responsibly disclosing this vulnerability to us.
Compatibility Notes # The borrow checker was fixed to avoid an additional potential unsoundness when using match ergonomics: #51415, #49534.</description></item><item><title/><link>https://releases.rs/docs/1.27.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.27.2/</guid><description> 1.27.2 (20 July, 2018) # Compatibility Notes # The borrow checker was fixed to avoid potential unsoundness when using match ergonomics: #52213.</description></item><item><title/><link>https://releases.rs/docs/1.26.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.0/</guid><description>1.26.0 (10 May, 2018) # Language # Closures now implement Copy and/or Clone if all captured variables implement either or both traits. The inclusive range syntax e.g. for x in 0..=10 is now stable. The '_ lifetime is now stable. The underscore lifetime can be used anywhere a lifetime can be elided. impl Trait is now stable allowing you to have abstract types in returns or in function parameters. E.</description></item><item><title/><link>https://releases.rs/docs/1.26.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.1/</guid><description> 1.26.1 (29 May, 2018) # Tools # RLS now works on Windows. Rustfmt stopped badly formatting text in some cases. Compatibility Notes # fn main() -&amp;gt; impl Trait no longer works for non-Termination trait. This reverts an accidental stabilization. NaN &amp;gt; NaN no longer returns true in const-fn contexts. Prohibit using turbofish for impl Trait in method arguments.</description></item><item><title/><link>https://releases.rs/docs/1.26.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.26.2/</guid><description> 1.26.2 (5 June, 2018) # Compatibility Notes # The borrow checker was fixed to avoid unsoundness when using match ergonomics.</description></item><item><title/><link>https://releases.rs/docs/1.25.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.25.0/</guid><description>1.25.0 (29 March, 2018) # Language # The #[repr(align(x))] attribute is now stable. RFC 1358 You can now use nested groups of imports. e.g. use std::{fs::File, io::Read, path::{Path, PathBuf}}; You can now have | at the start of a match arm. e.g. enum Foo { A, B, C } fn main() { let x = Foo::A; match x { | Foo::A | Foo::B =&amp;gt; println!(&amp;#34;AB&amp;#34;), | Foo::C =&amp;gt; println!(&amp;#34;C&amp;#34;), } } Compiler # Upgraded to LLVM 6.</description></item><item><title/><link>https://releases.rs/docs/1.24.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.24.0/</guid><description>1.24.0 (15 February, 2018) # Language # External sysv64 ffi is now available. eg. extern &amp;quot;sysv64&amp;quot; fn foo () {} Compiler # rustc now uses 16 codegen units by default for release builds. For the fastest builds, utilize codegen-units=1. Added armv4t-unknown-linux-gnueabi target. Add aarch64-unknown-openbsd support Libraries # str::find::&amp;lt;char&amp;gt; now uses memchr. This should lead to a 10x improvement in performance in the majority of cases. OsStr&amp;rsquo;s Debug implementation is now lossless and consistent with Windows.</description></item><item><title/><link>https://releases.rs/docs/1.24.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.24.1/</guid><description> 1.24.1 (1 March, 2018) # Changes # Do not abort when unwinding through FFI Emit UTF-16 files for linker arguments on Windows Make the error index generator work again Cargo will warn on Windows 7 if an update is needed.</description></item><item><title/><link>https://releases.rs/docs/1.23.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.23.0/</guid><description>1.23.0 (4 January, 2018) # Language # Arbitrary auto traits are now permitted in trait objects. rustc now uses subtyping on the left hand side of binary operations. Which should fix some confusing errors in some operations. Compiler # Enabled TrapUnreachable in LLVM which should mitigate the impact of undefined behavior. rustc now suggests renaming import if names clash. Display errors/warnings correctly when there are zero-width or wide characters. rustc now avoids unnecessary copies of arguments that are simple bindings This should improve memory usage on average by 5-10%.</description></item><item><title/><link>https://releases.rs/docs/1.22.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.22.0/</guid><description>1.22.0 (22 November, 2017) # Language # non_snake_case lint now allows extern no-mangle functions Now accepts underscores in unicode escapes T op= &amp;amp;T now works for numeric types. eg. let mut x = 2; x += &amp;amp;8; types that impl Drop are now allowed in const and static types Compiler # rustc now defaults to having 16 codegen units at debug on supported platforms. rustc will no longer inline in codegen units when compiling for debug This should decrease compile times for debug builds.</description></item><item><title/><link>https://releases.rs/docs/1.22.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.22.1/</guid><description> 1.22.1 (22 November, 2017) # Changes # Update Cargo to fix an issue with macOS 10.13 &amp;ldquo;High Sierra&amp;rdquo;</description></item><item><title/><link>https://releases.rs/docs/1.21.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.21.0/</guid><description>1.21.0 (12 October, 2017) # Language # You can now use static references for literals. Example: fn main() { let x: &amp;amp;&amp;#39;static u32 = &amp;amp;0; } Relaxed path syntax. Optional :: before &amp;lt; is now allowed in all contexts. Example: my_macro!(Vec&amp;lt;i32&amp;gt;::new); // Always worked my_macro!(Vec::&amp;lt;i32&amp;gt;::new); // Now works Compiler # Upgraded jemalloc to 4.5.0 Enabled unwinding panics on Redox Now runs LLVM in parallel during translation phase. This should reduce peak memory usage.</description></item><item><title/><link>https://releases.rs/docs/1.20.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.20.0/</guid><description>1.20.0 (31 August, 2017) # Language # Associated constants are now stabilised. A lot of macro bugs are now fixed. Compiler # Struct fields are now properly coerced to the expected field type. Enabled wasm LLVM backend WASM can now be built with the wasm32-experimental-emscripten target. Changed some of the error messages to be more helpful. Add support for RELRO(RELocation Read-Only) for platforms that support it. rustc now reports the total number of errors on compilation failure previously this was only the number of errors in the pass that failed.</description></item><item><title/><link>https://releases.rs/docs/1.19.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.19.0/</guid><description>1.19.0 (20 July, 2017) # Language # Numeric fields can now be used for creating tuple structs. RFC 1506 For example struct Point(u32, u32); let x = Point { 0: 7, 1: 0 };. Macro recursion limit increased to 1024 from 64. Added lint for detecting unused macros. loop can now return a value with break. RFC 1624 For example: let x = loop { break 7; }; C compatible unions are now available.</description></item><item><title/><link>https://releases.rs/docs/1.18.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.18.0/</guid><description>1.18.0 (8 June, 2017) # Language # Stabilize pub(restricted) pub can now accept a module path to make the item visible to just that module tree. Also accepts the keyword crate to make something public to the whole crate but not users of the library. Example: pub(crate) mod utils;. RFC 1422. Stabilize #![windows_subsystem] attribute conservative exposure of the /SUBSYSTEM linker flag on Windows platforms. RFC 1665. Refactor of trait object type parsing Now ty in macros can accept types like Write + Send, trailing + are now supported in trait objects, and better error reporting for trait objects starting with ?</description></item><item><title/><link>https://releases.rs/docs/1.17.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.17.0/</guid><description>1.17.0 (27 April, 2017) # Language # The lifetime of statics and consts defaults to 'static. RFC 1623 Fields of structs may be initialized without duplicating the field/variable names. RFC 1682 Self may be included in the where clause of impls. RFC 1647 When coercing to an unsized type lifetimes must be equal. That is, there is no subtyping between T and U when T: Unsize&amp;lt;U&amp;gt;. For example, coercing &amp;amp;mut [&amp;amp;'a X; N] to &amp;amp;mut [&amp;amp;'b X] requires 'a be equal to 'b.</description></item><item><title/><link>https://releases.rs/docs/1.16.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.16.0/</guid><description>1.16.0 (16 March, 2017) # Language # The compiler&amp;rsquo;s dead_code lint now accounts for type aliases. Uninhabitable enums (those without any variants) no longer permit wildcard match patterns Clean up semantics of self in an import list Self may appear in impl headers Self may appear in struct expressions Compiler # rustc now supports --emit=metadata, which causes rustc to emit a .rmeta file containing only crate metadata. This can be used by tools like the Rust Language Service to perform metadata-only builds.</description></item><item><title/><link>https://releases.rs/docs/1.15.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.15.0/</guid><description>1.15.0 (2 February, 2017) # Language # Basic procedural macros allowing custom #[derive], aka &amp;ldquo;macros 1.1&amp;rdquo;, are stable. This allows popular code-generating crates like Serde and Diesel to work ergonomically. RFC 1681. Tuple structs may be empty. Unary and empty tuple structs may be instantiated with curly braces. Part of RFC 1506. A number of minor changes to name resolution have been activated. They add up to more consistent semantics, allowing for future evolution of Rust macros.</description></item><item><title/><link>https://releases.rs/docs/1.15.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.15.1/</guid><description> 1.15.1 (9 February, 2017) # Fix IntoIter::as_mut_slice&amp;rsquo;s signature Compile compiler builtins with -fPIC on 32-bit platforms</description></item><item><title/><link>https://releases.rs/docs/1.14.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.14.0/</guid><description>1.14.0 (22 December, 2016) # Language # .. matches multiple tuple fields in enum variants, structs and tuples. RFC 1492. Safe fn items can be coerced to unsafe fn pointers use * and use ::* both glob-import from the crate root It&amp;rsquo;s now possible to call a Vec&amp;lt;Box&amp;lt;Fn()&amp;gt;&amp;gt; without explicit dereferencing Compiler # Mark enums with non-zero discriminant as non-zero Lower-case static mut names are linted like other statics and consts Fix ICE on some macros in const integer positions (e.</description></item><item><title/><link>https://releases.rs/docs/1.13.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.13.0/</guid><description>1.13.0 (10 November, 2016) # Language # Stabilize the ? operator. ? is a simple way to propagate errors, like the try! macro, described in RFC 0243. Stabilize macros in type position. Described in RFC 873. Stabilize attributes on statements. Described in RFC 0016. Fix #[derive] for empty tuple structs/variants Fix lifetime rules for &amp;lsquo;if&amp;rsquo; conditions Avoid loading and parsing unconfigured non-inline modules Compiler # Add the -C link-arg argument Remove the old AST-based backend from rustc_trans Don&amp;rsquo;t enable NEON by default on armv7 Linux Fix debug line number info for macro expansions Do not emit &amp;ldquo;class method&amp;rdquo; debuginfo for types that are not DICompositeType Warn about multiple conflicting #[repr] hints When sizing DST, don&amp;rsquo;t double-count nested struct prefixes Default RUST_MIN_STACK to 16MiB for now Improve rlib metadata format.</description></item><item><title/><link>https://releases.rs/docs/1.12.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.12.0/</guid><description>1.12.0 (29 September, 2016) # Highlights # rustc translates code to LLVM IR via its own &amp;ldquo;middle&amp;rdquo; IR (MIR). This translation pass is far simpler than the previous AST-&amp;gt;LLVM pass, and creates opportunities to perform new optimizations directly on the MIR. It was previously described on the Rust blog. rustc presents a new, more readable error format, along with machine-readable JSON error output for use by IDEs. Most common editors supporting Rust have been updated to work with it.</description></item><item><title/><link>https://releases.rs/docs/1.12.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.12.1/</guid><description>1.12.1 (20 October, 2016) # Regression Fixes # ICE: &amp;lsquo;rustc&amp;rsquo; panicked at &amp;lsquo;assertion failed: concrete_substs.is_normalized_for_trans()&amp;rsquo; #36381 Confusion with double negation and booleans rustc 1.12.0 fails with SIGSEGV in release mode (syn crate 0.8.0) Rustc 1.12.0 Windows build of ethcore crate fails with LLVM error 1.12.0: High memory usage when linking in release mode with debug info Corrupted memory after updated to 1.12 &amp;ldquo;Let NullaryConstructor = something;&amp;rdquo; causes internal compiler error: &amp;ldquo;tried to overwrite interned AdtDef&amp;rdquo; Fix ICE: inject bitcast if types mismatch for invokes/calls/stores debuginfo: Handle spread_arg case in MIR-trans in a more stable way.</description></item><item><title/><link>https://releases.rs/docs/1.11.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.11.0/</guid><description>1.11.0 (18 August, 2016) # Language # Support nested cfg_attr attributes Allow statement-generating braced macro invocations at the end of blocks Macros can be expanded inside of trait definitions #[macro_use] works properly when it is itself expanded from a macro Stabilized APIs # BinaryHeap::append BTreeMap::append BTreeMap::split_off BTreeSet::append BTreeSet::split_off f32::to_degrees (in libcore - previously stabilized in libstd) f32::to_radians (in libcore - previously stabilized in libstd) f64::to_degrees (in libcore - previously stabilized in libstd) f64::to_radians (in libcore - previously stabilized in libstd) Iterator::sum Iterator::product Cell::get_mut RefCell::get_mut Libraries # The thread_local!</description></item><item><title/><link>https://releases.rs/docs/1.10.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.10.0/</guid><description>1.10.0 (7 July, 2016) # Language # Copy types are required to have a trivial implementation of Clone. RFC 1521. Single-variant enums support the #[repr(..)] attribute. Fix #[derive(RustcEncodable)] in the presence of other encode methods. panic! can be converted to a runtime abort with the -C panic=abort flag. RFC 1513. Add a new crate type, &amp;lsquo;cdylib&amp;rsquo;. cdylibs are dynamic libraries suitable for loading by non-Rust hosts. RFC 1510. Note that Cargo does not yet directly support cdylibs.</description></item><item><title/><link>https://releases.rs/docs/1.9.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.9.0/</guid><description>1.9.0 (26 May, 2016) # Language # The #[deprecated] attribute when applied to an API will generate warnings when used. The warnings may be suppressed with #[allow(deprecated)]. RFC 1270. fn item types are zero sized, and each fn names a unique type. This will break code that transmutes fns, so calling transmute on a fn type will generate a warning for a few cycles, then will be converted to an error.</description></item><item><title/><link>https://releases.rs/docs/1.8.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.8.0/</guid><description>1.8.0 (14 April, 2016) # Language # Rust supports overloading of compound assignment statements like += by implementing the AddAssign, SubAssign, MulAssign, DivAssign, RemAssign, BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, or ShrAssign traits. RFC 953. Empty structs can be defined with braces, as in struct Foo { }, in addition to the non-braced form, struct Foo;. RFC 218. Libraries # Stabilized APIs: str::encode_utf16 (renamed from utf16_units) str::EncodeUtf16 (renamed from Utf16Units) Ref::map RefMut::map ptr::drop_in_place time::Instant time::SystemTime Instant::now Instant::duration_since (renamed from duration_from_earlier) Instant::elapsed SystemTime::now SystemTime::duration_since (renamed from duration_from_earlier) SystemTime::elapsed Various Add/Sub impls for Time and SystemTime SystemTimeError SystemTimeError::duration Various impls for SystemTimeError UNIX_EPOCH AddAssign, SubAssign, MulAssign, DivAssign, RemAssign, BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign.</description></item><item><title/><link>https://releases.rs/docs/1.7.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.7.0/</guid><description>1.7.0 (3 March, 2016) # Libraries # Stabilized APIs Path Path::strip_prefix (renamed from relative_from) path::StripPrefixError (new error type returned from strip_prefix) Ipv4Addr Ipv4Addr::is_loopback Ipv4Addr::is_private Ipv4Addr::is_link_local Ipv4Addr::is_multicast Ipv4Addr::is_broadcast Ipv4Addr::is_documentation Ipv6Addr Ipv6Addr::is_unspecified Ipv6Addr::is_loopback Ipv6Addr::is_multicast Vec Vec::as_slice Vec::as_mut_slice String String::as_str String::as_mut_str Slices &amp;lt;[T]&amp;gt;::clone_from_slice, which now requires the two slices to be the same length &amp;lt;[T]&amp;gt;::sort_by_key checked, saturated, and overflowing operations i32::checked_rem, i32::checked_neg, i32::checked_shl, i32::checked_shr i32::saturating_mul i32::overflowing_add, i32::overflowing_sub, i32::overflowing_mul, i32::overflowing_div i32::overflowing_rem, i32::overflowing_neg, i32::overflowing_shl, i32::overflowing_shr u32::checked_rem, u32::checked_neg, u32::checked_shl, u32::checked_shl u32::saturating_mul u32::overflowing_add, u32::overflowing_sub, u32::overflowing_mul, u32::overflowing_div u32::overflowing_rem, u32::overflowing_neg, u32::overflowing_shl, u32::overflowing_shr and checked, saturated, and overflowing operations for other primitive types FFI ffi::IntoStringError CString::into_string CString::into_bytes CString::into_bytes_with_nul From&amp;lt;CString&amp;gt; for Vec&amp;lt;u8&amp;gt; IntoStringError IntoStringError::into_cstring IntoStringError::utf8_error Error for IntoStringError Hashing std::hash::BuildHasher BuildHasher::Hasher BuildHasher::build_hasher std::hash::BuildHasherDefault HashMap::with_hasher HashMap::with_capacity_and_hasher HashSet::with_hasher HashSet::with_capacity_and_hasher std::collections::hash_map::RandomState RandomState::new Validating UTF-8 is faster by a factor of between 7 and 14x for ASCII input.</description></item><item><title/><link>https://releases.rs/docs/1.6.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.6.0/</guid><description>1.6.0 (21 January, 2016) # Language # The #![no_std] attribute causes a crate to not be linked to the standard library, but only the core library, as described in RFC 1184. The core library defines common types and traits but has no platform dependencies whatsoever, and is the basis for Rust software in environments that cannot support a full port of the standard library, such as operating systems. Most of the core library is now stable.</description></item><item><title/><link>https://releases.rs/docs/1.5.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.5.0/</guid><description>1.5.0 (10 December, 2015) # ~700 changes, numerous bugfixes Highlights # Stabilized APIs: BinaryHeap::from, BinaryHeap::into_sorted_vec, BinaryHeap::into_vec, Condvar::wait_timeout, FileTypeExt::is_block_device, FileTypeExt::is_char_device, FileTypeExt::is_fifo, FileTypeExt::is_socket, FileTypeExt, Formatter::alternate, Formatter::fill, Formatter::precision, Formatter::sign_aware_zero_pad, Formatter::sign_minus, Formatter::sign_plus, Formatter::width, Iterator::cmp, Iterator::eq, Iterator::ge, Iterator::gt, Iterator::le, Iterator::lt, Iterator::ne, Iterator::partial_cmp, Path::canonicalize, Path::exists, Path::is_dir, Path::is_file, Path::metadata, Path::read_dir, Path::read_link, Path::symlink_metadata, Utf8Error::valid_up_to, Vec::resize, VecDeque::as_mut_slices, VecDeque::as_slices, VecDeque::insert, VecDeque::shrink_to_fit, VecDeque::swap_remove_back, VecDeque::swap_remove_front, slice::split_first_mut, slice::split_first, slice::split_last_mut, slice::split_last, char::from_u32_unchecked, fs::canonicalize, str::MatchIndices, str::RMatchIndices, str::match_indices, str::rmatch_indices, str::slice_mut_unchecked, string::ParseError. Rust applications hosted on crates.</description></item><item><title/><link>https://releases.rs/docs/1.4.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.4.0/</guid><description>1.4.0 (29 October, 2015) # ~1200 changes, numerous bugfixes Highlights # Windows builds targeting the 64-bit MSVC ABI and linker (instead of GNU) are now supported and recommended for use. Breaking Changes # Several changes have been made to fix type soundness and improve the behavior of associated types. See RFC 1214. Although we have mostly introduced these changes as warnings this release, to become errors next release, there are still some scenarios that will see immediate breakage.</description></item><item><title/><link>https://releases.rs/docs/1.3.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.3.0/</guid><description>1.3.0 (17 September, 2015) # ~900 changes, numerous bugfixes Highlights # The new object lifetime defaults have been turned on after a cycle of warnings about the change. Now types like &amp;amp;'a Box&amp;lt;Trait&amp;gt; (or &amp;amp;'a Rc&amp;lt;Trait&amp;gt;, etc) will change from being interpreted as &amp;amp;'a Box&amp;lt;Trait+'a&amp;gt; to &amp;amp;'a Box&amp;lt;Trait+'static&amp;gt;. The Rustonomicon is a new book in the official documentation that dives into writing unsafe Rust. The Duration API, has been stabilized.</description></item><item><title/><link>https://releases.rs/docs/1.2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.2.0/</guid><description>1.2.0 (7 August, 2015) # ~1200 changes, numerous bugfixes Highlights # Dynamically-sized-type coercions allow smart pointer types like Rc to contain types without a fixed size, arrays and trait objects, finally enabling use of Rc&amp;lt;[T]&amp;gt; and completing the implementation of DST. Parallel codegen is now working again, which can substantially speed up large builds in debug mode; It also gets another ~33% speedup when bootstrapping on a 4 core machine (using 8 jobs).</description></item><item><title/><link>https://releases.rs/docs/1.1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://releases.rs/docs/1.1.0/</guid><description>1.1.0 (25 June, 2015) # ~850 changes, numerous bugfixes Highlights # The std::fs module has been expanded to expand the set of functionality exposed: DirEntry now supports optimizations like file_type and metadata which don&amp;rsquo;t incur a syscall on some platforms. A symlink_metadata function has been added. The fs::Metadata structure now lowers to its OS counterpart, providing access to all underlying information. The compiler now contains extended explanations of many errors.</description></item></channel></rss>